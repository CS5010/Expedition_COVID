{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"CovidA21-TFTExtendedDates-Rurality-Rur4.5-MAD1-2-JulyCutoff","provenance":[{"file_id":"1dzeY6nQGRipDbY7voQbuVPbFqY4YleEP","timestamp":1641991305455},{"file_id":"1LGbMPiYGLxlwuoVoGsB_jpFvKx3R-uJ0","timestamp":1641498592185},{"file_id":"1kpQH8NQN-sBQ4ElCi93-Hll-lt5FZE2C","timestamp":1641410985050},{"file_id":"1cYauVq6_t1QopOtD4n6K0bhQOy7YTYxw","timestamp":1641170696861},{"file_id":"1OCc8ZeUwOBkPFFIe6KSv7IoHAzGQw1rH","timestamp":1641139702549},{"file_id":"1LX3PqWDKsRr4wuCvdlrnYWg-oy2SMN7u","timestamp":1639423172613},{"file_id":"1X9IT-w-qHiemWaFEfc1bcGovj1o2PZhd","timestamp":1634235766106},{"file_id":"1U3gSAoE-Ie7VRXaJYSCYJQ3ogIgVb3aj","timestamp":1633484987357},{"file_id":"1BY6IHgKF_NBIV888ObHrJaW953KQNjkE","timestamp":1633387542623},{"file_id":"16mxvaG-7IVgS3bNo5D2KHyHI_k1_aR6H","timestamp":1633382630715},{"file_id":"1dUrxNiOwMh5amU1RYjj6VGOqaZT1ANZm","timestamp":1633210900751},{"file_id":"1ZbrTE06CcWZ_-KIWRDUoj6kopI6UR8vS","timestamp":1633203181071},{"file_id":"1xS-z2V7puWbXL5KBAx6i_GNULrsZabOb","timestamp":1632659089075},{"file_id":"1rax5ABsD4xZu0-2qRpg6PlqBfrGP1oV7","timestamp":1632623828366},{"file_id":"1ri50zlzqbaWMvY34lOEwptccFue7F_29","timestamp":1632582996498},{"file_id":"1Q5ttSHb1MkdCVglMYdYP5ATbpNe0cJ-y","timestamp":1632578185532},{"file_id":"11suzNnOlkjn8WCoFH5IEphzuyS1eDRvd","timestamp":1632572872726},{"file_id":"1zNQV60JE88pF0mYbuFA-OrreuhdnjpaQ","timestamp":1632533086366},{"file_id":"1WmPfLvF-JN23oLky1yHkWfohdtdO0bMl","timestamp":1632483862624},{"file_id":"1ziG7yfaK5sYyY6fv3p8m448S_W09FbQY","timestamp":1632151061015},{"file_id":"1BsN23Nl-llIQbQ7yXN-aBu-7LN97ngOm","timestamp":1632055977045},{"file_id":"1-GICSb5zOD7ruUaDDG4MzKR1BXqN7xbY","timestamp":1629478778044},{"file_id":"1oE1noEyawNr4Bq0U6hMpLBHtgC3Z8RR8","timestamp":1629473232493},{"file_id":"1IZT72Ki-M3-OPB4Gh8IfDlJondcWYkiP","timestamp":1629471191078},{"file_id":"1VuKIqIXvIYCNf5NtK90ydTqX01_xYQdj","timestamp":1621302237354},{"file_id":"1Y17PAZR1HQRV0k3V0i_HrBRy3NJZuyNB","timestamp":1620606818533},{"file_id":"1N9BaDLD3w53MNyhXhxjYJ4tk-9eNeiMe","timestamp":1620480989954},{"file_id":"1hCmyUgLYWdT9na-FFphDFRyCTjIjFhCx","timestamp":1620439359653},{"file_id":"1BUW1uMmXAbDonAc10lDZQZxCAVp-KDaJ","timestamp":1620356751581},{"file_id":"1iqYhCJYSXKppL89X4J86ev4FVj85zv3d","timestamp":1620331833484},{"file_id":"15Mx31V0RGFkX7ffN5IM8FLDjRPbarjJq","timestamp":1620320672024},{"file_id":"1Xd4u9daoCrd9pXKH6ln8QHtj6VI_RPvW","timestamp":1620310683863},{"file_id":"1aWM3UZHLiRn-XBrUEPu4WZApox7Qk90N","timestamp":1620302245066},{"file_id":"1Ufgcxo8b0CNVUozFiCyp8TtbrdG6yj6N","timestamp":1620220279221},{"file_id":"1cID9eXOuBKsjE0sJHDGjCjWUuuW2pHD8","timestamp":1620132245272},{"file_id":"10buC_QfOn1eyKazwtKW2BeUlqG3nJ4F1","timestamp":1619825317090},{"file_id":"1pFvKkYReNNwEw9Qsvcoosx_qkrgA5QFY","timestamp":1619808392292},{"file_id":"1TFJjdM4kr2HKMqp9fl2unE8rTPvG2Cqv","timestamp":1619787382328},{"file_id":"178OZ4CPSkcWYWcGfuWAzb22ml8N8Sbz-","timestamp":1619751547039},{"file_id":"1tbw-M5q8TolVP9-KFuYsHK7p5bVKvlZ0","timestamp":1619746385056},{"file_id":"15Nimqp9KtTde6gdurtiVeglAcG_nv8x3","timestamp":1619708045035},{"file_id":"1b5YQ-oVuce1iPFTpzbfUy56ROcsY0Z4u","timestamp":1619704222183},{"file_id":"1bqDuXWO51czb9uUHLWMXkp3hhROd7Dbx","timestamp":1619703564626},{"file_id":"1h5jec5qSPF8YuGrBlEmeH-coartyg3gd","timestamp":1619660435815},{"file_id":"1VOJ8TYLRQ78NyNBYPaUh3mtusE75FhA6","timestamp":1619647936509},{"file_id":"1eeYbOxRAYutbUSLXHGzdFBsahlb5DSkC","timestamp":1619610901895},{"file_id":"1qaORX7MWpVXuIcj9NOyqY-ohHCsuyHP3","timestamp":1619576165783},{"file_id":"19UFtQM2mr6SDO8GSQDxGLJ464L5B-QwU","timestamp":1619534045577},{"file_id":"10vaXClH4loq4rIkkpilNL-UeNEW6vfki","timestamp":1619490492421},{"file_id":"1OztW1eXhAQ_s2lG0pEjaV-7NA3e3UYOz","timestamp":1619482371649},{"file_id":"1kMIUqNnehb_fhY1yoXLh4AjDU2DMkDY7","timestamp":1619458795840},{"file_id":"14ryUUZK9Yhh2hOiaxK-w_u0lXcdp_JQV","timestamp":1619437517257},{"file_id":"1Zi7sT3ghmEVtZVf1a1roOXx2JVCgdnUM","timestamp":1619393395584},{"file_id":"17i5OqT9DRuJUfdtc76fKFvWKrulkQpWt","timestamp":1619391477634},{"file_id":"1hRdS4JQNZXIWX4AlkGfKbAseTdIojODW","timestamp":1619354659273},{"file_id":"1RlUGdqFoIDkilGLqZbbwOqd17lyVTJix","timestamp":1619289569188},{"file_id":"1cqCNNB6uTz4f3HQvs7v9dv7ArhgcEOKP","timestamp":1619194894159},{"file_id":"19kUSTe8UZrDEJgnqJkkYb4l6sqGEmBJt","timestamp":1619143194668},{"file_id":"1XtzKq6FVvVYswe2AZAf5BAcfkzJN870L","timestamp":1619141038440},{"file_id":"1EENLnVg6xQROq4GTUKRV4QEeu6BrmE_H","timestamp":1619134099539},{"file_id":"1s6jDgqrfJRy9GphIqzqsCYtZmo9CRInp","timestamp":1619035265164},{"file_id":"11WnrPxi4YPnO0wdjf_qoHthEfmixNKKs","timestamp":1618971708351},{"file_id":"1RabStlzFcWyCCVNZ84ajsxJgeLWv2amx","timestamp":1618950079141},{"file_id":"1kB8OckncMUhBIq1SYB10CvjXWVdlL5Us","timestamp":1618883535404},{"file_id":"10a_jX0cMGcodqo5ADGB-yxpsNafvYzUK","timestamp":1618782897200},{"file_id":"1VdZh5IK1z2d554kK_ELid0uzSyK6rIVd","timestamp":1618761375529},{"file_id":"1eKIZU4VO-CYILY8w2Ed-5rhMJX6SeWoA","timestamp":1618604140442},{"file_id":"10Jt6fFCK3NoFNnW13j-a656c80AhJhWY","timestamp":1618588226418},{"file_id":"12inuCtnNbtTyyOo6vTwl3C6gcbrHwajO","timestamp":1618453842339},{"file_id":"1q_Aw9aTu31kMVkDAnWrPhKZ8amuPSUll","timestamp":1618437045729},{"file_id":"1VmIYwLt65CZ39_pr_3-PTNIoDzilId0y","timestamp":1618365377432},{"file_id":"1cMfAULhQCrIk5epnGh58j3V-RKqyWAmZ","timestamp":1618324936934},{"file_id":"13nahln97UFXvm-Rq9CKIB__U00zJQUke","timestamp":1618251754702},{"file_id":"1JrPcRwX06xIN5iLhc53_MOLzU9q_Q7wD","timestamp":1618239425159},{"file_id":"16DjDXv8wjzNm7GABNMCGiE-Q0gFAlNHz","timestamp":1618168241019},{"file_id":"1kHO_knaj7qVkVdCSNVIvQoeY6DF_cYdR","timestamp":1617993751339},{"file_id":"1QHobX-m5IRjJLkVWJJjCj40hrcqQ8OyH","timestamp":1617935376773},{"file_id":"1cb3ma0_VrDphPNOahdG-gjFue_Onm_KJ","timestamp":1617842245130},{"file_id":"1VgqN9pGxt_3GEpt94L_hC44hDPiX8BaG","timestamp":1617561162579},{"file_id":"1wwuz46gs9TJMe_X0Ajczfo1xEgTgodtE","timestamp":1617556674175},{"file_id":"1U_0NBJcKPj8yF7msVS7oY9-14eG9IYPi","timestamp":1617546488243},{"file_id":"1hJRp4EjySAt-ERhKp_CiPLBGUcmxpbPA","timestamp":1617486744126},{"file_id":"1GqTdefjWeirtsRj6gHpqAhWFoolKqe3W","timestamp":1617485996414},{"file_id":"1Sd8JjkR-In1AJBAjjDarHCAKzepOxVzj","timestamp":1617465789673},{"file_id":"1W-cZSZsCfEweDivU3HkyhyU9t-3hwa0z","timestamp":1617405389116},{"file_id":"1_D26rFVllcq1xhh0dX1hBlczO-d6YXx_","timestamp":1617371443724},{"file_id":"1z2Ww0PCeylln7ZK4XodLxDOek2d7bOMu","timestamp":1616528053670},{"file_id":"1nX3mAVAsb-Xl565vH67a02HTAgCV3Vzu","timestamp":1616443787004},{"file_id":"1Xq9vM-dqx7Wctvzts5fz5Pg5lcckCBDI","timestamp":1616348716102},{"file_id":"1CTnJO2z66rW7u-zR_u2Hv3dktyqSgVE6","timestamp":1616331754473},{"file_id":"19ZQhskKrqbwyA0HKAHTT4zOtA8t_1myC","timestamp":1616209127677},{"file_id":"11x9qRkxehf5g29ZKskl4pN1T6T6E-CR8","timestamp":1615761737194},{"file_id":"1hB3d8bG7Jq1nGplbCCGY__KEUJuV-TBW","timestamp":1615676396285},{"file_id":"1uoK3Pltbw-WNDfRcMGemiH937fXlZsSa","timestamp":1615642680915},{"file_id":"10W_R5Xkfy_8vFKxomzvXQNz5u2lNw9UP","timestamp":1615639517969},{"file_id":"1hSlggcgtPdkGkJAE9zf0fMmRfUzKxqGI","timestamp":1615586810273},{"file_id":"1Yoawoj1YBXmB3do6T2bsyjhx1J6pHVlr","timestamp":1615553454725},{"file_id":"1QJEkkw-cxEM_7ic3FyJ7g04iJ-EbWhc0","timestamp":1615492978965},{"file_id":"196dJg0hJaJdFpbKP0WtmSTT4l0CGHjBB","timestamp":1615468515981},{"file_id":"1-yD5RqR1XZgrGxe_A2I3zT_2MZCW-IxS","timestamp":1615382466413},{"file_id":"1oGxnwE3jmVpzK_YNIS1TBru47i6T8mst","timestamp":1615344069356},{"file_id":"1zcm6RamolfUIVK_k81emTtFhvtVlcXFq","timestamp":1614976411041},{"file_id":"1DxzkszmM_wyBfvHqoxDb0GtaDIe_-B9o","timestamp":1614863686524},{"file_id":"14N6g-UBjXTqq5wU7isX7a2QnxOjSFRFi","timestamp":1614821830088},{"file_id":"1XovovVS7VDuxV90eOUXKBX2eJqRg9sZg","timestamp":1614790944087},{"file_id":"1e0a_hmSyYaxY4DTIrU9GWpCCfD6ColyG","timestamp":1614788137439},{"file_id":"1fGEUn0em_7X_MxRYEUO8qHs9vgD_BIyt","timestamp":1614785814578},{"file_id":"18ebknsvUmBUUYNoY8BMhwQLntmjNetZl","timestamp":1614780961056},{"file_id":"1WCpDlvuNX8sdL-Px-AeQXW7aPXenMwvw","timestamp":1614739972262},{"file_id":"13CgLvZdjEThTC4GolJoe27qowlksdzMM","timestamp":1614736371178},{"file_id":"1v5hJcxnLu9Jp6GznPMbICSHoXBY0dTuk","timestamp":1614715929925},{"file_id":"1VObbZZVFCKqsxhRajNseU61z-l4v4Fe-","timestamp":1614698362693},{"file_id":"1ocgCuSLY-H7VW56P9mYIipMBooiT-s1a","timestamp":1614635040192},{"file_id":"1z8tOMcMbHqxRZh7aSIeoFWjyt8GSAA8V","timestamp":1614463770264},{"file_id":"1RrP1hWJKjv8YFewU2TH8aolDfXWbX2Jz","timestamp":1613963801960},{"file_id":"1-qVi63ouso_vyT4ZmX2g8xqpc0xnmjeI","timestamp":1612709266886},{"file_id":"1Hey09pebBoTEKnQYBeBcyScpV7bu_rsX","timestamp":1612621261606},{"file_id":"16SSBTpZilL-Mxrrk0KKWXu41O5Ucdp-d","timestamp":1612443365403},{"file_id":"1P-1Y5Np92nv6FKIKH35C4_mgZMvzyPDd","timestamp":1612375313837},{"file_id":"118xe7eUjSPCn78xHLJWvnh5Gl9_3I7YC","timestamp":1612045009497},{"file_id":"1g9Jsa8bb0pHRZTT0Fu_N1kkA_FmeuhX6","timestamp":1611541158571},{"file_id":"16r0yQPSXHg0--oLqgAX3hso-SMljjLUw","timestamp":1611064110660},{"file_id":"1W95qPs6rk7b3CnpRQJtB2j0nf7r2Vrr1","timestamp":1610991494041},{"file_id":"1PbI-uwmEz4O_36LpK7JQNsaGLwJd6PdG","timestamp":1610973520725},{"file_id":"1rea4qHKVUv4ORuKLb7psD_LIMeoygyEG","timestamp":1610806753641},{"file_id":"1klIFi4fzJtzorTHo3I0UTpaWjaGmaIqg","timestamp":1610546862456},{"file_id":"1NQ19ZGdAznInlNxfFDVMgqDH_wcK_FBW","timestamp":1610285214579},{"file_id":"1gJGA8VmkQkVBZOTcrYmONyRWlDDF84aA","timestamp":1605095786985},{"file_id":"1-TAH0zAvJi6DNq6_zmWARYv8_-Ve2gy-","timestamp":1605039238451},{"file_id":"1HPdlM7qiEuZFbN5k0czYX9HVBfCgFTMR","timestamp":1604979661803},{"file_id":"1JzYkMxLddh229gpmodNpXXrHw-DeOLFt","timestamp":1604958892271},{"file_id":"1Tuo6WFhu05a61VIgXVYnKA09-_7PBAOt","timestamp":1604840217201},{"file_id":"1w0UnybElZLZ8GsNSS4HcC_QuLZix2P9H","timestamp":1604680808883},{"file_id":"1tQYeuY9KovqFujro4FV5djnKFQyFIGl9","timestamp":1604628843716},{"file_id":"1vQ2DGQZo0_WmdHy-CYzlFOSvViQGTWfV","timestamp":1604583608331},{"file_id":"102stkqekZj6-ftAhf032Y5yGzE8M1nuC","timestamp":1604454687031},{"file_id":"1pkDDbBHQ29MpgFGPM2vDyTEy1zX8t7UR","timestamp":1604430698305},{"file_id":"16wT9fIZcBLIzRZfCAVw5PI3x9KekurMK","timestamp":1604404447186},{"file_id":"1-OnZxHPbtKj0rqEHZqvCyIk8LZ-f3Vi5","timestamp":1604342323128},{"file_id":"1Hu5tkzW9ThWILYzKf2iDdQYX2wUoolZq","timestamp":1604187637013},{"file_id":"1zTsvlzHt6vzfMk-6BJus8IYgU7VAVN_r","timestamp":1603995955650},{"file_id":"1qACnsdF2-lDcdCo47pocHjxDs3k61b-i","timestamp":1603969299058},{"file_id":"1Cti7kHENnOdCIDsurZizK_IcRIGyuXEz","timestamp":1603846072526},{"file_id":"1QKNgZOT3tAcLU1tTMTnDWntG5zXuhA87","timestamp":1603638144089},{"file_id":"1cAEi8rtrOdeCE-c4PWTOsj3YXOsydUX8","timestamp":1602679410094},{"file_id":"1jZpWI6SyQS9w8UOy-GP3MpY4hRWEWT8w","timestamp":1602293199774},{"file_id":"1GXRPd3VxMBqP1UuJpAtNjXKJFHyTVHzy","timestamp":1602174050629},{"file_id":"1Drdp_ZJum2Y0MsB27eod5_b2NdDSmgDS","timestamp":1602154767580},{"file_id":"1ZXDahYr8lpWDSjm2xZFaTXcTOqWZqs4o","timestamp":1602119445520},{"file_id":"1Tc0n8h9Xr5IJAxlpHI1wNWfiM0MO8rf9","timestamp":1602067015749},{"file_id":"1l_YakvNTpJ1-A9-w7YkHG9XKKuVwbBBf","timestamp":1601993379964},{"file_id":"1RpjgFhzsRjmTBvwVwqgGXCfyYesnI4g1","timestamp":1601944695311},{"file_id":"1ARTnq02jLRcSrgujwUMM-kQ1YS78UDbI","timestamp":1601931745369},{"file_id":"1G0_1LTsa9uPi4HHb7k8wFI-Z8ETXGKbF","timestamp":1601900940628},{"file_id":"1hyLxr-96gtnPFQb2iEq8K7XkG2DU_874","timestamp":1601831371812},{"file_id":"1DjmyWAtlFXaQZpOCMF-caT7DwE-QFJQ0","timestamp":1601814073779},{"file_id":"1LdmYJDCgy5wPRan1A9VPAHXodizUZ6L6","timestamp":1601746887744},{"file_id":"1fVflXw0xDqXAgiZNKi4sE9zfyO941UrI","timestamp":1601691243703},{"file_id":"1hfgP9rxzZxS3bEn-uCmjFOFbjrFBGNOx","timestamp":1601643966744},{"file_id":"1dL3ELoYDaEbDDNriwrS3fNaaGrMwywUk","timestamp":1601514607861},{"file_id":"1YXEqEkM3xFBkY4CEWxTc40ESCkSMGlBo","timestamp":1601387312460},{"file_id":"1-c_jHAr27QNxBbiHuNyZZgry8qEfbjMx","timestamp":1601258051613},{"file_id":"1_OCoQFx3SO32cona2FY0Z-FNLjoqQkeH","timestamp":1601244465374},{"file_id":"1M_UCqi_gjGaDy32LfVYMEZjWs7oRitmP","timestamp":1601237515918},{"file_id":"1QsURb5khYH4nQwYKRHpqc3GBE4zUGbsA","timestamp":1601227166265},{"file_id":"1cm_zpfriwxGGN7I3_s9NNM3gYGKnjBO8","timestamp":1601165856906},{"file_id":"1dN1Ilr4yng1mBF-pHej_yVsCGuJ1tmWB","timestamp":1601157468277},{"file_id":"1RD-TY4oGpHEEbBeIQk4p7nBbkWlNwDNM","timestamp":1601145098738},{"file_id":"1LEsGbsASiJreKM2gJbylZ30tW0VRafB0","timestamp":1601128900521},{"file_id":"1rMmhtdZdelTn1MKZ_a3SKFaSHe-ypNfN","timestamp":1601122081910},{"file_id":"1yyDeajoVXoEpyG1Ft4YGOKSB-6jKYSlS","timestamp":1601048649947},{"file_id":"1QU97I_DohIZpP9e3yYrr2lJ-BztxjeS6","timestamp":1600987514390},{"file_id":"1z6u96GWxwGdjBtDhUtC_44wkt2XjYm_y","timestamp":1600891043743},{"file_id":"1joYFkK1Lpfe9dVULaX47ojIGujKydEw6","timestamp":1600638218443},{"file_id":"1BF8ptInsFpVC5494SZCihae9uvGX4WAP","timestamp":1600613711468},{"file_id":"1Hylz7WDFEQMalf5VpK2wvK9xl_tM4fdB","timestamp":1600516524156},{"file_id":"1PPbHX4buc5D3TWi-vPZ6VlNj567YHcOv","timestamp":1600471695768},{"file_id":"1rpJk4luk8mQZS9AKF_d41jaT29IPzPEy","timestamp":1600448770632},{"file_id":"17kPvsW_xZ-04NimBxBiCc8lM6FrMz23Y","timestamp":1600292926695},{"file_id":"1jHrMmorUWbiaUY42Krk3_MxN_fnKK04T","timestamp":1600207122713},{"file_id":"1ChQr5__d60YFTzM8kD4yWkwhEErUf_xy","timestamp":1600184670155},{"file_id":"1wCEsDnZXrRZ3WJtmT_aBB2qPVRN8JBGM","timestamp":1600138391476},{"file_id":"1CBR6xdNSC2qfUIzggaxXKEFbJ_SXGRj5","timestamp":1600124185681},{"file_id":"1LYxTrdjEaQfB8qCF-uohuJ0kByMRYvXG","timestamp":1600096665516},{"file_id":"1m7ICOQDvmUuSOPru7hcOV541Y8MuKDVH","timestamp":1600095787871},{"file_id":"1DpIu_Ax3TE1aC-iKanSPuXS-cv4hn_Nu","timestamp":1600092072879},{"file_id":"1RzC0YMIZVOuVkJ1KDvFjqlOnKek1-2N_","timestamp":1600038329053},{"file_id":"1jtKjbOVf6w_y6sVGxSfD14sqfWyIRlMg","timestamp":1600035503059},{"file_id":"1OO9HHwTKx5lVfiAzvFPJjHvs3X2oOGeR","timestamp":1599963546835},{"file_id":"1ycMu8gnTIUIxz4cOWOtdChccasu2D8x2","timestamp":1599669086571},{"file_id":"1MdaXrC-A4ZQ9-binvkoel1-JwashjGZq","timestamp":1599346717475},{"file_id":"1pQew4T9b0_iVMlJ7vd6VKzAs_WwFE0Yp","timestamp":1599254776817},{"file_id":"16M5Z0PYDoZj6kQYxX_8dkLritUGsNQXq","timestamp":1599174088552},{"file_id":"1JsuFxu5nj3M6OZxmlNkJY-aVp-5BXTlL","timestamp":1599087972906},{"file_id":"15XY4AFxMXrLRmQ62a-ecRbxcm64Gf08S","timestamp":1599045600450},{"file_id":"1Ut66UGi2we06nP3qfEJNTw0KZqoMOjP1","timestamp":1598986198271},{"file_id":"1Go59Ph-mdgkudvui_eRoa1plOKBF1rwG","timestamp":1598896572294},{"file_id":"1wsqa5vM_VOW4WZ7G-7d6naMCnl9FtLES","timestamp":1598739520725},{"file_id":"1DFJ8FZSapWwEmOX7AXjKx1JEz98kygvO","timestamp":1598710496299},{"file_id":"1dFKkETgNivc1yZsU40yD0MBTT1fW_grI","timestamp":1598643465622},{"file_id":"1u9N_x5NHyie29rI9e6HHKFWLlxbx-5Nb","timestamp":1598536841286},{"file_id":"13ZJuh32U_M0PkXdFl2BFI-7WZ9TztUyo","timestamp":1598487369801},{"file_id":"1PbMb5gqa-iqj0wAuOrTF46jq2mc5r5yx","timestamp":1598478913808},{"file_id":"1ugunvneqPf0gJZp8MUnkdgVnPk7_-w8P","timestamp":1598456752920},{"file_id":"11L07iX75E6XYwrpX97AEpPUvThvUGc9r","timestamp":1598408921561},{"file_id":"1jhS44Y_zI3eEVfmURw_EwCdYU4HP6ODR","timestamp":1597976776130},{"file_id":"18xEVyK0W3zC8II51phofpk-ASp3596-m","timestamp":1597593975740},{"file_id":"1pKSAYQmrTsTn7RVnYTHr5Bm9rD2oI-TU","timestamp":1597532747179},{"file_id":"1METvgX6V53nzJzvVdRJC-c2FWHmSpR7R","timestamp":1595793170517},{"file_id":"https://github.com/tensorflow/docs/blob/master/site/en/tutorials/text/transformer.ipynb","timestamp":1595084806479}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"d6917dd6667b4c16961af7c649336954":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_4786adc5e0cb4bc5af1db61c58748d45","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_04da97cf24a14850aa9af1d66e1d9069","IPY_MODEL_f3b5e57f79474be1a3879e46186b3b16","IPY_MODEL_18fdc5f446a247189ad0104ca00fee81"]}},"4786adc5e0cb4bc5af1db61c58748d45":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"04da97cf24a14850aa9af1d66e1d9069":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_86794ad5589c46699792cbfe418a1603","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Predict loop: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_003b9198837b4dcbb0445e80ad36923c"}},"f3b5e57f79474be1a3879e46186b3b16":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_4693e02c21d64f66a9235eaac9e4fdf7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":475,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":475,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5ed51a461429446a8182866d81261418"}},"18fdc5f446a247189ad0104ca00fee81":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_476a31016895495e95bf282eccd1342f","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 475/475 [1:03:35&lt;00:00, 25.51sequences/s, Call=475, TotalLoss=0.00313]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4aaa61af724540b68ddbb56368ecc015"}},"86794ad5589c46699792cbfe418a1603":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"003b9198837b4dcbb0445e80ad36923c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4693e02c21d64f66a9235eaac9e4fdf7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"5ed51a461429446a8182866d81261418":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"476a31016895495e95bf282eccd1342f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4aaa61af724540b68ddbb56368ecc015":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0fefd65637224b83ae31f4a25020d9b9":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_a55623b7b2ed4432bb8e64f32f0073e8","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_fd4d6d89c76b4ae5b53e2a84a8540df6","IPY_MODEL_76089de79f784bcb8f31fed7ead393be","IPY_MODEL_ae521a51829149f386d0b8e6492817f2"]}},"a55623b7b2ed4432bb8e64f32f0073e8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fd4d6d89c76b4ae5b53e2a84a8540df6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_33a6f440ddd04eeb97e97f551e059c7e","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Predict loop: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_27500e262ae943888d6eec960ba705e9"}},"76089de79f784bcb8f31fed7ead393be":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_8abe47fa4cd647f5b8e18b1d553688c8","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":475,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":475,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4c2b55daad0e4245bc45b8e76e269571"}},"ae521a51829149f386d0b8e6492817f2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2a4b4fe25593420885d95be763b8c83b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 475/475 [00:40&lt;00:00, 23.07sequences/s, Call=475, TotalLoss=0.00313]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_bc5f196aefab4e0aa06438258730fa7d"}},"33a6f440ddd04eeb97e97f551e059c7e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"27500e262ae943888d6eec960ba705e9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8abe47fa4cd647f5b8e18b1d553688c8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"4c2b55daad0e4245bc45b8e76e269571":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2a4b4fe25593420885d95be763b8c83b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"bc5f196aefab4e0aa06438258730fa7d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"s_qNSzzyaCbD"},"source":["##### Copyright 2019 The TensorFlow Authors and Geoffrey Fox 2020\n"]},{"cell_type":"code","metadata":{"cellView":"form","id":"jmjh290raIky"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EV1qWhrmI1nF","executionInfo":{"status":"ok","timestamp":1642448885341,"user_tz":300,"elapsed":150,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"25057ed3-85fa-44eb-d766-515365f7a2bb"},"source":["# Avoids scroll-in-the-scroll in the entire Notebook\n","from IPython.display import Javascript\n","def resize_colab_cell():\n","  display(Javascript('google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})'))\n","get_ipython().events.register('pre_run_cell', resize_colab_cell)\n","\n","# Set Runname\n","# RunName = 'CovidA21-TFTTestA'  # Use to access old fit\n","RunName = 'CovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02'\n","RunComment = ''' \n","              This is the TFT model fit for group number 2 in the rurality based stratification. The data is from beginning until July 2021.\n","              Feature importance is included in this modeling.\n","              '''\n","\n","from psutil import virtual_memory\n","\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Your runtime has 27.3 gigabytes of available RAM\n","\n"]}]},{"cell_type":"markdown","source":["### VERY IMPORTANT LINE -> Set to 1 if TRAINING and 0 if VISUALIZING"],"metadata":{"id":"PPlUGy2MPRPe"}},{"cell_type":"code","source":["TFTMode = 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"g47lAq4IPRs_","executionInfo":{"status":"ok","timestamp":1642448887386,"user_tz":300,"elapsed":168,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"965cc467-8887-4482-b266-b8ffdefe57be"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"LWNb05uZ7V9I"},"source":["# Initial System Code"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":818},"id":"w4cXSlPV7hNG","executionInfo":{"status":"ok","timestamp":1642448899774,"user_tz":300,"elapsed":11542,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"89feccc9-14a4-460b-9ee3-65c5c4b54d5a"},"source":["startbold = \"\\033[1m\"\n","resetfonts = \"\\033[0m\"\n","startred = '\\033[31m'\n","\n","startpurple = '\\033[35m'\n","startyellowbkg = '\\033[43m'\n","\n","!lscpu\n","\n","gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n","else:\n","  print(gpu_info)\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Architecture:        x86_64\n","CPU op-mode(s):      32-bit, 64-bit\n","Byte Order:          Little Endian\n","CPU(s):              4\n","On-line CPU(s) list: 0-3\n","Thread(s) per core:  2\n","Core(s) per socket:  2\n","Socket(s):           1\n","NUMA node(s):        1\n","Vendor ID:           GenuineIntel\n","CPU family:          6\n","Model:               63\n","Model name:          Intel(R) Xeon(R) CPU @ 2.30GHz\n","Stepping:            0\n","CPU MHz:             2299.998\n","BogoMIPS:            4599.99\n","Hypervisor vendor:   KVM\n","Virtualization type: full\n","L1d cache:           32K\n","L1i cache:           32K\n","L2 cache:            256K\n","L3 cache:            46080K\n","NUMA node0 CPU(s):   0-3\n","Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt arat md_clear arch_capabilities\n","Mon Jan 17 19:48:08 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 495.46       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   43C    P0    27W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"J0Qjg6vuaHNt"},"source":["# Transformer model for science data based on original for language understanding"]},{"cell_type":"markdown","metadata":{"id":"AOpGoE2T-YXS"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://www.tensorflow.org/tutorials/text/transformer\">\n","    <img src=\"https://www.tensorflow.org/images/tf_logo_32px.png\" />\n","    View on TensorFlow.org</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/text/transformer.ipynb\">\n","    <img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />\n","    Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/docs/blob/master/site/en/tutorials/text/transformer.ipynb\">\n","    <img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />\n","    View source on GitHub</a>\n","  </td>\n","  <td>\n","    <a href=\"https://storage.googleapis.com/tensorflow_docs/docs/site/en/tutorials/text/transformer.ipynb\"><img src=\"https://www.tensorflow.org/images/download_logo_32px.png\" />Download notebook</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"HA3Lx2aY1xeg"},"source":["## Science Data Parameters and Sizes"]},{"cell_type":"markdown","metadata":{"id":"EMY9LokXwa9K"},"source":["-------\n","Here is structure of science time series module. We will need several arrays that will need to be flattened at times. Note Python defaults to row major i.e. final index describes contiguous positions in memory\n","\n","\n","At highest level data is labeled by Time and Location\n","\n","*   Ttot is total number of time steps\n","*   Tseq is length of each sequence in time steps\n","*   Num_Seq is number of sequences in time: Num_Seq = Ttot-Tseq + 1\n","*   Nloc is Number of locations. The locations could be a 1D list or have array structure such as an image.\n","*   Nsample is number of data samples Nloc * Num_Seq\n","\n","\n","\n","\n","Input data is at each location\n","*   Nprop time independent properties describing the location\n","*   Nforcing is number of time dependent forcing features INPUT at each time value\n","\n","\n","Output (predicted) data at each location and for each time sequence is\n","*   Npred predicted time dependent values defined at every time step\n","*   Recorded at Nforecast time values measured wrt final time value of sequence\n","*   ForecastDay is an array of length Nforecast defining how many days into future prediction is. Typically ForecastDay[0] = 1 and Nforecast is often 1\n","*   There is also a class of science problems that are more similar to classic Seq2Seq. Here Nforecast = Tseq and ForecastDay = [-Tseq+1 ... 0]\n","*   We also support Nwishful predictions of events in future such probability of an earthquake of magnitude 6 in next 3 years. These are defined by araays EventType and Timestart, TimeInterval of length Nwishful. EventType is user defined and Timestart, TimeInterval is measured in time steps\n","*   Any missing output values should be set to NaN and Loss function must ensure that these points are ignored in derivative calculation and value calculation\n","\n","We have an input module that supports either LSTM or Transformer (multi-head attention) models\n","\n","Example Problem AICov\n","\n","*   Ttot = 114\n","*   Tseq = 9\n","*   Num_Seq = 106\n","*   Nloc = 110\n","\n","\n","*   Nprop = 35\n","*   Nforcing = 5 including infections, fatalities, plus 3 temporal position variables (last 3 not in current version)\n"," \n"," \n","*   Npred = 2 (predicted infections and fatalities). Could be 5 if predicted temporal position of output)\n","*   Nforecast= 15\n","*   ForecastDay = [1, 2, .......14, 15]\n","*   Nwishful = 0\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"_UlOJMJ31SoG"},"source":["## Science Data Arrays"]},{"cell_type":"markdown","metadata":{"id":"BdszPs9on5gk"},"source":["Typical Arrays\n","\n","\n","[ time, Location ] as Pandas array with label [name of time-dependent variable] as an array or just name of Pandas array\n","\n","time labels rows indexed by datetime or the difference datetime - start\n","\n","Non windowed data is stored with propert name as row index and location as column index\n","[ static property, Location]\n","\n","Covid Input is\n","[Sequence number 0..Num_Seq-1 ] [ Location 0..Nloc-1 ] [position in time sequence Tseq]  [ Input Features]\n","\n","Covid Output is \n","[Sequence number Num_Seq ] [ Location Nloc ]  [ Output Features] \n","\n","Output Features are [ ipred = 0 ..Npred-1 ] [ iforecast = 0 ..Nforecast-1 ]\n","\n","Input Features are static fields followed by if present by dynamic system fields (cos-theta sin-theta linear) chosen followed by cases, deaths. In fact this is user chosen as they set static and dynamic system properties to use"]},{"cell_type":"markdown","metadata":{"id":"8-iizX9OKmI3"},"source":["We will have various numpy and pandas arrays where we designate label\n","\n","[Ttot] is all time values \n","\n","[Num_Seq]  is all sequences of window size ***Tseq***\n","\n","We can select time values or sequences [Ttot-reason] [Num_Seq-reason] for a given \"reason\"\n","\n","[Num_Seq][Tseq] is all time values in all sequences\n","\n","[Nloc] is all locations while [Nloc-reason] is subset of locations for given \"reason\"\n","\n","[Model1] is initial embedding of each data point\n","\n","[Model1+TrPosEnc] is initial embedding of each data point with Transformer style positional encoding\n","\n","[Nforcing] is time dependent input parameters and [Nprop] static properties while [ExPosEnc] are explicit positional (temporal) encoding.\n","\n","[Nforcing+ExPosEnc+Nprop] are all possible inputs\n","\n","[Npred] is predicted values with [Npred+ExPosEnc] as predictions plus encodings with actually used [Predvals] = [Npred+ExPosEnc-Selout] \n","\n","[Predtimes] = [Forecast time range] are times forecasted with \"time range\" separately defined\n","\n"]},{"cell_type":"code","source":["from numpy.core.numeric import True_\n","AgeDist = (True, ['Age Distribution.csv'])\n","AirPollution = (True, ['Air Pollution.csv'])\n","Comorbidites = (True, ['Comorbidities.csv'])\n","Demographics = (False , ['Demographics.csv'])\n","HealthDisp = (True, ['Health Disparities.csv'])\n","HospitalBed = (False, ['Hospital Beds.csv'])\n","Mobility = (True, ['Mobility.csv'])\n","ResidentialDense = (True , ['Residential Density.csv'])\n","Voting = (False, ['2020votes.csv', 'Alaskavoting2016.csv'])\n","DiseaseSpread = (True , ['Disease Spread.csv'])\n","SocialDist = (True, ['Social Distancing.csv'])\n","Testing = (True, ['Testing.csv'])\n","Transmission = (True, ['Transmissible Cases.csv'])\n","VaccinationOne = (True, ['VaccinationOneDose.csv'])\n","VaccinationFull = (True, ['Vaccination.csv'])\n","\n","Features = [AgeDist, AirPollution, Comorbidites, Demographics, HealthDisp,\n","            HospitalBed, Mobility, ResidentialDense, Voting, DiseaseSpread,\n","            SocialDist, Testing, Transmission, VaccinationOne, VaccinationFull]\n","\n","\n","FeatureFiles = [i[1] if i[0] else None for i in Features]\n","FeatureFiles = list(filter(None.__ne__, FeatureFiles))\n","FeatureFiles = [i[0] if i[0] else None for i in FeatureFiles]\n","\n","UseVoting = True if '2020votes.csv' in FeatureFiles else False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"vQND--lq9dCp","executionInfo":{"status":"ok","timestamp":1642448899774,"user_tz":300,"elapsed":6,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"030138c9-6c46-49a7-f460-09dce8b8a52c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["FeatLen = len(FeatureFiles)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"xLhiMqeceFcZ","executionInfo":{"status":"ok","timestamp":1642448899775,"user_tz":300,"elapsed":6,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"f4543a53-fe84-4474-a29f-82f25fe900dd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":645},"id":"JjJJyJTZYebt","outputId":"50302874-464f-4067-ba1e-5518adb49dab","executionInfo":{"status":"ok","timestamp":1642448910676,"user_tz":300,"elapsed":10296,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}}},"source":["import tensorflow_datasets as tfds\n","import tensorflow as tf\n","from tqdm.keras import TqdmCallback\n","from tqdm import tnrange, notebook, tqdm\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM\n","from tensorflow.keras.layers import GRU\n","from tensorflow.keras.layers import Dense\n","\n","import os\n","import gc\n","from csv import reader\n","from csv import writer\n","import sys\n","import random\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from textwrap import wrap\n","import pandas as pd\n","import io as io\n","import string\n","\n","import time\n","import datetime\n","from datetime import timedelta,date,datetime\n","\n","!pip install cloudmesh-common -U\n","from cloudmesh.common.StopWatch import StopWatch\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Collecting cloudmesh-common\n","  Downloading cloudmesh_common-4.3.80-py2.py3-none-any.whl (81 kB)\n","\u001b[K     |████████████████████████████████| 81 kB 4.0 MB/s \n","\u001b[?25hCollecting pyfiglet\n","  Downloading pyfiglet-0.8.post1-py2.py3-none-any.whl (865 kB)\n","\u001b[K     |████████████████████████████████| 865 kB 29.8 MB/s \n","\u001b[?25hCollecting python-hostlist\n","  Downloading python-hostlist-1.21.tar.gz (35 kB)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (2018.9)\n","Collecting simplejson\n","  Downloading simplejson-3.17.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (130 kB)\n","\u001b[K     |████████████████████████████████| 130 kB 52.7 MB/s \n","\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (5.4.8)\n","Requirement already satisfied: humanize in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (0.5.1)\n","Collecting colorama\n","  Downloading colorama-0.4.4-py2.py3-none-any.whl (16 kB)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (2.8.2)\n","Collecting oyaml\n","  Downloading oyaml-1.0-py2.py3-none-any.whl (3.0 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (2.23.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (4.62.3)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from cloudmesh-common) (0.8.9)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from oyaml->cloudmesh-common) (3.13)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil->cloudmesh-common) (1.15.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->cloudmesh-common) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->cloudmesh-common) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->cloudmesh-common) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->cloudmesh-common) (3.0.4)\n","Building wheels for collected packages: python-hostlist\n","  Building wheel for python-hostlist (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for python-hostlist: filename=python_hostlist-1.21-py3-none-any.whl size=38943 sha256=62b86ed9d11857314935a154ed135e7d963dbae65e9b59f4e38d6a6cbdf16a3e\n","  Stored in directory: /root/.cache/pip/wheels/e8/31/d6/c2ea1dd468ff9d67b94bf63a4fb4590337ac6af531b1d04aae\n","Successfully built python-hostlist\n","Installing collected packages: simplejson, python-hostlist, pyfiglet, oyaml, colorama, cloudmesh-common\n","Successfully installed cloudmesh-common-4.3.80 colorama-0.4.4 oyaml-1.0 pyfiglet-0.8.post1 python-hostlist-1.21 simplejson-3.17.6\n"]}]},{"cell_type":"markdown","metadata":{"id":"NdH4W3OJTLyj"},"source":["### Define Basic Control parameters"]},{"cell_type":"code","metadata":{"id":"mZAL5yNsC_UK","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1642448910676,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"f32624e6-e052-445d-f2d8-2d6bbaf7a845"},"source":["def wraptotext(textinput,size=None):\n","  if size is None:\n","    size = 120\n","  textlist = wrap(textinput,size)\n","  textresult = textlist[0]\n","  for itext in range(1,len(textlist)):\n","    textresult += '\\n'+textlist[itext]\n","  return textresult\n","\n","def timenow():\n","  now = datetime.now()\n","  return now.strftime(\"%m/%d/%Y, %H:%M:%S\") + \" UTC\"\n","\n","def float32fromstrwithNaN(instr):\n","  if instr == 'NaN':\n","    return NaN\n","  return np.float32(instr)\n","\n","def printexit(exitmessage):\n","  print(exitmessage)\n","  sys.exit()\n","\n","def strrnd(value):\n","  return str(round(value,4))\n","\n","NaN = np.float32(\"NaN\")\n","\n","ReadJuly2020Covid = False\n","ReadAugust2020Covid = False\n","ReadJan2021Covid = False\n","ReadApril2021Covid = False\n","ScaleProperties = False\n","ConvertDynamicPredictedQuantity = False\n","ConvertDynamicProperties = True\n","GenerateFutures = False\n","GenerateSequences = False\n","PredictionsfromInputs = False\n","RereadMay2020 = False\n","UseOLDCovariates = False\n","Dropearlydata = 0\n","NIHCovariates = False \n","UseFutures = True\n","Usedaystart = False \n","PopulationNorm = False\n","SymbolicWindows = False\n","Hydrology = False\n","Earthquake = False\n","EarthquakeImagePlots = False\n","AddSpecialstoSummedplots = False\n","UseRealDatesonplots = False\n","Dumpoutkeyplotsaspics = False\n","OutputNetworkPictures = False\n","CDSpecial = False\n","NumpredbasicperTime = 2\n","NumpredFuturedperTime = 2\n","NumTimeSeriesCalculated = 0\n","Dailyunit = 1\n","TimeIntervalUnitName = 'Day'\n","InitialDate = datetime(2000,1,1)\n","NumberofTimeunits = 0\n","Num_Time =0\n","FinalDate = datetime(2000,1,1)\n","GlobalTrainingLoss = 0.0\n","GlobalValidationLoss = 0.0\n","\n","# Type of Testing\n","LocationBasedValidation = False\n","LocationValidationFraction = 0.0\n","LocationTrainingfraction = 1.0\n","RestartLocationBasedValidation = False\n","\n","global SeparateValandTrainingPlots\n","SeparateValandTrainingPlots = True\n","Plotsplitsize = -1 # if > 1 split time in plots\n","\n","GarbageCollect = True\n","GarbageCollectionLimit = 0\n","\n","current_time = timenow()\n","print(startbold + startred + current_time + ' ' +RunName + ' ' + RunComment + resetfonts)\n","\n","SubName = RunName[0:6]\n","\n","\n","\n","if SubName == 'BEST14' or SubName == 'BEST15' or SubName == 'BEST16':\n","  UseOLDCovariates = False\n","  ReadAugust2020Covid = True\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  NIHCovariates = True\n","  ConvertDynamicProperties = True\n","  Dropearlydata = 37\n","  CDSpecial = True\n","\n","if SubName == 'CovidA':\n","  UseOLDCovariates = False\n","  if 'Extended' in RunName[6:]:\n","    ReadDecember2021 = True\n","    ReadApril2021Covid = False\n","  else:\n","    ReadApril2021Covid = True\n","    ReadDecember2021 = False\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  UseFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  NIHCovariates = True\n","  ConvertDynamicProperties = True\n","  CDSpecial = True\n","\n","if SubName == 'C2021A' or SubName == 'C2021B':\n","  UseOLDCovariates = False\n","  ReadJan2021Covid = True\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  NIHCovariates = True\n","  ConvertDynamicProperties = True\n","  Dropearlydata = 0\n","  CDSpecial = True\n","\n","if SubName == 'Hydrol':\n","  Hydrology = True\n","\n","if SubName == 'EARTHQ':\n","  Earthquake = True\n","\n","if RunName == 'BEST10' or RunName == 'BEST13-10D' or RunName == 'BEST12-10' or RunName == 'BEST12-Test' or RunName == 'BEST13' or RunName == 'BEST13-10' or RunName == 'BEST13-10A' or RunName == 'BEST13-10C':\n","  UseOLDCovariates = False\n","  ReadAugust2020Covid = True\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  CDSpecial = True\n","\n","if RunName == 'BEST11' or RunName == 'BEST11A':\n","  UseOLDCovariates = True\n","  ReadAugust2020Covid = True\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  CDSpecial = True\n","\n","if RunName == 'BEST12':\n","  UseOLDCovariates = True\n","  RereadMay2020 = True\n","  ReadAugust2020Covid = False\n","  ScaleProperties = True\n","  ConvertDynamicPredictedQuantity = True\n","  GenerateFutures = True\n","  GenerateSequences = True\n","  PredictionsfromInputs = True\n","  CDSpecial = True\n","\n","if RunName == 'BEST8' or RunName == 'BEST8A' or RunName == 'BEST12-LSTM-8':\n","  ReadJuly2020Covid = True\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1m\u001b[31m01/17/2022, 19:48:29 UTC CovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02  \n","              This is the TFT model fit for group number 2 in the rurality based stratification. The data is from beginning until July 2021.\n","              Feature importance is included in this modeling.\n","              \u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"DefDaYecDhIM"},"source":["## Define input structure\n","\n","Read in data and set it up for Tensorflow with training and validation\n"]},{"cell_type":"markdown","metadata":{"id":"9kj1DvDTneDZ"},"source":["Set train_examples, val_examples as science training and validatioon set.\n","\n","The shuffling of Science Data needs some care. We have ***Tseq*** * size of {[Num_Seq][Nloc]} locations in each sample. In simplease case the last is just a decomposition over location; not over time. Let's Nloc-sel be number of locations per sample. It will be helpful if Nloc-sel is divisable by 2. \n","\n","Perhaps Nloc-sel = 2 6 or 10 is reasonable.\n","\n","Then you shuffle locations every epoch and divide them into groups of size Nloc-sel with 50% overlap so you get locations\n","\n","0 1 2 3 4 5; \n","\n","3 4 5 6 7 8; \n","\n","6 7 8 9 10 11 etc.\n","\n","Every locations appears twice in an epoch (for each time value). You need to randomly add locations at end of sequence so it is divisiuble by Nloc-sel e.g add 4 random positions to the end if Nloc=110 and Nloc-sel = 6. Note last group of 6 has members 112 113 114 0 1 2\n","\n","After spatial structure set up, randomly shuffle in Num_Seq where there is an argument to do all locations for a partcular time value together.\n","\n","For validation, it is probably best to select validation location before chopping them into groups of size Nloc-sel\n","\n","How one groups locations for inference is not clear. One idea is to take trained network and use it to find for each location which other locations have the most attention with it. Use those locations in  prediction"]},{"cell_type":"markdown","metadata":{"id":"YKm_MgRMdcTT"},"source":["More general input. \n","NaN allowed value\n","\n","* Number time values\n","* Number locations\n","* Number driving values\n","* Number predicted values\n","\n","For COVID driving same as predicted\n","\n","* a) Clean up >=0 daily\n","* b) Normalize\n","* c) Add Futures\n","* d) Add time/location encoding\n"]},{"cell_type":"markdown","metadata":{"id":"9KJIxYoMDZOu"},"source":["### Setup File Systems"]},{"cell_type":"code","metadata":{"id":"ShbYhXJbKCDT","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1642448911132,"user_tz":300,"elapsed":460,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"94213605-d73b-4d97-953a-9ed85d84bf64"},"source":["# read in science data \n","COLABROOTDIR=\"/content/drive/MyDrive/independent_study2\"\n","os.environ[\"COLABROOTDIR\"] = COLABROOTDIR\n","\n","if Hydrology:\n","  APPLDIR=os.path.join(COLABROOTDIR, \"Hydrology\")\n","elif Earthquake:\n","  APPLDIR=os.path.join(COLABROOTDIR, \"EarthquakeDec2020\")\n","else:\n","  APPLDIR=os.path.join(COLABROOTDIR, \"COVIDJuly2020\")\n","\n","# Set up Checkpoints\n","CHECKPOINTDIR = APPLDIR + \"/checkpoints/\" + RunName + \"dir/\"\n","try: \n","    if not os.path.exists(CHECKPOINTDIR):\n","      os.mkdir(CHECKPOINTDIR) \n","except OSError as error: \n","    print(error)\n","print('Checkpoint set up in directory ' + CHECKPOINTDIR)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Checkpoint set up in directory /content/drive/MyDrive/independent_study2/COVIDJuly2020/checkpoints/CovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02dir/\n"]}]},{"cell_type":"markdown","metadata":{"id":"1d_JaiVAV5yk"},"source":["### Read April 2021 Covid Data"]},{"cell_type":"code","metadata":{"id":"uiClFXFWWETE","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1642448914191,"user_tz":300,"elapsed":3062,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"ef640dfb-f162-4586-b410-6ff38d914153"},"source":["if ReadDecember2021:\n","  Dropearlydata = 0 # 3 more than needed by covariates so as to get \"round number of days\"\n","  NIHCovariates = True\n","  UseOLDCovariates = False\n","  LengthFutures = 0\n","\n","  InitialDate = datetime(2020,2,29) + timedelta(days=Dropearlydata)\n","  FinalDate = datetime(2021,6,30)\n","  NumberofTimeunits = (FinalDate-InitialDate).days + 1\n","  print(\"Total number of days December 2021 Dataset \" + str(NumberofTimeunits) + ' dropping at start ' + str(Dropearlydata))\n","\n","  DATASETDIR = APPLDIR + '/CovidDecember12-2021'\n","\n","  CasesFile = DATASETDIR + '/US_daily_cumulative_cases_Dec12.csv'\n","  DeathsFile = DATASETDIR + '/US_daily_cumulative_deaths_Dec12.csv'\n","  LocationdataFile = DATASETDIR + '/Population.csv'\n","  LocationruralityFile = DATASETDIR + '/Rurality.csv'\n","  VotingdataFile = DATASETDIR + '/2020votes.csv'\n","  AlaskaVotingdataFile = DATASETDIR + '/Alaskavoting2016.csv'\n","\n","  Nloc = 3142\n","  NFIPS = 3142\n","\n","# Set up location information\n","  Num_Time = NumberofTimeunits\n","  Locationfips = np.empty(NFIPS, dtype=int) # integer version of FIPs\n","  Locationcolumns = [] # String version of FIPS\n","  FIPSintegerlookup = {}\n","  FIPSstringlookup = {}\n","  BasicInputTimeSeries = np.empty([Num_Time,Nloc,2],dtype = np.float32)\n","\n","# Read in  cases Data into BasicInputTimeSeries\n","  with open(CasesFile, 'r') as read_obj:\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'FIPS':\n","        printexit('EXIT: Wrong file type Cases ' + Ftype)\n","\n","      iloc = 0    \n","      for nextrow in csv_reader:\n","        if (len(nextrow)< NumberofTimeunits + 1 + Dropearlydata):\n","          printexit('EXIT: Incorrect row length Cases ' + str(iloc) + ' ' +str(len(nextrow)))\n","        # skip first entry\n","        localfips = nextrow[0]\n","        Locationcolumns.append(localfips)\n","        Locationfips[iloc] = int(localfips)\n","        FIPSintegerlookup[int(localfips)] = iloc\n","        FIPSstringlookup[localfips] = iloc\n","        for itime in range(0, NumberofTimeunits):\n","          BasicInputTimeSeries[itime,iloc,0] = nextrow[itime + 1 + Dropearlydata]\n","          if Dropearlydata > 0:\n","            floatlast = np.float(nextrow[Dropearlydata])\n","            BasicInputTimeSeries[itime,iloc,0] = BasicInputTimeSeries[itime,iloc,0] - floatlast\n","        iloc += 1\n","# End Reading in cases data\n","\n","  if iloc != Nloc:\n","          printexit('EXIT Inconsistent location lengths Cases ' +str(iloc) + ' ' + str(Nloc))\n","  print('Read Cases data locations ' + str(Nloc) + ' Time Steps ' + str(Num_Time))\n","\n","# Read in deaths Data into BasicInputTimeSeries\n","  with open(DeathsFile, 'r') as read_obj:\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'FIPS':\n","        printexit('EXIT: Wrong file type Deaths ' + Ftype)\n","\n","      iloc = 0\n","      for nextrow in csv_reader:\n","        if (len(nextrow)<NumberofTimeunits + 1 + Dropearlydata):\n","          printexit('EXIT: Incorrect row length Deaths ' + str(iloc) + ' ' +str(len(nextrow)))\n","        localfips = nextrow[0]\n","        if (Locationfips[iloc] != int(localfips)):\n","          printexit('EXIT: Unexpected FIPS Deaths ' + localfips + ' ' +str(Locationfips[iloc]))\n","        for itime in range(0, NumberofTimeunits):\n","          BasicInputTimeSeries[itime,iloc,1] = nextrow[itime + 1 + Dropearlydata]\n","          if Dropearlydata > 0:\n","            floatlast = np.float(nextrow[Dropearlydata])\n","            BasicInputTimeSeries[itime,iloc,1] = BasicInputTimeSeries[itime,iloc,1] - floatlast\n","        iloc += 1\n","# End Reading in deaths data\n","\n","  if iloc != Nloc:\n","    printexit('EXIT Inconsistent location lengths ' +str(iloc) + ' ' + str(Nloc))\n","  print('Read Deaths data locations ' + str(Nloc) + ' Time Steps ' + str(Num_Time))\n","\n","  Locationname = ['Empty'] * NFIPS\n","  Locationstate = ['Empty'] * NFIPS\n","  Locationpopulation = np.empty(NFIPS, dtype=int)\n","  with open(LocationdataFile, 'r', encoding='latin1') as read_obj:\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'FIPS':\n","        printexit('EXIT: Wrong file type Prop Data ' + Ftype)\n","\n","      iloc = 0\n","      for nextrow in csv_reader:\n","        localfips = int(nextrow[0])\n","        if localfips in FIPSintegerlookup.keys():\n","          jloc = FIPSintegerlookup[localfips]\n","          Locationname[jloc] = nextrow[4]\n","          Locationstate[jloc] = nextrow[3]\n","          Locationpopulation[jloc] = int(nextrow[2])\n","          iloc += 1 # just counting lines  \n","        else:\n","          printexit('EXIT Inconsistent FIPS ' +str(iloc) + ' ' + str(localfips))  \n","# END setting NFIPS location properties\n","\n","  DemVoting = np.full(NFIPS, -1.0, dtype=np.float32)\n","  RepVoting = np.full(NFIPS, -1.0, dtype=np.float32)\n","  with open(VotingdataFile, 'r', encoding='latin1') as read_obj:\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'state_name':\n","        printexit('EXIT: Wrong file type Voting Data ' + Ftype)\n","\n","      iloc = 0\n","      for nextrow in csv_reader:\n","        localfips = int(nextrow[1])\n","        if localfips > 2900 and localfips < 2941: # Alaska not useful\n","          continue\n","        if localfips in FIPSintegerlookup.keys():\n","          jloc = FIPSintegerlookup[localfips]\n","          if DemVoting[jloc] >= 0.0:\n","             printexit('EXIT Double Setting of FIPS ' +str(iloc) + ' ' + str(localfips))\n","          DemVoting[jloc] = nextrow[8]\n","          RepVoting[jloc] = nextrow[7]\n","          iloc += 1 # just counting lines  \n","        else:\n","          printexit('EXIT Inconsistent FIPS ' +str(iloc) + ' ' + str(localfips))  \n","\n","  with open(AlaskaVotingdataFile, 'r',encoding='utf-8-sig') as read_obj: # remove ufeff\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'SpecialAlaska':\n","        printexit('EXIT: Wrong file type Alaska Voting Data ' + Ftype)\n","\n","      iloc = 0\n","      for nextrow in csv_reader:\n","        localfips = int(nextrow[1])\n","        if localfips in FIPSintegerlookup.keys():\n","          jloc = FIPSintegerlookup[localfips]\n","          if DemVoting[jloc] >= 0.0:\n","             printexit('EXIT Double Setting of FIPS ' +str(iloc) + ' ' + str(localfips))\n","          DemVoting[jloc] = float(nextrow[2]) * 42.77/36.5\n","          RepVoting[jloc] = float(nextrow[3]) * 52.83/51.3\n","          iloc += 1 # just counting lines  \n","        else:\n","          printexit('EXIT Inconsistent FIPS ' +str(iloc) + ' ' + str(localfips))\n","\n","  for iloc in range(0,NFIPS):\n","    if DemVoting[iloc] >= 0.0:\n","      continue\n","    print(str(iloc) + ' Missing Votes ' + str(Locationfips[iloc]) + ' ' + Locationname[iloc] + ' ' + Locationstate[iloc] + ' pop ' + str( Locationpopulation[iloc]))\n","    DemVoting[iloc] = 0.5\n","    RepVoting[iloc] = 0.5\n","\n","# Set Static Properties of the Nloc studied locations\n","# Order is Static, Dynamic, Cases, Deaths\n","# Voting added as 13th covariate\n","  NpropperTimeDynamic = FeatLen\n","  NpropperTimeStatic = 0\n","\n","  NpropperTime = NpropperTimeStatic + NpropperTimeDynamic + 2   \n","  InputPropertyNames = [] * NpropperTime\n","  Property_is_Intensive = np.full(NpropperTime, True, dtype = np.bool)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Total number of days December 2021 Dataset 488 dropping at start 0\n","Read Cases data locations 3142 Time Steps 488\n","Read Deaths data locations 3142 Time Steps 488\n","548 Missing Votes 15005 Kalawao County Hawaii pop 86\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bqwp8FVQC8FD"},"source":["### Cut by Median Rurality Score"]},{"cell_type":"code","metadata":{"id":"XzcpwRRXLbc7","colab":{"base_uri":"https://localhost:8080/","height":1423},"executionInfo":{"status":"ok","timestamp":1642448914191,"user_tz":300,"elapsed":4,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"8fed8bb6-85e5-4bda-b76f-96d8b565c4ff"},"source":["RuralityFile = DATASETDIR + '/' + 'Rurality.csv'\n","RuralityRange = [4.501,5]\n","RuralityCut=True\n","\n","Locationrurality = np.empty(NFIPS)\n","Locationmad = np.empty(NFIPS)\n","\n","skips = []\n","\n","with open(RuralityFile, 'r') as read_obj:\n","      csv_reader = reader(read_obj)\n","      header = next(csv_reader)\n","      Ftype = header[0]\n","      if Ftype != 'FIPS':\n","        printexit('EXIT: Wrong file type Prop Data ' + Ftype)\n","      \n","      iloc = 0\n","      for row in csv_reader:\n","        localfips = int(row[0])\n","        if localfips in FIPSintegerlookup.keys():\n","          jloc = FIPSintegerlookup[localfips]\n","          Locationrurality[jloc] = row[1]\n","          Locationmad[jloc] = row[2]\n","          iloc +=1\n","        else:\n","          print('FIPS not in lookup table ' +str(iloc) + ' ' + str(localfips))  \n","          skips.append(iloc)\n","\n","\n","Locationrurality[81] = None\n","Locationrurality[2412] = None \n","Locationmad[81] = None \n","Locationmad[2412] = None"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["FIPS not in lookup table 92 2270\n","FIPS not in lookup table 2416 46113\n","FIPS not in lookup table 2914 51515\n","FIPS not in lookup table 3140 72001\n","FIPS not in lookup table 3140 72003\n","FIPS not in lookup table 3140 72005\n","FIPS not in lookup table 3140 72007\n","FIPS not in lookup table 3140 72009\n","FIPS not in lookup table 3140 72011\n","FIPS not in lookup table 3140 72013\n","FIPS not in lookup table 3140 72015\n","FIPS not in lookup table 3140 72017\n","FIPS not in lookup table 3140 72019\n","FIPS not in lookup table 3140 72021\n","FIPS not in lookup table 3140 72023\n","FIPS not in lookup table 3140 72025\n","FIPS not in lookup table 3140 72027\n","FIPS not in lookup table 3140 72029\n","FIPS not in lookup table 3140 72031\n","FIPS not in lookup table 3140 72033\n","FIPS not in lookup table 3140 72035\n","FIPS not in lookup table 3140 72037\n","FIPS not in lookup table 3140 72039\n","FIPS not in lookup table 3140 72041\n","FIPS not in lookup table 3140 72043\n","FIPS not in lookup table 3140 72045\n","FIPS not in lookup table 3140 72047\n","FIPS not in lookup table 3140 72049\n","FIPS not in lookup table 3140 72051\n","FIPS not in lookup table 3140 72053\n","FIPS not in lookup table 3140 72054\n","FIPS not in lookup table 3140 72055\n","FIPS not in lookup table 3140 72057\n","FIPS not in lookup table 3140 72059\n","FIPS not in lookup table 3140 72061\n","FIPS not in lookup table 3140 72063\n","FIPS not in lookup table 3140 72065\n","FIPS not in lookup table 3140 72067\n","FIPS not in lookup table 3140 72069\n","FIPS not in lookup table 3140 72071\n","FIPS not in lookup table 3140 72073\n","FIPS not in lookup table 3140 72075\n","FIPS not in lookup table 3140 72077\n","FIPS not in lookup table 3140 72079\n","FIPS not in lookup table 3140 72081\n","FIPS not in lookup table 3140 72083\n","FIPS not in lookup table 3140 72085\n","FIPS not in lookup table 3140 72087\n","FIPS not in lookup table 3140 72089\n","FIPS not in lookup table 3140 72091\n","FIPS not in lookup table 3140 72093\n","FIPS not in lookup table 3140 72095\n","FIPS not in lookup table 3140 72097\n","FIPS not in lookup table 3140 72099\n","FIPS not in lookup table 3140 72101\n","FIPS not in lookup table 3140 72103\n","FIPS not in lookup table 3140 72105\n","FIPS not in lookup table 3140 72107\n","FIPS not in lookup table 3140 72109\n","FIPS not in lookup table 3140 72111\n","FIPS not in lookup table 3140 72113\n","FIPS not in lookup table 3140 72115\n","FIPS not in lookup table 3140 72117\n","FIPS not in lookup table 3140 72119\n","FIPS not in lookup table 3140 72121\n","FIPS not in lookup table 3140 72123\n","FIPS not in lookup table 3140 72125\n","FIPS not in lookup table 3140 72127\n","FIPS not in lookup table 3140 72129\n","FIPS not in lookup table 3140 72131\n","FIPS not in lookup table 3140 72133\n","FIPS not in lookup table 3140 72135\n","FIPS not in lookup table 3140 72137\n","FIPS not in lookup table 3140 72139\n","FIPS not in lookup table 3140 72141\n","FIPS not in lookup table 3140 72143\n","FIPS not in lookup table 3140 72145\n","FIPS not in lookup table 3140 72147\n","FIPS not in lookup table 3140 72149\n","FIPS not in lookup table 3140 72151\n","FIPS not in lookup table 3140 72153\n"]}]},{"cell_type":"code","metadata":{"id":"69-GjMTEK9_w","colab":{"base_uri":"https://localhost:8080/","height":677},"executionInfo":{"status":"ok","timestamp":1642448936081,"user_tz":300,"elapsed":21893,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"0e7767d0-81d3-494c-b787-4cd54d44ffae"},"source":["if NIHCovariates:\n","  if ReadJan2021Covid:\n","    Propfilenames = [\"Age Distribution.csv\", \"Air Pollution.csv\", \"Comorbidities.csv\",\"Demographics.csv\", \"Disease Spread.csv\", \n","                     \"Health Disparities.csv\", \"Hospital Beds.csv\", \"Intervention Testing.csv\", \"Mobility.csv\", \n","                     \"Residential Density.csv\", \"Social Distancing.csv\",  \"Transmissible Cases.csv\"]\n","    Propnames = [\"Age Distribution\", \"Air Pollution\", \"Co-morbidities\",  \"Demographics\", \"Disease Spread\", \n","                 \"Health Disparities\", \"Hospital Beds\", \"Intervention Testing\", \"Mobility\", \"Residential Density\", \n","                 \"Social Distancing\", \"Transmissible Cases\"]\n","  \n","  elif ReadApril2021Covid:\n","    Propfilenames = [\"Age Distribution.csv\", \"Air Pollution.csv\", \"Comorbidities.csv\",\"Demographics.csv\", \"Disease Spread.csv\", \n","                     \"Health Disparities.csv\", \"Hospital Beds.csv\", \"Mobility.csv\", \n","                     \"Residential Density.csv\", \"Social Distancing.csv\", \"Testing.csv\", \"Transmissible Cases.csv\",\"NOFILE\"]\n","    Propnames = [\"Age Distribution\", \"Air Pollution\", \"Co-morbidities\",  \"Demographics\", \"Disease Spread\", \n","                 \"Health Disparities\", \"Hospital Beds\",  \"Mobility\", \"Residential Density\", \n","                 \"Social Distancing\", \"Testing\",\"Transmissible Cases\",\"voting\"]\n","  elif ReadDecember2021:\n","\n","    Propfilenames = FeatureFiles\n","    Propnames = [i[:-4] for i in Propfilenames]\n","\n","    if UseVoting:\n","      Propfilenames.append(\"NOFILE\")\n","      Propnames.append(\"voting\")\n","\n","  else:\n","    Propfilenames = [\"Age Distribution.csv\", \"Air Pollution.csv\", \"Co-morbidities.csv\", \"Health Disparities.csv\", \"Hospital Beds.csv\", \"Pop Demographics.csv\", \"Pop Mobility.csv\", \"Residential Density.csv\", \"Social Distancing.csv\", \"Testing.csv\", \"Transmissible Cases.csv\"]\n","    Propnames = [\"Age Distribution\", \"Air Pollution\", \"Co-morbidities\", \"Health Disparities\", \"Hospital Beds\", \"Pop Demographics\", \"Pop Mobility\", \"Residential Density\", \"Social Distancing\", \"Testing\", \"Transmissible Cases\"]\n","  \n","  NIHDATADIR = DATASETDIR + '/' \n","  numberfiles = len(Propnames)\n","  NpropperTimeStatic = 0\n","  if NpropperTimeDynamic != numberfiles:\n","    printexit('EXIT: Dynamic Properties set wrong ' + str(numberfiles) + ' ' + str(NpropperTimeDynamic))\n","  DynamicPropertyTimeSeries = np.empty([Num_Time,Nloc,numberfiles],dtype = np.float32)\n","  enddifference = NaN\n","\n","  for ifiles in range(0,numberfiles):\n","    InputPropertyNames.append(Propnames[ifiles])\n","    if Propfilenames[ifiles] == 'NOFILE': # Special case of Voting Data\n","      for iloc in range(0,Nloc):\n","        Demsize = DemVoting[iloc]\n","        RepSize = RepVoting[iloc]\n","        Votingcovariate = Demsize/(RepSize+Demsize)\n","        DynamicPropertyTimeSeries[:,iloc,ifiles] = Votingcovariate\n","      continue # over ifile loop\n","\n","    DynamicPropFile = NIHDATADIR + Propfilenames[ifiles]\n","    if not (ReadJan2021Covid or ReadApril2021Covid or ReadDecember2021):\n","      DynamicPropFile = DATASETDIR + '/ThirdCovariates/' + Propfilenames[ifiles]\n","\n","    # Read in  Covariate Data into DynamicPropertyTimeSeries\n","    print(DynamicPropFile)\n","    with open(DynamicPropFile, 'r') as read_obj:\n","        csv_reader = reader(read_obj)\n","        header = next(csv_reader)\n","        skip = 1\n","        if ReadJan2021Covid or ReadApril2021Covid or ReadDecember2021:\n","          skip = 2\n","          Ftype = header[0]\n","          if Ftype != 'Name':\n","            printexit('EXIT: Wrong file type ' + Ftype)\n","        Ftype = header[skip-1]\n","        if Ftype != 'FIPS':\n","          printexit('EXIT: Wrong file type ' + Ftype)\n","        # Check Date\n","        hformat = '%m-%d-%Y'\n","        if ReadJan2021Covid or ReadApril2021Covid or ReadDecember2021:\n","          hformat = '%Y-%m-%d'\n","        firstdate = datetime.strptime(header[skip], hformat)\n","        tdelta = (firstdate-InitialDate).days \n","        if tdelta > 0:\n","          printexit('Missing Covariate Data start -- adjust Dropearlydata ' + str(tdelta))\n","        lastdate = datetime.strptime(header[len(header)-1], hformat)\n","        enddifference1 = (FinalDate-lastdate).days\n","        if math.isnan(enddifference):\n","          enddifference = enddifference1\n","          print('Missing days at the end ' + str(enddifference))\n","        else:\n","          if enddifference != enddifference1:\n","            printexit('EXIT: Incorrect time length ' + Propnames[ifiles] + ' expected ' + str(enddifference) + ' actual ' +str(enddifference1))\n","        iloc = 0\n","        \n","        #Test\n","        if lastdate > FinalDate:\n","          tempInt = NumberofTimeunits\n","        else:\n","          tempInt = NumberofTimeunits - enddifference\n","\n","        for nextrow in csv_reader:\n","          if iloc == 0:\n","            print(len(nextrow)!=NumberofTimeunits + skip -enddifference-tdelta)\n","          if (len(nextrow)!=NumberofTimeunits + skip -enddifference-tdelta):\n","            printexit('EXIT: Incorrect row length ' + Propnames[ifiles] + ' Location ' + str(iloc) + ' ' +str(len(nextrow)))\n","          localfips = nextrow[skip-1]\n","          jloc = FIPSstringlookup[localfips] \n","          for itime in range(0, tempInt): #NumberofTimeunits - enddifference\n","            DynamicPropertyTimeSeries[itime,jloc,ifiles] = nextrow[itime + skip - tdelta]\n","        # Use previous week value for missing data at the end\n","          if tempInt != NumberofTimeunits:  \n","            for itime in range(tempInt, NumberofTimeunits):# NumberofTimeunits - enddifference\n","              DynamicPropertyTimeSeries[itime,jloc,ifiles] = DynamicPropertyTimeSeries[itime-7,jloc,ifiles]\n","          iloc += 1\n","# End Reading in dynamic property data\n","\n","    if iloc != Nloc:\n","            printexit('EXIT Inconsistent location lengths ' + Propnames[ifiles] + str(iloc) + ' ' + str(Nloc))\n","    print('Read ' + Propnames[ifiles] + ' data for locations ' + str(Nloc) + ' Time Steps ' + str(Num_Time) + ' Days dropped at start ' + str(-tdelta))\n","\n","  if ReadApril2021Covid or ReadDecember2021:\n","\n","    if RuralityCut:\n","      uselocation=np.full(Nloc,False,dtype=np.bool)\n","      if len(RuralityRange) > 0:\n","        for jloc in range(0,Nloc):\n","          if Locationrurality[jloc] >= RuralityRange[0] and Locationrurality[jloc] <= RuralityRange[1]:\n","            uselocation[jloc] = True\n","        TotRuralityCut = uselocation.sum()\n","        NumberCut = Nloc - TotRuralityCut\n","        print(' Rurality Cut ' + str(RuralityRange) + ' removes ' + str(Nloc - TotRuralityCut) + ' of ' + str(Nloc))\n","\n","      else: \n","        printexit('EXIT There are no rurality criteria')\n","      \n","      if TotRuralityCut > 0:\n","        NewNloc = Nloc - NumberCut\n","        NewNFIPS = NewNloc\n","        NewLocationfips = np.empty(NewNFIPS, dtype=int) # integer version of FIPs\n","        NewLocationcolumns = [] # String version of FIPS\n","        NewFIPSintegerlookup = {}\n","        NewFIPSstringlookup = {}\n","        NewBasicInputTimeSeries = np.empty([Num_Time,NewNloc,2],dtype = np.float32)\n","        NewLocationname = ['Empty'] * NewNFIPS\n","        NewLocationstate = ['Empty'] * NewNFIPS\n","        NewLocationpopulation = np.empty(NewNFIPS, dtype=int)\n","        NewLocationrurality = np.empty(NewNFIPS)\n","        NewLocationmad = np.empty(NewNFIPS)\n","        NewDynamicPropertyTimeSeries = np.empty([Num_Time,NewNloc,numberfiles],dtype = np.float32) \n","\n","        Newiloc = 0\n","        for iloc in range(0,Nloc):\n","          if not uselocation[iloc]:\n","            continue\n","          NewBasicInputTimeSeries[:,Newiloc,:] = BasicInputTimeSeries[:,iloc,:]\n","          NewDynamicPropertyTimeSeries[:,Newiloc,:] = DynamicPropertyTimeSeries[:,iloc,:]\n","          localfips = Locationcolumns[iloc]\n","          NewLocationcolumns.append(localfips)\n","          NewLocationfips[Newiloc] = int(localfips)\n","          NewFIPSintegerlookup[int(localfips)] = Newiloc\n","          NewFIPSstringlookup[localfips] = Newiloc \n","          NewLocationpopulation[Newiloc] = Locationpopulation[iloc]\n","          NewLocationstate[Newiloc] = Locationstate[iloc]\n","          NewLocationname[Newiloc] = Locationname[iloc]\n","          NewLocationrurality[Newiloc] = Locationrurality[iloc]\n","          NewLocationmad[Newiloc] = Locationmad[iloc]\n","          Newiloc +=1\n","\n","        BasicInputTimeSeries = NewBasicInputTimeSeries\n","        DynamicPropertyTimeSeries = NewDynamicPropertyTimeSeries\n","        Locationname = NewLocationname\n","        Locationstate = NewLocationstate\n","        Locationpopulation = NewLocationpopulation\n","        FIPSstringlookup = NewFIPSstringlookup\n","        FIPSintegerlookup = NewFIPSintegerlookup\n","        Locationcolumns = NewLocationcolumns\n","        Locationfips = NewLocationfips\n","        Locationrurality = NewLocationrurality\n","        Locationmad = NewLocationmad\n","        NFIPS = NewNFIPS\n","        Nloc = NewNloc\n","\n","\n","    else:\n","      uselocation = np.full(Nloc, True, dtype = np.bool)\n","      if (CovidPopulationCut > 0) or (NumberCut > 0):\n","        if NumberCut >0:\n","          smalllocations = np.argsort(Locationpopulation)\n","          for jloc in range(0,NumberCut):\n","            uselocation[smalllocations[jloc]] = False\n","          CovidPopulationCut = Locationpopulation[smalllocations[NumberCut]]\n","        else:\n","          NumberCut =0\n","          for iloc in range(0,Nloc):\n","            if Locationpopulation[iloc] < CovidPopulationCut:\n","              uselocation[iloc] = False\n","              NumberCut += 1\n","        print(' Population Cut ' + str(CovidPopulationCut) + ' removes ' + str(NumberCut) + ' of ' + str(Nloc))\n","      if(NumberCut > 0):\n","        NewNloc = Nloc - NumberCut\n","        NewNFIPS = NewNloc\n","        NewLocationfips = np.empty(NewNFIPS, dtype=int) # integer version of FIPs\n","        NewLocationcolumns = [] # String version of FIPS\n","        NewFIPSintegerlookup = {}\n","        NewFIPSstringlookup = {}\n","        NewBasicInputTimeSeries = np.empty([Num_Time,NewNloc,2],dtype = np.float32)\n","        NewLocationname = ['Empty'] * NewNFIPS\n","        NewLocationstate = ['Empty'] * NewNFIPS\n","        NewLocationpopulation = np.empty(NewNFIPS, dtype=int)\n","        NewDynamicPropertyTimeSeries = np.empty([Num_Time,NewNloc,numberfiles],dtype = np.float32) \n","\n","        Newiloc = 0\n","        for iloc in range(0,Nloc):\n","          if not uselocation[iloc]:\n","            continue\n","          NewBasicInputTimeSeries[:,Newiloc,:] = BasicInputTimeSeries[:,iloc,:]\n","          NewDynamicPropertyTimeSeries[:,Newiloc,:] = DynamicPropertyTimeSeries[:,iloc,:]\n","          localfips = Locationcolumns[iloc]\n","          NewLocationcolumns.append(localfips)\n","          NewLocationfips[Newiloc] = int(localfips)\n","          NewFIPSintegerlookup[int(localfips)] = Newiloc\n","          NewFIPSstringlookup[localfips] = Newiloc \n","          NewLocationpopulation[Newiloc] = Locationpopulation[iloc]\n","          NewLocationstate[Newiloc] = Locationstate[iloc]\n","          NewLocationname[Newiloc] = Locationname[iloc]\n","          Newiloc +=1\n","\n","        BasicInputTimeSeries = NewBasicInputTimeSeries\n","        DynamicPropertyTimeSeries = NewDynamicPropertyTimeSeries\n","        Locationname = NewLocationname\n","        Locationstate = NewLocationstate\n","        Locationpopulation = NewLocationpopulation\n","        FIPSstringlookup = NewFIPSstringlookup\n","        FIPSintegerlookup = NewFIPSintegerlookup\n","        Locationcolumns = NewLocationcolumns\n","        Locationfips = NewLocationfips\n","        NFIPS = NewNFIPS\n","        Nloc = NewNloc\n","\n","      "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Age Distribution.csv\n","Missing days at the end -145\n","False\n","Read Age Distribution data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Air Pollution.csv\n","False\n","Read Air Pollution data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Comorbidities.csv\n","False\n","Read Comorbidities data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Health Disparities.csv\n","False\n","Read Health Disparities data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Mobility.csv\n","False\n","Read Mobility data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Residential Density.csv\n","False\n","Read Residential Density data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Disease Spread.csv\n","False\n","Read Disease Spread data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Social Distancing.csv\n","False\n","Read Social Distancing data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Testing.csv\n","False\n","Read Testing data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Transmissible Cases.csv\n","False\n","Read Transmissible Cases data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/VaccinationOneDose.csv\n","False\n","Read VaccinationOneDose data for locations 3142 Time Steps 488 Days dropped at start 1\n","/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Vaccination.csv\n","False\n","Read Vaccination data for locations 3142 Time Steps 488 Days dropped at start 1\n"," Rurality Cut [4.501, 5] removes 2960 of 3142\n"]}]},{"cell_type":"markdown","metadata":{"id":"m6E93pmiMTrG"},"source":["### Apply Second filter to data to stratify based on MAD"]},{"cell_type":"code","metadata":{"id":"-53lCQRz4hCm","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1642448936081,"user_tz":300,"elapsed":8,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"6a2de867-2cbf-4ffb-93b8-fb3e1b1c3703"},"source":["RuralityMADStrataGroups = [0,1,2,3] # Select one group for model training, make sure to update in checkpointing\n","RuralityMADIter = RuralityMADStrataGroups[1]\n","\n","if RuralityMADIter == 0:\n","  MADRange = [0,1]\n","elif RuralityMADIter == 1:\n","  MADRange = [1,2]\n","elif RuralityMADIter == 2:\n","  MADRange = [2,3]\n","elif RuralityMADIter == 3:\n","  MADRange = [3,4]\n","else:\n","  printexit('EXIT Not a valid Rurality MAD Grouping')\n","\n","\n","if RuralityCut:\n","    uselocation=np.full(Nloc,False,dtype=np.bool)\n","    if len(MADRange) > 0:\n","      for jloc in range(0,Nloc):\n","        if (Locationmad[jloc] >= MADRange[0])&(Locationmad[jloc] < MADRange[1]):\n","          uselocation[jloc] = True\n","      TotMADCut = uselocation.sum()\n","      NumberCut = Nloc - TotMADCut\n","      print(' MAD Cut ' + str(MADRange) + ' removes ' + str(Nloc - TotMADCut) + ' of ' + str(Nloc))\n","\n","    else: \n","      printexit('EXIT There are no rurality criteria')\n","    \n","    if TotRuralityCut > 0:\n","      NewNloc = Nloc - NumberCut\n","      NewNFIPS = NewNloc\n","      NewLocationfips = np.empty(NewNFIPS, dtype=int) # integer version of FIPs\n","      NewLocationcolumns = [] # String version of FIPS\n","      NewFIPSintegerlookup = {}\n","      NewFIPSstringlookup = {}\n","      NewBasicInputTimeSeries = np.empty([Num_Time,NewNloc,2],dtype = np.float32)\n","      NewLocationname = ['Empty'] * NewNFIPS\n","      NewLocationstate = ['Empty'] * NewNFIPS\n","      NewLocationpopulation = np.empty(NewNFIPS, dtype=int)\n","      NewDynamicPropertyTimeSeries = np.empty([Num_Time,NewNloc,numberfiles],dtype = np.float32) \n","\n","      Newiloc = 0\n","      for iloc in range(0,Nloc):\n","        if not uselocation[iloc]:\n","          continue\n","        NewBasicInputTimeSeries[:,Newiloc,:] = BasicInputTimeSeries[:,iloc,:]\n","        NewDynamicPropertyTimeSeries[:,Newiloc,:] = DynamicPropertyTimeSeries[:,iloc,:]\n","        localfips = Locationcolumns[iloc]\n","        NewLocationcolumns.append(localfips)\n","        NewLocationfips[Newiloc] = int(localfips)\n","        NewFIPSintegerlookup[int(localfips)] = Newiloc\n","        NewFIPSstringlookup[localfips] = Newiloc \n","        NewLocationpopulation[Newiloc] = Locationpopulation[iloc]\n","        NewLocationstate[Newiloc] = Locationstate[iloc]\n","        NewLocationname[Newiloc] = Locationname[iloc]\n","        Newiloc +=1\n","\n","      BasicInputTimeSeries = NewBasicInputTimeSeries\n","      DynamicPropertyTimeSeries = NewDynamicPropertyTimeSeries\n","      Locationname = NewLocationname\n","      Locationstate = NewLocationstate\n","      Locationpopulation = NewLocationpopulation\n","      FIPSstringlookup = NewFIPSstringlookup\n","      FIPSintegerlookup = NewFIPSintegerlookup\n","      Locationcolumns = NewLocationcolumns\n","      Locationfips = NewLocationfips\n","      NFIPS = NewNFIPS\n","      Nloc = NewNloc\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":[" MAD Cut [1, 2] removes 103 of 182\n"]}]},{"cell_type":"markdown","metadata":{"id":"7EdsHkx7jLJX"},"source":["### Read and setup NIH Covariates August 2020 and January, April 2021 Data\n","\n","new collection of time dependent covariates (even if constant).\n","\n","cases and deaths and location property from previous data\n"]},{"cell_type":"markdown","metadata":{"id":"awLjz1adEXr3"},"source":["## Process Input Data  in various ways\n","\n"]},{"cell_type":"markdown","metadata":{"id":"H1fLYj-KBAjF"},"source":["###Set TFT Mode"]},{"cell_type":"code","metadata":{"id":"hH6D2TmcBE4u","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1642448936082,"user_tz":300,"elapsed":8,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c3e706af-bc0f-47b1-f618-24b14062ad9c"},"source":["TFTConversion = True"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wrugyhFU66md"},"source":["### Convert Cumulative to Daily"]},{"cell_type":"code","metadata":{"id":"ipjkf86A6imL","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1642448936082,"user_tz":300,"elapsed":8,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"36b7ce11-8163-42d3-c958-5e334e5f98a4"},"source":["# Convert  cumulative to Daily. \n","# Replace negative daily values by zero\n","# remove daily to sqrt(daily)  and Then normalize maximum to 1\n","if ConvertDynamicPredictedQuantity:\n","  NewBasicInputTimeSeries = np.empty_like(BasicInputTimeSeries, dtype=np.float32)\n","  Zeroversion = np.zeros_like(BasicInputTimeSeries, dtype=np.float32)\n","  Rolleddata = np.roll(BasicInputTimeSeries, 1, axis=0)\n","  Rolleddata[0,:,:] = Zeroversion[0,:,:]\n","  NewBasicInputTimeSeries = np.maximum(np.subtract(BasicInputTimeSeries,Rolleddata),Zeroversion)\n","  originalnumber = np.sum(BasicInputTimeSeries[NumberofTimeunits-1,:,:],axis=0)\n","  newnumber = np.sum(NewBasicInputTimeSeries,axis=(0,1))\n","  print('Original summed counts ' + str(originalnumber) + ' become ' + str(newnumber)+ ' Cases, Deaths')\n","\n","  BasicInputTimeSeries = NewBasicInputTimeSeries\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Original summed counts [344652.   6729.] become [349361.   6849.] Cases, Deaths\n"]}]},{"cell_type":"markdown","metadata":{"id":"kZLkGseQpGlr"},"source":["### Static and Dynamic specials for COVID\n","\n","except case where Romeo data read"]},{"cell_type":"code","metadata":{"id":"1fhi0Ug84ehL","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1642448936082,"user_tz":300,"elapsed":7,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c0494795-3113-45f2-9e1b-c9d97491ea07"},"source":["# Remove special status of Cases and Deaths\n","if CDSpecial:\n","    \n","  NewNpropperTimeDynamic = NpropperTimeDynamic + 2\n","  NewNpropperTime = NpropperTimeStatic + NewNpropperTimeDynamic   \n","\n","  NewProperty_is_Intensive = np.full(NewNpropperTime, True, dtype = np.bool)\n","  NewInputPropertyNames = []\n","  NewDynamicPropertyTimeSeries = np.empty([Num_Time,NewNloc,NewNpropperTimeDynamic],dtype = np.float32)\n","\n","  for casesdeaths in range(0,2):\n","    NewDynamicPropertyTimeSeries[:,:,casesdeaths] = BasicInputTimeSeries[:,:,casesdeaths]\n","  BasicInputTimeSeries = None\n","\n","  for iprop in range(0,NpropperTimeStatic):\n","    NewInputPropertyNames.append(InputPropertyNames[iprop])\n","    NewProperty_is_Intensive[iprop] = Property_is_Intensive[iprop]\n","  NewProperty_is_Intensive[NpropperTimeStatic] = False\n","  NewProperty_is_Intensive[NpropperTimeStatic+1] = False\n","  NewInputPropertyNames.append('Cases')\n","  NewInputPropertyNames.append('Deaths')\n","  for ipropdynamic in range(0,NpropperTimeDynamic):\n","    Newiprop = NpropperTimeStatic+2+ipropdynamic\n","    iprop = NpropperTimeStatic+ipropdynamic\n","    NewDynamicPropertyTimeSeries[:,:,Newiprop] = DynamicPropertyTimeSeries[:,:,iprop]\n","    NewInputPropertyNames.append(InputPropertyNames[iprop])\n","    NewProperty_is_Intensive[Newiprop] = Property_is_Intensive[iprop]\n","  \n","  NpropperTimeDynamic = NewNpropperTimeDynamic\n","  NpropperTime = NewNpropperTime\n","  DynamicPropertyTimeSeries = NewDynamicPropertyTimeSeries\n","  InputPropertyNames = NewInputPropertyNames\n","  Property_is_Intensive = NewProperty_is_Intensive"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wTNVFciYtS5Y"},"source":["### Static Property Manipulations for Covid Case"]},{"cell_type":"code","metadata":{"id":"F5BPSUk7i377","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1642448936083,"user_tz":300,"elapsed":8,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"98bed8d8-d62d-4615-f205-d81bb28a7197"},"source":["# Execute under all COVID circumstances properties generated here\n","if CDSpecial:\n","  if NpropperTimeStatic > 0:\n","    Num_Extensive = 0\n","    for iprop in range(0,NpropperTimeStatic):\n","      if not Property_is_Intensive[iprop]:\n","        Num_Extensive +=1\n","    print(startbold + startred + ' Number of Extensive parameters ' + str(Num_Extensive) + resetfonts)\n","    for iprop in range(0,NpropperTimeStatic):\n","      if not Property_is_Intensive[iprop]:\n","        print(InputPropertyNames[iprop])\n","\n","    # Convert Extensive covariates to SQRT(Population normed)\n","    # Replace negatives by mean of positives and zeroes\n","    positivemean = np.zeros(NpropperTimeStatic, dtype = np.float32)\n","    countvalidentries = np.zeros(NpropperTimeStatic, dtype = np.float32)\n","    for iloc in range(0,Nloc):\n","      for iprop in range(0,NpropperTimeStatic):\n","        if not Property_is_Intensive[iprop]:\n","          BasicInputStaticProps[iloc,iprop] = np.sqrt(BasicInputStaticProps[iloc,iprop]/Locationpopulation[iloc])\n","        else:\n","          if BasicInputStaticProps[iloc,iprop] >= 0:\n","            positivemean[iprop] += BasicInputStaticProps[iloc,iprop]\n","            countvalidentries[iprop] += 1.0\n","\n","    for iprop in range(0,NpropperTimeStatic):\n","        if Property_is_Intensive[iprop]:\n","          positivemean[iprop] /= countvalidentries[iprop]\n","\n","    for iloc in range(0,Nloc):\n","      for iprop in range(0,NpropperTimeStatic):\n","        if Property_is_Intensive[iprop]:\n","          if BasicInputStaticProps[iloc,iprop] < 0:\n","            BasicInputStaticProps[iloc,iprop] = positivemean[iprop]\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"aSDyT65ly4Q-"},"source":["###Normalize All Static and Dynamic Properties\n","\n","for Static Properties BasicInputStaticProps[Nloc,NpropperTimeStatic] converts to NormedInputStaticProps[Nloc,NpropperTimeStatic]"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":347},"id":"NGbBzf47zv1m","executionInfo":{"status":"ok","timestamp":1642448936523,"user_tz":300,"elapsed":448,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"7435659e-19a7-46a7-eba4-7a0ed1e41035"},"source":["def SetTakeroot(x,n):\n","    if np.isnan(x):\n","      return NaN   \n","    if n == 3:\n","      return np.cbrt(x)\n","    elif n == 2:\n","      if x <= 0.0:\n","        return 0.0\n","      return np.sqrt(x) \n","    return x \n","\n","def DynamicPropertyScaling(InputTimeSeries):\n","    Results = np.full(7, 0.0,dtype=np.float32)\n","    Results[1] = np.nanmax(InputTimeSeries, axis = (0,1))\n","    Results[0] = np.nanmin(InputTimeSeries, axis = (0,1))\n","    Results[3] = np.nanmean(InputTimeSeries, axis = (0,1))\n","    Results[4] = np.nanstd(InputTimeSeries, axis = (0,1))\n","    Results[2] = np.reciprocal(np.subtract(Results[1],Results[0]))\n","    Results[5] = np.multiply(Results[2],np.subtract(Results[3],Results[0]))\n","    Results[6] = np.multiply(Results[2],Results[4])\n","    return Results\n","\n","NpropperTimeMAX = NpropperTime + NumTimeSeriesCalculated  \n","if ScaleProperties:\n","  QuantityTakeroot = np.full(NpropperTimeMAX,1,dtype=np.int)\n","  if Hydrology:\n","    QuantityTakeroot[27] = 3\n","    QuantityTakeroot[32] = 3\n","  if CDSpecial:\n","    QuantityTakeroot[NpropperTimeStatic] =2\n","    QuantityTakeroot[NpropperTimeStatic+1] =2\n","\n","# Scale data by roots if requested\n","  for iprop in range(0, NpropperTimeMAX):\n","    if QuantityTakeroot[iprop] >= 2:\n","      if iprop < NpropperTimeStatic:\n","        for iloc in range(0,Nloc):\n","          BasicInputStaticProps[iloc,iprop] = SetTakeroot(BasicInputStaticProps[iloc,iprop],QuantityTakeroot[iprop])\n","      elif iprop < NpropperTime:\n","        for itime in range(0,NumberofTimeunits):\n","          for iloc in range(0,Nloc):\n","            DynamicPropertyTimeSeries[itime,iloc,iprop-NpropperTimeStatic] = SetTakeroot(\n","                DynamicPropertyTimeSeries[itime,iloc,iprop-NpropperTimeStatic],QuantityTakeroot[iprop])\n","      else:\n","        for itime in range(0,NumberofTimeunits):\n","          for iloc in range(0,Nloc):\n","            CalculatedTimeSeries[itime,iloc,iprop-NpropperTime] =SetTakeroot(\n","                CalculatedTimeSeries[itime,iloc,iprop-NpropperTime],QuantityTakeroot[iprop])\n","\n","  QuantityStatisticsNames = ['Min','Max','Norm','Mean','Std','Normed Mean','Normed Std']\n","  QuantityStatistics = np.zeros([NpropperTimeMAX,7], dtype=np.float32)\n","  if NpropperTimeStatic > 0:  \n","    print(BasicInputStaticProps.shape)\n","    max_value = np.amax(BasicInputStaticProps, axis = 0)\n","    min_value = np.amin(BasicInputStaticProps, axis = 0)\n","    mean_value = np.mean(BasicInputStaticProps, axis = 0)\n","    std_value = np.std(BasicInputStaticProps, axis = 0)\n","    normval = np.reciprocal(np.subtract(max_value,min_value))\n","    normed_mean = np.multiply(normval,np.subtract(mean_value,min_value))\n","    normed_std = np.multiply(normval,std_value)\n","    QuantityStatistics[0:NpropperTimeStatic,0] = min_value\n","    QuantityStatistics[0:NpropperTimeStatic,1] = max_value\n","    QuantityStatistics[0:NpropperTimeStatic,2] = normval\n","    QuantityStatistics[0:NpropperTimeStatic,3] = mean_value\n","    QuantityStatistics[0:NpropperTimeStatic,4] = std_value\n","    QuantityStatistics[0:NpropperTimeStatic,5] = normed_mean\n","    QuantityStatistics[0:NpropperTimeStatic,6] = normed_std\n","\n","    NormedInputStaticProps =np.empty_like(BasicInputStaticProps)\n","    for iloc in range(0,Nloc):\n","      NormedInputStaticProps[iloc,:] = np.multiply((BasicInputStaticProps[iloc,:] - min_value[:]),normval[:])\n","\n","  if (NpropperTimeDynamic > 0) or (NumTimeSeriesCalculated>0):\n","    for iprop in range(NpropperTimeStatic,NpropperTimeStatic+NpropperTimeDynamic):\n","      QuantityStatistics[iprop,:] = DynamicPropertyScaling(DynamicPropertyTimeSeries[:,:,iprop-NpropperTimeStatic])\n","    for iprop in range(0,NumTimeSeriesCalculated):\n","      QuantityStatistics[iprop+NpropperTime,:] = DynamicPropertyScaling(CalculatedTimeSeries[:,:,iprop]) \n","\n","    NormedDynamicPropertyTimeSeries = np.empty_like(DynamicPropertyTimeSeries)\n","    for iprop in range(NpropperTimeStatic,NpropperTimeStatic+NpropperTimeDynamic):\n","      NormedDynamicPropertyTimeSeries[:,:,iprop - NpropperTimeStatic] = np.multiply((DynamicPropertyTimeSeries[:,:,iprop - NpropperTimeStatic]\n","                                                - QuantityStatistics[iprop,0]),QuantityStatistics[iprop,2])\n","    \n","    if NumTimeSeriesCalculated > 0:\n","      NormedCalculatedTimeSeries = np.empty_like(CalculatedTimeSeries)\n","      for iprop in range(NpropperTime,NpropperTimeMAX):\n","        NormedCalculatedTimeSeries[:,:,iprop - NpropperTime] = np.multiply((CalculatedTimeSeries[:,:,iprop - NpropperTime]\n","                                                - QuantityStatistics[iprop,0]),QuantityStatistics[iprop,2])\n","      CalculatedTimeSeries = None\n","  \n","    BasicInputStaticProps = None\n","    DynamicPropertyTimeSeries = None\n","    print(startbold + \"Properties scaled\" +resetfonts)\n","\n","  line = 'Name   '\n","  for propval in range (0,7):\n","    line += QuantityStatisticsNames[propval] + '    '\n","  print('\\n' + startbold +startpurple + line + resetfonts)\n","  for iprop in range(0,NpropperTimeMAX):\n","    if iprop == NpropperTimeStatic:\n","      print('\\n')\n","    line = startbold + startpurple + str(iprop) + ' ' + InputPropertyNames[iprop] + resetfonts  + ' Root ' + str(QuantityTakeroot[iprop])\n","    for propval in range (0,7):\n","      line += ' ' + str(round(QuantityStatistics[iprop,propval],3))\n","    print(line)\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1mProperties scaled\u001b[0m\n","\n","\u001b[1m\u001b[35mName   Min    Max    Norm    Mean    Std    Normed Mean    Normed Std    \u001b[0m\n","\n","\n","\u001b[1m\u001b[35m0 Cases\u001b[0m Root 2 0.0 36.263 0.028 2.035 2.218 0.056 0.061\n","\u001b[1m\u001b[35m1 Deaths\u001b[0m Root 2 0.0 6.557 0.152 0.132 0.4 0.02 0.061\n","\u001b[1m\u001b[35m2 Age Distribution\u001b[0m Root 1 0.4 0.696 3.372 0.578 0.061 0.601 0.206\n","\u001b[1m\u001b[35m3 Air Pollution\u001b[0m Root 1 0.0 0.587 1.704 0.383 0.121 0.653 0.206\n","\u001b[1m\u001b[35m4 Comorbidities\u001b[0m Root 1 0.15 0.721 1.751 0.393 0.122 0.425 0.213\n","\u001b[1m\u001b[35m5 Health Disparities\u001b[0m Root 1 0.063 0.77 1.413 0.383 0.188 0.452 0.265\n","\u001b[1m\u001b[35m6 Mobility\u001b[0m Root 1 0.399 0.642 4.114 0.544 0.043 0.596 0.178\n","\u001b[1m\u001b[35m7 Residential Density\u001b[0m Root 1 0.037 0.985 1.055 0.602 0.252 0.596 0.266\n","\u001b[1m\u001b[35m8 Disease Spread\u001b[0m Root 1 0.0 1.0 1.0 0.196 0.226 0.196 0.226\n","\u001b[1m\u001b[35m9 Social Distancing\u001b[0m Root 1 0.0 1.0 1.0 0.823 0.169 0.823 0.169\n","\u001b[1m\u001b[35m10 Testing\u001b[0m Root 1 0.0 1.0 1.0 0.535 0.222 0.535 0.222\n","\u001b[1m\u001b[35m11 Transmissible Cases\u001b[0m Root 1 0.0 0.957 1.044 0.468 0.2 0.488 0.209\n","\u001b[1m\u001b[35m12 VaccinationOneDose\u001b[0m Root 1 0.0 93.6 0.011 7.757 14.064 0.083 0.15\n","\u001b[1m\u001b[35m13 Vaccination\u001b[0m Root 1 0.0 85.5 0.012 5.877 11.725 0.069 0.137\n"]}]},{"cell_type":"markdown","metadata":{"id":"yW9bPWExf4YK"},"source":["###Set up Futures \n","\n","-- currently at daily level "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"1uwExtALgrsW","executionInfo":{"status":"ok","timestamp":1642448936828,"user_tz":300,"elapsed":306,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"6f44638a-063b-43bc-e9be-a7f17f5cee58"},"source":["class Future:\n","    def __init__(self, name, daystart = 0, days =[], wgt=1.0, classweight = 1.0):\n","        self.name = name\n","        self.days = np.array(days)\n","        self.daystart = daystart\n","        self.wgts = np.full_like(self.days,wgt,dtype=float)\n","        self.size = len(self.days)\n","        self.classweight = classweight\n","\n","LengthFutures = 0\n","if GenerateFutures: # daystart overwritten\n","  Secondday = Future('day2',daystart = 23, days=[2],classweight=1./14.)\n","  Thirdday = Future('day3', daystart = 24, days=[3],classweight=1./14.)\n","  Fourthday = Future('day4', daystart = 25, days=[4],classweight=1./14.)\n","  Fifthday = Future('day5', daystart = 26, days=[5],classweight=1./14.)\n","  Sixthday = Future('day6', daystart = 27, days=[6],classweight=1./14.)\n","  Seventhday = Future('day7', daystart = 27, days=[7],classweight=1./14.)\n","  day8 = Future('day8', daystart = 28, days=[8],classweight=1./14.)\n","  day9 =  Future('day9', daystart = 29, days=[9],classweight=1./14.)\n","  day10 =  Future('day10', daystart = 30, days=[10],classweight=1./14.)\n","  day11 =  Future('day11', daystart = 31, days=[11],classweight=1./14.)\n","  day12 =  Future('day12', daystart = 32, days=[12],classweight=1./14.)\n","  day13 =  Future('day13', daystart = 33, days=[13],classweight=1./14.)\n","  day14 =  Future('day14', daystart = 34, days=[14],classweight=1./14.)\n","  day15 =  Future('day15', daystart = 35, days=[15],classweight=1./14.)\n","  # Secondweek = Future('week2', daystart= 19, days=[9,10,11,12,13,14,15],wgt=1./7.,classweight=0.25)\n","  # Thirdweek = Future('week3', daystart= 26, days=[16,17,18,19,20,21,22],wgt=1./7.,classweight=0.25)\n","  # Fourthweek = Future('week4', daystart = 33, days=[23,24,25,26,27,28,29],wgt=1./7.,classweight=0.25)\n","  # Fifthweek = Future('week5', daystart = 40, days=[30,31,32,33,34,35,36],wgt=1./7.,classweight=0.25)\n","  \n","  Futures = [ Secondday,Thirdday,Fourthday,Fifthday,Sixthday,Seventhday,day8,day9,day10,day11,day12,day13,day14,day15]\n","  Futures =[]\n","  for ifuture in range(0,14):\n","    xx = Future(str(ifuture+1), days=[ifuture+2])\n","    Futures.append(xx)\n","  LengthFutures = len(Futures)\n","  Futuresmaxday = 0\n","  Futuresmaxweek = 0\n","  for i in range(0,LengthFutures):\n","      j = len(Futures[i].days)\n","      if j == 1:\n","          Futuresmaxday = max(Futuresmaxday, Futures[i].days[0])\n","      else:\n","          Futuresmaxweek = max(Futuresmaxweek, Futures[i].days[j-1])\n","      Futures[i].daystart -= Dropearlydata\n","      if Futures[i].daystart < 0: Futures[i].daystart = 0\n","      if Earthquake:\n","        Futures[i].daystart = 0\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Kdm4DDFL92NJ"},"source":["###Set up mappings of locations\n","\n","In next cell, we map locations for BEFORE location etc added\n","\n","In cell after that we do same for sequences"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"JRZm-x13980a","executionInfo":{"status":"ok","timestamp":1642448936828,"user_tz":300,"elapsed":6,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d02e83f6-5d04-4710-81cc-450f38a219cf"},"source":["OriginalNloc = Nloc\n","\n","MappedLocations = np.arange(0,Nloc, dtype=np.int)\n","LookupLocations = np.arange(0,Nloc, dtype=np.int)\n","MappedNloc = Nloc\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"MTUIpVT3vris"},"source":["###Property and Prediction  Data Structures\n","\n","Two important Lists Properties and Predictions that are related\n","\n"," * Data stored in series is for properties, the calculated value occuring at or ending that day\n"," * For predictions, the data is the calculated value from that date or later. \n","\n"," * We store data labelled by time so that\n","  * for inputs we use time 0 upto last value - 1 i.e. position [length of array - 1]\n","  * for outputs (predictions) with sequence Tseq, we use array locations [Tseq] to [length of array -1]\n","  * This implies Num_Seq = Num_Time - Tseq\n","\n","\n","**Properties**\n","\n","Everything appears in Property list -- both input and output (predicted)\n","DynamicPropertyTimeSeries holds input property time series where value is value at that time using data before this time for aggregations\n","  * NpropperTimeStatic is the number of static properties -- typically read in or calculated from input information\n","  * NpropperTimeDynamicInput is total number of input time series\n","  * NpropperTimeDynamicCalculated is total number of calculated dynamic quantities  used in Time series analysis as input properties and/or output predictions\n","  * NpropperTimeDynamic = NpropperTimeDynamicInput + NpropperTimeDynamicCalculated ONLY includes input properties\n","  * NpropperTime = NpropperTimeStatic + NpropperTimeDynamic will not include futures and NOT include calculated predictions\n","  * InputPropertyNames is a list of size NpropperTime holding names\n","  * NpropperTimeMAX = NpropperTime + NumTimeSeriesCalculated has calculated predictions following input properties ignoring futures \n","  * QuantityStatistics has 7 statistics used in normalizing for NpropperTimeMAX properties\n","  * Normalization takes NpropperTimeStatic static features in BasicInputStaticProps and stores in NormedInputStaticProps\n","  * Normalization takes NpropperTimeDynamicInput dynamic features in BasicInputTimeSeries and stores in NormedInputTimeSeries\n","  * Normalization takes NpropperTimeDynamicCalculated dynamic features in DynamicPropertyTimeSeries and stores in NormedDynamicPropertyTimeSeries\n","\n","**Predictions**\n","\n"," * NumpredbasicperTime can be 1 upto NpropperTimeDynamic and are part of dynamic input series. It includes input values that are to be predicted (these MUST be at start) plus NumTimeSeriesCalculated calculated series\n"," * NumpredFuturedperTime is <= NumpredbasicperTime and is the number of input dynamic series that are futured\n"," * NumTimeSeriesCalculated is number of calculated (not as futures) time series stored in CalculatedTimeSeries and names in NamespredCalculated\n"," * Typically NumpredbasicperTime = NumTimeSeriesCalculated + NumpredFuturedperTime (**Currently this is assumed**)\n"," * Normalization takes NumTimeSeriesCalculated calculated series in CalculatedTimeSeries and stores in NormedCalculatedTimeSeries\n"," * Predictions per Time are  NpredperTime = NumpredbasicperTime + NumpredFuturedperTime*LengthFutures\n"," * Predictions per sequence Npredperseq = NpredperTime\n","\n"]},{"cell_type":"markdown","metadata":{"id":"dGvEtAj5xHhR"},"source":["### Set Requested Properties Predictions Encodings"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"lycrtgBHxQCq","executionInfo":{"status":"ok","timestamp":1642448936828,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"1250595b-82eb-45a9-a07c-b12a61b95a9b"},"source":["# BASIC EARTHQUAKE SET JUST LOG ENERGY AND MULTIPLICITY\n","if Earthquake:\n","  InputSource = ['Static','Static','Static','Static','Dynamic','Dynamic','Dynamic','Dynamic'\n","    ,'Dynamic','Dynamic','Dynamic','Dynamic','Dynamic']\n","  InputSourceNumber = [0,1,2,3,0,1,2,3,4,5,6,7,8]\n","\n","  PredSource = ['Dynamic','Calc','Calc','Calc','Calc','Calc','Calc','Calc','Calc','Calc']\n","  PredSourceNumber = [0,0,1,2,3,4,5,6,7,8]\n","\n","  FuturedPred = [-1]*len(PredSource)\n","\n","  # Encodings\n","\n","  # Earthquake Space-Time\n","  PropTypes = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','BottomUp','BottomUp','BottomUp','BottomUp']\n","  PropValues = [0, 0, 1, 2, 3,4, 8,16,32,64]\n","\n","  PredTypes = Types = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','BottomUp','BottomUp','BottomUp','BottomUp']\n","  PredValues = [0, 0, 1, 2, 3,4, 8,16,32,64]\n","\n","if ReadApril2021Covid:\n","  InputSource = ['Dynamic']*15\n","  InputSourceNumber = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n","\n","  PredSource = ['Dynamic','Dynamic']\n","  PredSourceNumber = [0,1]\n","  FuturedPred = [1,1]\n","\n","  # Encodings\n","  PropTypes = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','Weekly']\n","  PropValues = [0, 0, 1, 2, 3,4, 0]\n","\n","  PredTypes = Types = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','Weekly']\n","  PredValues = [0, 0, 1, 2, 3,4, 0]\n","  if TFTConversion:\n","    PredTypes =[]\n","    PredValues = []\n","\n","if ReadDecember2021:\n","  InputSource = ['Dynamic'] * 14\n","  InputSourceNumber = [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\n","\n","  PredSource = ['Dynamic','Dynamic']\n","  PredSourceNumber = [0,1]\n","  FuturedPred = [1,1]\n","\n","  # Encodings\n","  PropTypes = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','Weekly']\n","  PropValues = [0, 0, 1, 2, 3,4, 0]\n","\n","  PredTypes = Types = ['Spatial', 'TopDown', 'TopDown','TopDown','TopDown','TopDown','Weekly']\n","  PredValues = [0, 0, 1, 2, 3,4, 0]\n","  if TFTConversion:\n","    PredTypes =[]\n","    PredValues = []\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"DZbYR4a2lGCe"},"source":["### Choose Input and Predicted Quantities"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"tXz5CLaOlOnn","executionInfo":{"status":"ok","timestamp":1642448937091,"user_tz":300,"elapsed":268,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"168fb75c-961f-424b-9896-8eada21de79c"},"source":["if len(InputSource) != len(InputSourceNumber):\n","  printexit(' Inconsistent Source Lengths ' + str(len(InputSource)) + str(len(InputSourceNumber)) )\n","if len(PredSource) != len(PredSourceNumber):\n","  printexit(' Inconsistent Rediction Lengths ' + str(len(PredSource)) + str(len(PredSourceNumber)) )\n","\n","# Executed by all even if GenerateFutures false except for direct Romeo data\n","if (not ReadJuly2020Covid) and not (ReadJan2021Covid) and not (ReadApril2021Covid) and not (ReadDecember2021):\n","  if not UseFutures:\n","      LengthFutures = 0\n","  print(startbold + \"Number of Futures -- separate for each regular prediction \" +str(LengthFutures) + resetfonts)\n","  Usedaystart = False\n","\n","if len(PredSource) > 0: # set up Predictions\n","  NumpredbasicperTime = len(PredSource)\n","  FuturedPointer = np.full(NumpredbasicperTime,-1,dtype=np.int)\n","  NumpredFuturedperTime = 0\n","  NumpredfromInputsperTime = 0\n","  for ipred in range(0,len(PredSource)):\n","    if PredSource[ipred] == 'Dynamic':\n","      NumpredfromInputsperTime += 1\n","  countinputs = 0\n","  countcalcs = 0\n","  for ipred in range(0,len(PredSource)):\n","    if not(PredSource[ipred] == 'Dynamic' or PredSource[ipred] == 'Calc'):\n","      printexit('Illegal Prediction ' + str(ipred) + ' ' + PredSource[ipred])\n","    if PredSource[ipred] == 'Dynamic':\n","      countinputs += 1 \n","    else:\n","      countcalcs += 1\n","    if FuturedPred[ipred] >= 0:\n","      if LengthFutures > 0:\n","        FuturedPred[ipred] = NumpredFuturedperTime\n","        FuturedPointer[ipred] = NumpredFuturedperTime\n","        NumpredFuturedperTime += 1\n","      else:\n","        FuturedPred[ipred] = -1\n","\n","else: # Set defaults\n","  NumpredfromInputsperTime = NumpredFuturedperTime\n","  FuturedPointer = np.full(NumpredbasicperTime,-1,dtype=np.int)\n","  PredSource =[]\n","  PredSourceNumber = []\n","  FuturedPred =[]\n","  futurepos = 0\n","  for ipred in range(0,NumpredFuturedperTime): \n","    PredSource.append('Dynamic')\n","    PredSourceNumber.append(ipred)\n","    futured = -1\n","    if LengthFutures > 0:\n","      futured = futurepos\n","      FuturedPointer[ipred] = futurepos\n","      futurepos += 1\n","    FuturedPred.append(futured)\n","  for ipred in range(0,NumTimeSeriesCalculated):\n","    PredSource.append('Calc')\n","    PredSourceNumber.append(ipred)\n","    FuturedPred.append(-1) \n","  print('Number of Predictions ' + str(len(PredSource)))   \n","\n","\n","PropertyNameIndex = np.empty(NpropperTime, dtype = np.int32)\n","PropertyAverageValuesPointer = np.empty(NpropperTime, dtype = np.int32)\n","for iprop in range(0,NpropperTime):\n","  PropertyNameIndex[iprop] = iprop # names\n","  PropertyAverageValuesPointer[iprop] = iprop # normalizations\n","\n","# Reset Source -- if OK as read don't set InputSource InputSourceNumber\n","# Reset NormedDynamicPropertyTimeSeries and NormedInputStaticProps\n","# Reset NpropperTime = NpropperTimeStatic + NpropperTimeDynamic\n","if len(InputSource) > 0: # Reset Input Source\n","  NewNpropperTimeStatic = 0\n","  NewNpropperTimeDynamic = 0\n","  for isource in range(0,len(InputSource)):\n","    if InputSource[isource] == 'Static':\n","      NewNpropperTimeStatic += 1\n","    if InputSource[isource] == 'Dynamic':\n","      NewNpropperTimeDynamic += 1\n","  NewNormedDynamicPropertyTimeSeries = np.empty([Num_Time,Nloc,NewNpropperTimeDynamic],dtype = np.float32)  \n","  NewNormedInputStaticProps = np.empty([Nloc,NewNpropperTimeStatic],dtype = np.float32)\n","  NewNpropperTime = NewNpropperTimeStatic + NewNpropperTimeDynamic\n","  NewPropertyNameIndex = np.empty(NewNpropperTime, dtype = np.int32)\n","  NewPropertyAverageValuesPointer = np.empty(NewNpropperTime, dtype = np.int32)\n","  countstatic = 0\n","  countdynamic = 0\n","  for isource in range(0,len(InputSource)):\n","    if InputSource[isource] == 'Static':\n","      OldstaticNumber = InputSourceNumber[isource]\n","      NewNormedInputStaticProps[:,countstatic] = NormedInputStaticProps[:,OldstaticNumber]\n","      NewPropertyNameIndex[countstatic] = PropertyNameIndex[OldstaticNumber]\n","      NewPropertyAverageValuesPointer[countstatic] = PropertyAverageValuesPointer[OldstaticNumber]\n","      countstatic += 1\n","\n","    elif InputSource[isource] == 'Dynamic':\n","      OlddynamicNumber =InputSourceNumber[isource]\n","      NewNormedDynamicPropertyTimeSeries[:,:,countdynamic] = NormedDynamicPropertyTimeSeries[:,:,OlddynamicNumber]\n","      NewPropertyNameIndex[countdynamic+NewNpropperTimeStatic] = PropertyNameIndex[OlddynamicNumber+NpropperTimeStatic]\n","      NewPropertyAverageValuesPointer[countdynamic+NewNpropperTimeStatic] = PropertyAverageValuesPointer[OlddynamicNumber+NpropperTimeStatic]\n","      countdynamic += 1\n","    \n","    else:\n","     printexit('Illegal Property ' + str(isource) + ' ' + InputSource[isource]) \n","\n","else: # pretend data altered\n","  NewPropertyNameIndex = PropertyNameIndex\n","  NewPropertyAverageValuesPointer = PropertyAverageValuesPointer\n","  NewNpropperTime = NpropperTime\n","  NewNpropperTimeStatic = NpropperTimeStatic\n","  NewNpropperTimeDynamic = NpropperTimeDynamic\n","\n","  NewNormedInputStaticProps = NormedInputStaticProps\n","  NewNormedDynamicPropertyTimeSeries = NormedDynamicPropertyTimeSeries\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Yb8-aCUg3Ry5"},"source":["###Calculate Futures\n","\n","Start Predictions"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1111},"id":"Mx4PkF7nkLu_","executionInfo":{"status":"ok","timestamp":1642448937092,"user_tz":300,"elapsed":8,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"e9a7597b-b40a-4a76-da8a-a52676d1e52f"},"source":["# Order of Predictions *****************************\n","# Basic \"futured\" Predictions from property dynamic arrays\n","# Additional predictions without futures and NOT in property arrays including Calculated time series\n","# LengthFutures predictions for first NumpredFuturedperTime predictions\n","# Special predictions (temporal, positional) added later\n","NpredperTime = NumpredbasicperTime + NumpredFuturedperTime*LengthFutures\n","Npredperseq = NpredperTime\n","Predictionbasicname = [' '] * NumpredbasicperTime\n","for ipred in range(0,NumpredbasicperTime):\n","  if PredSource[ipred] == 'Dynamic':\n","    Predictionbasicname[ipred] = InputPropertyNames[PredSourceNumber[ipred]+NpropperTimeStatic]\n","  else:\n","    Predictionbasicname[ipred]= NamespredCalculated[PredSourceNumber[ipred]]\n","\n","TotalFutures = 0\n","if NumpredFuturedperTime <= 0:\n","  GenerateFutures = False\n","if GenerateFutures:\n","  TotalFutures = NumpredFuturedperTime * LengthFutures\n","print(startbold + 'Predictions Total ' + str(Npredperseq) + ' Basic ' + str(NumpredbasicperTime) + ' Of which futured are '\n","  + str(NumpredFuturedperTime) + ' Giving number explicit futures ' + str(TotalFutures) + resetfonts )\n","Predictionname = [' '] * Npredperseq\n","Predictionnametype = [' '] * Npredperseq\n","Predictionoldvalue = np.empty(Npredperseq, dtype=int)\n","Predictionnewvalue = np.empty(Npredperseq, dtype=int)\n","Predictionday = np.empty(Npredperseq, dtype=int)\n","PredictionAverageValuesPointer = np.empty(Npredperseq, dtype=int)\n","Predictionwgt = [1.0] * Npredperseq\n","for ipred in range(0,NumpredbasicperTime):\n","  Predictionnametype[ipred] = PredSource[ipred]\n","  Predictionoldvalue[ipred] = PredSourceNumber[ipred]\n","  Predictionnewvalue[ipred] = ipred\n","  if PredSource[ipred] == 'Dynamic':\n","    PredictionAverageValuesPointer[ipred] = NpropperTimeStatic + Predictionoldvalue[ipred]\n","  else:\n","    PredictionAverageValuesPointer[ipred] = NpropperTime + PredSourceNumber[ipred]\n","  Predictionwgt[ipred] = 1.0\n","  Predictionday[ipred] = 1\n","  extrastring =''\n","  Predictionname[ipred] = 'Next ' + Predictionbasicname[ipred]\n","  if FuturedPred[ipred] >= 0:\n","    extrastring = ' Explicit Futures Added '   \n","  print(str(ipred)+  ' Internal Property # ' + str(PredictionAverageValuesPointer[ipred]) + ' ' + Predictionname[ipred]\n","      + ' Weight ' + str(round(Predictionwgt[ipred],3)) + ' Day ' + str(Predictionday[ipred]) + extrastring )\n","\n","for ifuture in range(0,LengthFutures):\n","  for ipred in range(0,NumpredbasicperTime):\n","    if FuturedPred[ipred] >= 0:\n","      FuturedPosition = NumpredbasicperTime + NumpredFuturedperTime*ifuture + FuturedPred[ipred]\n","      Predictionname[FuturedPosition] = Predictionbasicname[ipred] + Futures[ifuture].name\n","      Predictionday[FuturedPosition] = Futures[ifuture].days[0]\n","      Predictionwgt[FuturedPosition] = Futures[ifuture].classweight\n","      Predictionnametype[FuturedPosition] = Predictionnametype[ipred]\n","      Predictionoldvalue[FuturedPosition] = Predictionoldvalue[ipred]\n","      Predictionnewvalue[FuturedPosition] = Predictionnewvalue[ipred]\n","      PredictionAverageValuesPointer[FuturedPosition] = NpropperTimeStatic + PredictionAverageValuesPointer[ipred]\n","      print(str(iprop)+  ' Internal Property # ' + str(PredictionAverageValuesPointer[FuturedPosition]) + ' ' + \n","        Predictionname[FuturedPosition] + ' Weight ' + str(round(Predictionwgt[FuturedPosition],3))\n","         + ' Day ' + str(Predictionday[FuturedPosition]) + ' This is Explicit Future' )\n","\n","Predictionnamelookup = {}\n","print(startbold + '\\nBasic Predicted Quantities' + resetfonts)\n","for i in range(0,Npredperseq):\n","  Predictionnamelookup[Predictionname[i]] = i\n","\n","  iprop = Predictionnewvalue[i]\n","  line = Predictionbasicname[iprop]\n","  line += ' Weight ' + str(round(Predictionwgt[i],4))\n","  if (iprop < NumpredFuturedperTime) or (iprop >= NumpredbasicperTime):\n","    line += ' Day= ' + str(Predictionday[i])\n","    line += ' Name ' + Predictionname[i]\n","  print(line)\n","\n","  # Note that only Predictionwgt and Predictionname defined for later addons"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1mPredictions Total 30 Basic 2 Of which futured are 2 Giving number explicit futures 28\u001b[0m\n","0 Internal Property # 0 Next Cases Weight 1.0 Day 1 Explicit Futures Added \n","1 Internal Property # 1 Next Deaths Weight 1.0 Day 1 Explicit Futures Added \n","13 Internal Property # 0 Cases1 Weight 1.0 Day 2 This is Explicit Future\n","13 Internal Property # 1 Deaths1 Weight 1.0 Day 2 This is Explicit Future\n","13 Internal Property # 0 Cases2 Weight 1.0 Day 3 This is Explicit Future\n","13 Internal Property # 1 Deaths2 Weight 1.0 Day 3 This is Explicit Future\n","13 Internal Property # 0 Cases3 Weight 1.0 Day 4 This is Explicit Future\n","13 Internal Property # 1 Deaths3 Weight 1.0 Day 4 This is Explicit Future\n","13 Internal Property # 0 Cases4 Weight 1.0 Day 5 This is Explicit Future\n","13 Internal Property # 1 Deaths4 Weight 1.0 Day 5 This is Explicit Future\n","13 Internal Property # 0 Cases5 Weight 1.0 Day 6 This is Explicit Future\n","13 Internal Property # 1 Deaths5 Weight 1.0 Day 6 This is Explicit Future\n","13 Internal Property # 0 Cases6 Weight 1.0 Day 7 This is Explicit Future\n","13 Internal Property # 1 Deaths6 Weight 1.0 Day 7 This is Explicit Future\n","13 Internal Property # 0 Cases7 Weight 1.0 Day 8 This is Explicit Future\n","13 Internal Property # 1 Deaths7 Weight 1.0 Day 8 This is Explicit Future\n","13 Internal Property # 0 Cases8 Weight 1.0 Day 9 This is Explicit Future\n","13 Internal Property # 1 Deaths8 Weight 1.0 Day 9 This is Explicit Future\n","13 Internal Property # 0 Cases9 Weight 1.0 Day 10 This is Explicit Future\n","13 Internal Property # 1 Deaths9 Weight 1.0 Day 10 This is Explicit Future\n","13 Internal Property # 0 Cases10 Weight 1.0 Day 11 This is Explicit Future\n","13 Internal Property # 1 Deaths10 Weight 1.0 Day 11 This is Explicit Future\n","13 Internal Property # 0 Cases11 Weight 1.0 Day 12 This is Explicit Future\n","13 Internal Property # 1 Deaths11 Weight 1.0 Day 12 This is Explicit Future\n","13 Internal Property # 0 Cases12 Weight 1.0 Day 13 This is Explicit Future\n","13 Internal Property # 1 Deaths12 Weight 1.0 Day 13 This is Explicit Future\n","13 Internal Property # 0 Cases13 Weight 1.0 Day 14 This is Explicit Future\n","13 Internal Property # 1 Deaths13 Weight 1.0 Day 14 This is Explicit Future\n","13 Internal Property # 0 Cases14 Weight 1.0 Day 15 This is Explicit Future\n","13 Internal Property # 1 Deaths14 Weight 1.0 Day 15 This is Explicit Future\n","\u001b[1m\n","Basic Predicted Quantities\u001b[0m\n","Cases Weight 1.0 Day= 1 Name Next Cases\n","Deaths Weight 1.0 Day= 1 Name Next Deaths\n","Cases Weight 1.0 Day= 2 Name Cases1\n","Deaths Weight 1.0 Day= 2 Name Deaths1\n","Cases Weight 1.0 Day= 3 Name Cases2\n","Deaths Weight 1.0 Day= 3 Name Deaths2\n","Cases Weight 1.0 Day= 4 Name Cases3\n","Deaths Weight 1.0 Day= 4 Name Deaths3\n","Cases Weight 1.0 Day= 5 Name Cases4\n","Deaths Weight 1.0 Day= 5 Name Deaths4\n","Cases Weight 1.0 Day= 6 Name Cases5\n","Deaths Weight 1.0 Day= 6 Name Deaths5\n","Cases Weight 1.0 Day= 7 Name Cases6\n","Deaths Weight 1.0 Day= 7 Name Deaths6\n","Cases Weight 1.0 Day= 8 Name Cases7\n","Deaths Weight 1.0 Day= 8 Name Deaths7\n","Cases Weight 1.0 Day= 9 Name Cases8\n","Deaths Weight 1.0 Day= 9 Name Deaths8\n","Cases Weight 1.0 Day= 10 Name Cases9\n","Deaths Weight 1.0 Day= 10 Name Deaths9\n","Cases Weight 1.0 Day= 11 Name Cases10\n","Deaths Weight 1.0 Day= 11 Name Deaths10\n","Cases Weight 1.0 Day= 12 Name Cases11\n","Deaths Weight 1.0 Day= 12 Name Deaths11\n","Cases Weight 1.0 Day= 13 Name Cases12\n","Deaths Weight 1.0 Day= 13 Name Deaths12\n","Cases Weight 1.0 Day= 14 Name Cases13\n","Deaths Weight 1.0 Day= 14 Name Deaths13\n","Cases Weight 1.0 Day= 15 Name Cases14\n","Deaths Weight 1.0 Day= 15 Name Deaths14\n"]}]},{"cell_type":"markdown","metadata":{"id":"4V0SXGd-nVfX"},"source":["### Set up Predictions \n","\n","first for time arrays; we will extend to sequences next. Sequences include the predictions for final time in sequence.\n","\n","This is prediction for sequence ending one day before the labelling time index. So sequence must end one unit before last time value\n","\n","Note this is  \"pure forecast\" which are of quantities used in driving data allowing us to iitialize prediction to input\n","\n","NaN represents non existent data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"kXMefJVkkFL7","executionInfo":{"status":"ok","timestamp":1642448937092,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"158ddcf3-cf69-4d15-d210-a3a84edd280e"},"source":["if PredictionsfromInputs:\n","  InputPredictionsbyTime = np.zeros([Num_Time, Nloc, Npredperseq], dtype = np.float32)\n","  for ipred in range (0,NumpredbasicperTime):\n","    if Predictionnametype[ipred] == 'Dynamic':\n","      InputPredictionsbyTime[:,:,ipred] = NormedDynamicPropertyTimeSeries[:,:,Predictionoldvalue[ipred]]\n","    else:\n","      InputPredictionsbyTime[:,:,ipred] = NormedCalculatedTimeSeries[:,:,Predictionoldvalue[ipred]]\n","\n","  # Add Futures based on Futured properties\n","  if LengthFutures > 0:\n","    NaNall = np.full([Nloc],NaN,dtype = np.float32)\n","    daystartveto = 0\n","    atendveto = 0\n","    allok = NumpredbasicperTime \n","    for ifuture in range(0,LengthFutures):\n","      for itime in range(0,Num_Time):\n","        ActualTime = itime+Futures[ifuture].days[0]-1\n","        if ActualTime >= Num_Time:\n","          for ipred in range (0,NumpredbasicperTime):\n","            Putithere = FuturedPred[ipred]\n","            if Putithere >=0:\n","              InputPredictionsbyTime[itime,:,NumpredbasicperTime + NumpredFuturedperTime*ifuture + Putithere] = NaNall\n","          atendveto +=1\n","        elif Usedaystart and (itime < Futures[ifuture].daystart):\n","          for ipred in range (0,NumpredbasicperTime):\n","            Putithere = FuturedPred[ipred]\n","            if Putithere >=0:\n","              InputPredictionsbyTime[itime,:,NumpredbasicperTime + NumpredFuturedperTime*ifuture + Putithere] = NaNall \n","          daystartveto +=1     \n","        else:\n","          for ipred in range (0,NumpredbasicperTime):\n","            Putithere = FuturedPred[ipred]\n","            if Putithere >=0:\n","              if Predictionnametype[ipred] == 'Dynamic':\n","                InputPredictionsbyTime[itime,:,NumpredbasicperTime + NumpredFuturedperTime*ifuture + Putithere] \\\n","                  = NormedDynamicPropertyTimeSeries[ActualTime,:,Predictionoldvalue[ipred]]\n","              else:\n","                InputPredictionsbyTime[itime,:,NumpredbasicperTime + NumpredFuturedperTime*ifuture + Putithere] \\\n","                  = NormedCalculatedTimeSeries[ActualTime,:,Predictionoldvalue[ipred]]\n","          allok += NumpredFuturedperTime\n","    print(startbold + 'Futures Added: Predictions set from inputs OK ' +str(allok) + \n","          ' Veto at end ' + str(atendveto) +  ' Veto at start ' + str(daystartveto) + ' Times number of locations' + resetfonts)\n","\n","\n"," "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1mFutures Added: Predictions set from inputs OK 13456 Veto at end 105 Veto at start 0 Times number of locations\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"VlGIiaIWIrYm"},"source":["### Clean-up Input quantities#################"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":86},"id":"0Gq6G5JjIw_g","executionInfo":{"status":"ok","timestamp":1642448937469,"user_tz":300,"elapsed":382,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"e2d005b6-0b32-4713-87da-7b47dd8b9708"},"source":["def checkNaN(y):\n","  countNaN = 0\n","  countnotNaN = 0\n","  ctprt = 0\n","  if y is None:\n","    return\n","  if len(y.shape) == 2:\n","    for i in range(0,y.shape[0]):\n","        for j in range(0,y.shape[1]):\n","            if(np.math.isnan(y[i,j])):\n","                countNaN += 1\n","            else:\n","                countnotNaN += 1\n","  else:\n","    for i in range(0,y.shape[0]):\n","      for j in range(0,y.shape[1]):\n","        for k in range(0,y.shape[2]):\n","          if(np.math.isnan(y[i,j,k])):\n","              countNaN += 1\n","              ctprt += 1\n","              print(str(i) + ' ' + str(j) + ' ' + str(k))\n","              if ctprt > 10:\n","                sys.exit(0)\n","          else:\n","              countnotNaN += 1\n","\n","  percent = (100.0*countNaN)/(countNaN + countnotNaN)\n","  print(' is NaN ',str(countNaN),' percent ',str(round(percent,2)),' not NaN ', str(countnotNaN))\n","\n","# Clean-up Input Source\n","if len(InputSource) > 0: \n","  PropertyNameIndex = NewPropertyNameIndex\n","  NewPropertyNameIndex = None\n","  PropertyAverageValuesPointer = NewPropertyAverageValuesPointer\n","  NewPropertyAverageValuesPointer = None\n","\n","  NormedInputStaticProps = NewNormedInputStaticProps\n","  NewNormedInputStaticProps = None\n","  NormedDynamicPropertyTimeSeries = NewNormedDynamicPropertyTimeSeries\n","  NewNormedDynamicPropertyTimeSeries = None\n","\n","  NpropperTime = NewNpropperTime\n","  NpropperTimeStatic = NewNpropperTimeStatic\n","  NpropperTimeDynamic = NewNpropperTimeDynamic\n","\n","print('Static Properties')\n","if NpropperTimeStatic > 0 :\n","  checkNaN(NormedInputStaticProps)\n","else:\n","  print(' None Defined')\n","print('Dynamic Properties')\n","\n","checkNaN(NormedDynamicPropertyTimeSeries)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Static Properties\n"," None Defined\n","Dynamic Properties\n"," is NaN  0  percent  0.0  not NaN  539728\n"]}]},{"cell_type":"markdown","metadata":{"id":"5eRJTbE7ypBX"},"source":["###Covid Data: Agree on Tseq Sequence Length"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"xJLbkWv6xSoV","executionInfo":{"status":"ok","timestamp":1642448937469,"user_tz":300,"elapsed":4,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"343f2b79-3500-4008-8726-d4610c863676"},"source":["if ReadAugust2020Covid or RereadMay2020:\n","  Tseq = 9\n","if ReadJan2021Covid or ReadAugust2020Covid or ReadApril2021Covid or ReadDecember2021:\n","  Tseq = 13"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"VZyZD9mEio0z"},"source":["###Setup Sequences and TFTConversion"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"kTQVBsqmix8O","executionInfo":{"status":"ok","timestamp":1642448937469,"user_tz":300,"elapsed":3,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"b8b4e978-e181-4d93-839f-7209c204f17c"},"source":["Num_SeqExtraUsed = Tseq-1\n","Num_Seq = Num_Time - Tseq\n","Num_SeqPred = Num_Seq\n","TSeqPred = Tseq\n","TFTExtraTimes = 0\n","Num_TimeTFT = Num_Time\n","if TFTConversion:\n","  TFTExtraTimes = 1 + LengthFutures\n","  SymbolicWindows = True\n","  Num_SeqExtraUsed = Tseq # as last position needed in input\n","  Num_TimeTFT = Num_Time +TFTExtraTimes\n","  Num_SeqPred = Num_Seq\n","  TseqPred = Tseq\n","\n","# If SymbolicWindows, sequences are not made but we use same array with that dimension (RawInputSeqDimension) set to 1\n","# reshape can get rid of this irrelevant dimension\n","# Predictions and Input Properties are associated with sequence number which is first time value used in sequence\n","# if SymbolicWindows false then sequences are labelled by sequence # and contain time values from sequence # to sequence# + Tseq-1\n","# if SymbolicWindows True then sequences are labelled by time # and contain one value. They are displaced by Tseq\n","# If TFT Inputs and Predictions do NOT differ by Tseq\n","# Num_SeqExtra extra positions in RawInputSequencesTOT for Symbolic windows True as need to store full window\n","# TFTExtraTimes are extra times\n","RawInputSeqDimension = Tseq\n","Num_SeqExtra = 0\n","if SymbolicWindows:\n","  RawInputSeqDimension = 1\n","  Num_SeqExtra =  Num_SeqExtraUsed\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"XYgeVR4S11pc"},"source":["###Generate Sequences from Time labelled data \n","given Tseq set above"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"KUnmDWwS3Iai","executionInfo":{"status":"ok","timestamp":1642448937851,"user_tz":300,"elapsed":385,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"8b883cc5-a253-457e-b1af-9bfc49dd75dd"},"source":["if GenerateSequences:\n","  UseProperties = np.full(NpropperTime, True, dtype=np.bool)\n","  if Hydrology:\n","    UseProperties[NpropperTime-1] = False\n","  Npropperseq = 0\n","  IndexintoPropertyArrays = np.empty(NpropperTime, dtype = np.int)\n","  for iprop in range(0,NpropperTime):\n","    if UseProperties[iprop]:\n","      IndexintoPropertyArrays[Npropperseq] = iprop\n","      Npropperseq +=1\n","  RawInputSequences = np.zeros([Num_Seq + Num_SeqExtra, Nloc, RawInputSeqDimension, Npropperseq], dtype =np.float32)\n","  RawInputPredictions = np.zeros([Num_SeqPred, Nloc, Npredperseq], dtype =np.float32)\n","\n","  locationarray = np.empty(Nloc, dtype=np.float32)\n","  for iseq in range(0,Num_Seq  + Num_SeqExtra):\n","    for windowposition in range(0,RawInputSeqDimension):\n","      itime = iseq + windowposition\n","      for usedproperty  in range (0,Npropperseq):\n","        iprop = IndexintoPropertyArrays[usedproperty]\n","        if iprop>=NpropperTimeStatic:\n","          jprop =iprop-NpropperTimeStatic\n","          locationarray = NormedDynamicPropertyTimeSeries[itime,:,jprop]\n","        else:\n","          locationarray = NormedInputStaticProps[:,iprop]\n","        RawInputSequences[iseq,:,windowposition,usedproperty] = locationarray\n","    if iseq < Num_SeqPred:\n","      RawInputPredictions[iseq,:,:] = InputPredictionsbyTime[iseq+TseqPred,:,:]\n","  print(startbold + 'Sequences set from Time values Num Seq ' + str(Num_SeqPred) + ' Time ' +str(Num_Time) + resetfonts)  \n","\n","NormedInputTimeSeries = None\n","NormedDynamicPropertyTimeSeries = None\n","if GarbageCollect:\n","  gc.collect()\n","\n","GlobalTimeMask = np.empty([1,1,1,Tseq,Tseq],dtype =np.float32)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1mSequences set from Time values Num Seq 475 Time 488\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"lprQwdZFby5Y"},"source":["### Define Possible Temporal and Spatial Positional Encodings"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"Tu9Oy46Nb4LO","executionInfo":{"status":"ok","timestamp":1642448938344,"user_tz":300,"elapsed":496,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"0d95f3e9-a1d0-4ab7-b9e5-dcd8f2d1896d"},"source":["def LinearLocationEncoding(TotalLoc):\n","  linear = np.empty(TotalLoc, dtype=float)\n","  for i in range(0,TotalLoc):\n","    linear[i] = float(i)/float(TotalLoc)\n","  return linear\n","\n","def LinearTimeEncoding(Dateslisted):\n","  Firstdate = Dateslisted[0]\n","  numtofind = len(Dateslisted)\n","  dayrange = (Dateslisted[numtofind-1]-Firstdate).days + 1\n","  linear = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    linear[i] = float((Dateslisted[i]-Firstdate).days)/float(dayrange)\n","  return linear\n","\n","def P2TimeEncoding(numtofind):\n","  P2 = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    x =  -1 + 2.0*i/(numtofind-1)\n","    P2[i] = 0.5*(3*x*x-1)\n","  return P2\n","\n","def P3TimeEncoding(numtofind):\n","  P3 = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    x =  -1 + 2.0*i/(numtofind-1)\n","    P3[i] = 0.5*(5*x*x-3)*x\n","  return P3\n","\n","def P4TimeEncoding(numtofind):\n","  P4 = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    x =  -1 + 2.0*i/(numtofind-1)\n","    P4[i] = 0.125*(35*x*x*x*x - 30*x*x + 3)\n","  return P4\n","\n","def WeeklyTimeEncoding(Dateslisted):\n","  numtofind = len(Dateslisted)\n","  costheta = np.empty(numtofind, dtype=float)\n","  sintheta = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    j = Dateslisted[i].date().weekday()\n","    theta = float(j)*2.0*math.pi/7.0\n","    costheta[i] = math.cos(theta)\n","    sintheta[i] = math.sin(theta)\n","  return costheta, sintheta\n","\n","def AnnualTimeEncoding(Dateslisted): \n","  numtofind = len(Dateslisted)\n","  costheta = np.empty(numtofind, dtype=float)\n","  sintheta = np.empty(numtofind, dtype=float)\n","  for i in range(0,numtofind):\n","    runningdate = Dateslisted[i]\n","    year = runningdate.year\n","    datebeginyear = datetime(year, 1, 1)\n","    displacement = (runningdate-datebeginyear).days\n","    daysinyear = (datetime(year,12,31)-datebeginyear).days+1\n","    if displacement >= daysinyear:\n","      printexit(\"EXIT Bad Date \", runningdate)\n","    theta = float(displacement)*2.0*math.pi/float(daysinyear)\n","    costheta[i] = math.cos(theta)\n","    sintheta[i] = math.sin(theta)\n","  return costheta, sintheta\n","\n","def ReturnEncoding(numtofind,Typeindex, Typevalue):\n","  Dummy = costheta = np.empty(0, dtype=float)\n","  if Typeindex == 1:\n","    return LinearoverLocationEncoding, Dummy, ('LinearSpace',0.,1.0,0.5,0.2887), ('Dummy',0.,0.,0.,0.)\n","  if Typeindex == 2:\n","    if Dailyunit == 1:\n","      return CosWeeklytimeEncoding, SinWeeklytimeEncoding, ('CosWeekly',-1.0, 1.0, 0.,0.7071), ('SinWeekly',-1.0, 1.0, 0.,0.7071)\n","    else:\n","      return Dummy, Dummy, ('Dummy',0.,0.,0.,0.), ('Dummy',0.,0.,0.,0.)\n","  if Typeindex == 3:\n","    return CosAnnualtimeEncoding, SinAnnualtimeEncoding, ('CosAnnual',-1.0, 1.0, 0.,0.7071), ('SinAnnual',-1.0, 1.0, 0.,0.7071)\n","  if Typeindex == 4:\n","    if Typevalue == 0:\n","      ConstArray = np.full(numtofind,0.5, dtype = float)\n","      return ConstArray, Dummy, ('Constant',0.5,0.5,0.5,0.0), ('Dummy',0.,0.,0.,0.)\n","    if Typevalue == 1:\n","      return LinearovertimeEncoding, Dummy, ('LinearTime',0., 1.0, 0.5,0.2887), ('Dummy',0.,0.,0.,0.)\n","    if Typevalue == 2:\n","      return P2TimeEncoding(numtofind), Dummy, ('P2-Time',-1.0, 1.0, 0.,0.4472), ('Dummy',0.,0.,0.,0.)\n","    if Typevalue == 3:\n","      return P3TimeEncoding(numtofind), Dummy, ('P3-Time',-1.0, 1.0, 0.,0.3780), ('Dummy',0.,0.,0.,0.)\n","    if Typevalue == 4:\n","      return P4TimeEncoding(numtofind), Dummy, ('P4-Time',-1.0, 1.0, 0.,0.3333), ('Dummy',0.,0.,0.,0.)\n","  if Typeindex == 5:\n","      costheta = np.empty(numtofind, dtype=float)\n","      sintheta = np.empty(numtofind, dtype=float)\n","      j = 0\n","      for i in range(0,numtofind):\n","        theta = float(j)*2.0*math.pi/Typevalue\n","        costheta[i] = math.cos(theta)\n","        sintheta[i] = math.sin(theta)\n","        j += 1\n","        if j >= Typevalue:\n","          j = 0\n","      return costheta, sintheta,('Cos '+str(Typevalue)+ ' Len',-1.0, 1.0,0.,0.7071), ('Sin '+str(Typevalue)+ ' Len',-1.0, 1.0,0.,0.7071)\n","\n","# Dates set up in Python datetime format as Python LISTS\n","# All encodings are Numpy arrays\n","print(\"Total number of Time Units \" + str(NumberofTimeunits) + ' ' + TimeIntervalUnitName)\n","if NumberofTimeunits != (Num_Seq + Tseq):\n","  printexit(\"EXIT Wrong Number of Time Units \" + str(Num_Seq + Tseq))\n","\n","Dateslist = []\n","for i in range(0,NumberofTimeunits + TFTExtraTimes):\n","  Dateslist.append(InitialDate+timedelta(days=i*Dailyunit))\n","\n","LinearoverLocationEncoding = LinearLocationEncoding(Nloc)\n","LinearovertimeEncoding = LinearTimeEncoding(Dateslist)\n","\n","if Dailyunit == 1:\n","  CosWeeklytimeEncoding, SinWeeklytimeEncoding = WeeklyTimeEncoding(Dateslist)\n","CosAnnualtimeEncoding, SinAnnualtimeEncoding = AnnualTimeEncoding(Dateslist)\n","\n","\n","# Encodings\n","\n","# linearlocationposition\n","# Supported Time Dependent Probes that can be in properties and/or predictions\n","# Special\n","# Annual\n","# Weekly\n","# \n","# Top Down\n","# TD0 Constant at 0.5\n","# TD1 Linear from 0 to 1\n","# TD2 P2(x) where x goes from -1 to 1 as time goes from start to end\n","# \n","# Bottom Up\n","# n-way Cos and sin theta where n = 4 7 8 16 24 32\n","\n","EncodingTypes = {'Spatial':1, 'Weekly':2,'Annual':3,'TopDown':4,'BottomUp':5}\n","\n","PropIndex =[]\n","PropNameMeanStd = []\n","PropMeanStd = []\n","PropArray = []\n","PropPosition = []\n","\n","PredIndex =[]\n","PredNameMeanStd = []\n","PredArray = []\n","PredPosition = []\n","\n","Numberpropaddons = 0\n","propposition = Npropperseq\n","Numberpredaddons = 0\n","predposition = Npredperseq\n","\n","numprop = len(PropTypes)\n","if numprop != len(PropValues):\n","  printexit('Error in property addons ' + str(numprop) + ' ' + str(len(PropValues)))\n","for newpropinlist in range(0,numprop):\n","  Typeindex = EncodingTypes[PropTypes[newpropinlist]]\n","  a,b,c,d = ReturnEncoding(Num_Time + TFTExtraTimes,Typeindex, PropValues[newpropinlist])\n","  if c[0] != 'Dummy':\n","    PropIndex.append(Typeindex)\n","    PropNameMeanStd.append(c)\n","    InputPropertyNames.append(c[0])\n","    PropArray.append(a)\n","    PropPosition.append(propposition)\n","    propposition += 1\n","    Numberpropaddons += 1\n","    line = ' '\n","    for ipr in range(0,20):\n","      line += str(round(a[ipr],4)) + ' '\n","#    print('c'+line)\n","  if d[0] != 'Dummy':\n","    PropIndex.append(Typeindex)\n","    PropNameMeanStd.append(d)\n","    InputPropertyNames.append(d[0])\n","    PropArray.append(b)\n","    PropPosition.append(propposition)\n","    propposition += 1\n","    Numberpropaddons += 1\n","    line = ' '\n","    for ipr in range(0,20):\n","      line += str(round(b[ipr],4)) + ' '\n","#    print('d'+line)\n","\n","numpred = len(PredTypes)\n","if numpred != len(PredValues):\n","  printexit('Error in prediction addons ' + str(numpred) + ' ' + str(len(PredValues)))\n","for newpredinlist in range(0,numpred):\n","  Typeindex = EncodingTypes[PredTypes[newpredinlist]]\n","  a,b,c,d = ReturnEncoding(Num_Time + TFTExtraTimes,Typeindex, PredValues[newpredinlist])\n","  if c[0] != 'Dummy':\n","    PredIndex.append(Typeindex)\n","    PredNameMeanStd.append(c)\n","    PredArray.append(a)\n","    Predictionname.append(c[0])\n","    Predictionnamelookup[c] = predposition\n","    PredPosition.append(predposition)\n","    predposition += 1\n","    Numberpredaddons += 1\n","    Predictionwgt.append(0.25)\n","  if d[0] != 'Dummy':\n","    PredIndex.append(Typeindex)\n","    PredNameMeanStd.append(d)\n","    PredArray.append(b)\n","    Predictionname.append(d[0])\n","    Predictionnamelookup[d[0]] = predposition\n","    PredPosition.append(predposition)\n","    predposition += 1\n","    Numberpredaddons += 1\n","    Predictionwgt.append(0.25)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Total number of Time Units 488 Day\n"]}]},{"cell_type":"markdown","metadata":{"id":"ANMrg0vjoPxS"},"source":["### Add in Temporal and Spatial Encoding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1009},"id":"I977Ffv_obEC","executionInfo":{"status":"ok","timestamp":1642448938780,"user_tz":300,"elapsed":443,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2ef179bc-09b3-4149-c811-d279d187f7ac"},"source":["def SetNewAverages(InputList): # name min max mean std\n","  results = np.empty(7, dtype = np.float32)\n","  results[0] = InputList[1]\n","  results[1] = InputList[2]\n","  results[2] = 1.0\n","  results[3] = InputList[3]\n","  results[4] = InputList[4]\n","  results[5] = InputList[3]\n","  results[6] = InputList[4]\n","  return results\n","\n","\n","NpropperseqTOT = Npropperseq + Numberpropaddons\n","\n","# These include both Property and Prediction Variables\n","NpropperTimeMAX =len(QuantityTakeroot)\n","NewNpropperTimeMAX = NpropperTimeMAX + Numberpropaddons + Numberpredaddons  \n","NewQuantityStatistics = np.zeros([NewNpropperTimeMAX,7], dtype=np.float32)\n","NewQuantityTakeroot = np.full(NewNpropperTimeMAX,1,dtype=np.int) # All new ones aare 1 and are set here\n","NewQuantityStatistics[0:NpropperTimeMAX,:] = QuantityStatistics[0:NpropperTimeMAX,:]\n","NewQuantityTakeroot[0:NpropperTimeMAX] = QuantityTakeroot[0:NpropperTimeMAX]\n","\n","# Lookup for property names\n","NewPropertyNameIndex = np.empty(NpropperseqTOT, dtype = np.int32)\n","NumberofNames = len(InputPropertyNames)-Numberpropaddons\n","NewPropertyNameIndex[0:Npropperseq] = PropertyNameIndex[0:Npropperseq]\n","\n","NewPropertyAverageValuesPointer = np.empty(NpropperseqTOT, dtype = np.int32)\n","NewPropertyAverageValuesPointer[0:Npropperseq] = PropertyAverageValuesPointer[0:Npropperseq]\n","\n","for propaddons in range(0,Numberpropaddons):\n","  NewPropertyNameIndex[Npropperseq+propaddons] = NumberofNames + propaddons\n","  NewPropertyAverageValuesPointer[Npropperseq+propaddons] = NpropperTimeMAX + propaddons\n","  NewQuantityStatistics[NpropperTimeMAX + propaddons,:] = SetNewAverages(PropNameMeanStd[propaddons])\n","\n","# Set extra Predictions metadata for Sequences\n","NpredperseqTOT = Npredperseq + Numberpredaddons\n","\n","NewPredictionAverageValuesPointer = np.empty(NpredperseqTOT, dtype = np.int32)\n","NewPredictionAverageValuesPointer[0:Npredperseq] = PredictionAverageValuesPointer[0:Npredperseq]\n","\n","for predaddons in range(0,Numberpredaddons):\n","  NewPredictionAverageValuesPointer[Npredperseq +predaddons] = NpropperTimeMAX + +Numberpropaddons + predaddons\n","  NewQuantityStatistics[NpropperTimeMAX + Numberpropaddons + predaddons,:] = SetNewAverages(PredNameMeanStd[predaddons])\n","\n","RawInputSequencesTOT = np.empty([Num_Seq  + Num_SeqExtra + TFTExtraTimes, Nloc, RawInputSeqDimension, NpropperseqTOT], dtype =np.float32)\n","flsize = np.float(Num_Seq  + Num_SeqExtra)*np.float(Nloc)*np.float(RawInputSeqDimension)* np.float(NpropperseqTOT)* 4.0\n","print('Total storage ' +str(round(flsize,0)) + ' Bytes')\n","\n","for i in range(0,Num_Seq  + Num_SeqExtra):\n","  for iprop in range(0,Npropperseq):\n","    RawInputSequencesTOT[i,:,:,iprop] = RawInputSequences[i,:,:,iprop]\n","for i in range(Num_Seq  + Num_SeqExtra,Num_Seq  + Num_SeqExtra + TFTExtraTimes):\n","  for iprop in range(0,Npropperseq):\n","    RawInputSequencesTOT[i,:,:,iprop] = NaN\n","\n","for i in range(0,Num_Seq  + Num_SeqExtra + TFTExtraTimes):\n","    for k in range(0,RawInputSeqDimension):\n","      for iprop in range(0, Numberpropaddons):\n","        if PropIndex[iprop] == 1:\n","          continue\n","        RawInputSequencesTOT[i,:,k,PropPosition[iprop]] = PropArray[iprop][i+k]\n","\n","for iprop in range(0, Numberpropaddons):\n","  if PropIndex[iprop] == 1:\n","    for j in range(0,Nloc):       \n","        RawInputSequencesTOT[:,j,:,PropPosition[iprop]] = PropArray[iprop][j]\n","\n","# Set extra Predictions for Sequences\n","RawInputPredictionsTOT = np.empty([Num_SeqPred + TFTExtraTimes, Nloc, NpredperseqTOT], dtype =np.float32)\n","\n","for i in range(0,Num_SeqPred):\n","  for ipred in range(0,Npredperseq):\n","    RawInputPredictionsTOT[i,:,ipred] = RawInputPredictions[i,:,ipred]\n","for i in range(Num_SeqPred, Num_SeqPred + TFTExtraTimes):\n","  for ipred in range(0,Npredperseq):\n","    RawInputPredictionsTOT[i,:,ipred] = NaN\n","\n","for i in range(0,Num_SeqPred + TFTExtraTimes):\n","  for ipred in range(0, Numberpredaddons):\n","    if PredIndex[ipred] == 1:\n","      continue\n","    actualarray = PredArray[ipred]\n","    RawInputPredictionsTOT[i,:,PredPosition[ipred]] = actualarray[i+TseqPred]\n","\n","for ipred in range(0, Numberpredaddons):\n","  if PredIndex[ipred] == 1:\n","    for j in range(0,Nloc):\n","      RawInputPredictionsTOT[:,j,PredPosition[ipred]] = PredArray[ipred][j]\n","\n","PropertyNameIndex  = None\n","PropertyNameIndex = NewPropertyNameIndex\n","QuantityStatistics = None\n","QuantityStatistics = NewQuantityStatistics\n","QuantityTakeroot = None\n","QuantityTakeroot = NewQuantityTakeroot\n","PropertyAverageValuesPointer = None\n","PropertyAverageValuesPointer = NewPropertyAverageValuesPointer\n","PredictionAverageValuesPointer = None\n","PredictionAverageValuesPointer = NewPredictionAverageValuesPointer\n","\n","print('Time and Space encoding added to input and predictions')\n","\n","if SymbolicWindows:\n","  SymbolicInputSequencesTOT = np.empty([Num_Seq, Nloc], dtype =np.int32) # This is sequences\n","  for iseq in range(0,Num_Seq):\n","    for iloc in range(0,Nloc):\n","      SymbolicInputSequencesTOT[iseq,iloc] = np.left_shift(iseq,16) + iloc\n","  ReshapedSequencesTOT = np.transpose(RawInputSequencesTOT,(1,0,3,2))\n","  ReshapedSequencesTOT = np.reshape(ReshapedSequencesTOT,(Nloc,Num_Seq  + Num_SeqExtra + TFTExtraTimes,NpropperseqTOT))\n","\n","# To calculate masks (identical to Symbolic windows)\n","SpacetimeforMask = np.empty([Num_Seq, Nloc], dtype =np.int32)\n","for iseq in range(0,Num_Seq):\n","  for iloc in range(0,Nloc):\n","    SpacetimeforMask[iseq,iloc] = np.left_shift(iseq,16) + iloc\n","    \n","print(PropertyNameIndex)\n","print(InputPropertyNames)\n","for iprop in range(0,NpropperseqTOT):\n","  print('Property ' + str(iprop) + ' ' + InputPropertyNames[PropertyNameIndex[iprop]])\n","for ipred in range(0,NpredperseqTOT):\n","  print('Prediction ' + str(ipred) + ' ' + Predictionname[ipred] + ' ' + str(round(Predictionwgt[ipred],3)))\n","\n","\n","\n","RawInputPredictions = None\n","RawInputSequences = None\n","if SymbolicWindows:\n","  RawInputSequencesTOT = None\n","if GarbageCollect:\n","  gc.collect()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Total storage 3392576.0 Bytes\n","Time and Space encoding added to input and predictions\n","[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21]\n","['Cases', 'Deaths', 'Age Distribution', 'Air Pollution', 'Comorbidities', 'Health Disparities', 'Mobility', 'Residential Density', 'Disease Spread', 'Social Distancing', 'Testing', 'Transmissible Cases', 'VaccinationOneDose', 'Vaccination', 'LinearSpace', 'Constant', 'LinearTime', 'P2-Time', 'P3-Time', 'P4-Time', 'CosWeekly', 'SinWeekly']\n","Property 0 Cases\n","Property 1 Deaths\n","Property 2 Age Distribution\n","Property 3 Air Pollution\n","Property 4 Comorbidities\n","Property 5 Health Disparities\n","Property 6 Mobility\n","Property 7 Residential Density\n","Property 8 Disease Spread\n","Property 9 Social Distancing\n","Property 10 Testing\n","Property 11 Transmissible Cases\n","Property 12 VaccinationOneDose\n","Property 13 Vaccination\n","Property 14 LinearSpace\n","Property 15 Constant\n","Property 16 LinearTime\n","Property 17 P2-Time\n","Property 18 P3-Time\n","Property 19 P4-Time\n","Property 20 CosWeekly\n","Property 21 SinWeekly\n","Prediction 0 Next Cases 1.0\n","Prediction 1 Next Deaths 1.0\n","Prediction 2 Cases1 1.0\n","Prediction 3 Deaths1 1.0\n","Prediction 4 Cases2 1.0\n","Prediction 5 Deaths2 1.0\n","Prediction 6 Cases3 1.0\n","Prediction 7 Deaths3 1.0\n","Prediction 8 Cases4 1.0\n","Prediction 9 Deaths4 1.0\n","Prediction 10 Cases5 1.0\n","Prediction 11 Deaths5 1.0\n","Prediction 12 Cases6 1.0\n","Prediction 13 Deaths6 1.0\n","Prediction 14 Cases7 1.0\n","Prediction 15 Deaths7 1.0\n","Prediction 16 Cases8 1.0\n","Prediction 17 Deaths8 1.0\n","Prediction 18 Cases9 1.0\n","Prediction 19 Deaths9 1.0\n","Prediction 20 Cases10 1.0\n","Prediction 21 Deaths10 1.0\n","Prediction 22 Cases11 1.0\n","Prediction 23 Deaths11 1.0\n","Prediction 24 Cases12 1.0\n","Prediction 25 Deaths12 1.0\n","Prediction 26 Cases13 1.0\n","Prediction 27 Deaths13 1.0\n","Prediction 28 Cases14 1.0\n","Prediction 29 Deaths14 1.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"B0FxRdZa81_Z"},"source":["###Set up NNSE"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"tdFW7f6l3Uo-","executionInfo":{"status":"ok","timestamp":1642448938780,"user_tz":300,"elapsed":3,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"a01ba967-aa7b-465a-842b-baa70c794e90"},"source":["#Set up NNSE Normalized Nash Sutcliffe Efficiency\n","CalculateNNSE = np.full(NpredperseqTOT, False, dtype = np.bool)\n","for ipred in range(0,NumpredbasicperTime):\n","  CalculateNNSE[ipred] = True\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"hytLQj7QW3gx"},"source":["## Location Based Validation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"s2g_-MHEhyGr","executionInfo":{"status":"ok","timestamp":1642448939018,"user_tz":300,"elapsed":240,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"8509bfbd-2502-439d-9674-d4a1f96e043b"},"source":["LocationBasedValidation = True\n","LocationValidationFraction = 0.0\n","RestartLocationBasedValidation = False\n","RestartRunName = RunName\n","RestartRunName = 'EARTHQN-Transformer3'\n","FullSetValidation = False\n","\n","global SeparateValandTrainingPlots\n","SeparateValandTrainingPlots = True\n","if not LocationBasedValidation:\n","  SeparateValandTrainingPlots = False\n","  LocationValidationFraction = 0.0\n","NlocValplusTraining = Nloc\n","ListofTrainingLocs = np.arange(Nloc, dtype = np.int32)\n","ListofValidationLocs = np.full(Nloc, -1, dtype = np.int32)\n","MappingtoTraining = np.arange(Nloc, dtype = np.int32)\n","MappingtoValidation = np.full(Nloc, -1, dtype = np.int32)\n","TrainingNloc = Nloc\n","ValidationNloc = 0\n","if LocationBasedValidation:\n","  if RestartLocationBasedValidation:\n","      InputFileName = APPLDIR + '/Validation' + RestartRunName\n","      with open(InputFileName, 'r', newline='') as inputfile:\n","        Myreader = reader(inputfile, delimiter=',')\n","        header = next(Myreader)\n","        LocationValidationFraction = np.float32(header[0])\n","        TrainingNloc = np.int32(header[1])\n","        ValidationNloc = np.int32(header[2])     \n","\n","        ListofTrainingLocs = np.empty(TrainingNloc, dtype = np.int32)\n","        ListofValidationLocs = np.empty(ValidationNloc,  dtype = np.int32)\n","        nextrow = next(Myreader)\n","        for iloc in range(0, TrainingNloc):\n","          ListofTrainingLocs[iloc] = np.int32(nextrow[iloc])\n","        nextrow = next(Myreader)\n","        for iloc in range(0, ValidationNloc):\n","          ListofValidationLocs[iloc] = np.int32(nextrow[iloc])\n","\n","      LocationTrainingfraction = 1.0 - LocationValidationFraction\n","      if TrainingNloc + ValidationNloc != Nloc:\n","        printexit('EXIT: Inconsistent location counts for Location Validation ' +str(Nloc)\n","          + ' ' + str(TrainingNloc) + ' ' + str(ValidationNloc))\n","      print(' Validation restarted Fraction ' +str(round(LocationValidationFraction,4)) + ' ' + RestartRunName)\n","\n","  else:\n","    LocationTrainingfraction = 1.0 - LocationValidationFraction\n","    TrainingNloc = math.ceil(LocationTrainingfraction*Nloc)\n","    ValidationNloc = Nloc - TrainingNloc\n","    np.random.shuffle(ListofTrainingLocs)\n","    ListofValidationLocs = ListofTrainingLocs[TrainingNloc:Nloc]\n","    ListofTrainingLocs = ListofTrainingLocs[0:TrainingNloc]\n","\n","  for iloc in range(0,TrainingNloc):\n","    jloc = ListofTrainingLocs[iloc]\n","    MappingtoTraining[jloc] = iloc\n","    MappingtoValidation[jloc] = -1\n","  for iloc in range(0,ValidationNloc):\n","    jloc = ListofValidationLocs[iloc]\n","    MappingtoValidation[jloc] = iloc\n","    MappingtoTraining[jloc] = -1\n","  if ValidationNloc <= 0:\n","    SeparateValandTrainingPlots = False\n","\n","  if not RestartLocationBasedValidation:\n","    OutputFileName = APPLDIR + '/Validation' + RunName\n","    with open(OutputFileName, 'w', newline='') as outputfile:\n","      Mywriter = writer(outputfile, delimiter=',')\n","      Mywriter.writerow([LocationValidationFraction, TrainingNloc, ValidationNloc] )\n","      Mywriter.writerow(ListofTrainingLocs)\n","      Mywriter.writerow(ListofValidationLocs)\n","\n","  print('Training Locations ' + str(TrainingNloc) + ' Validation Locations ' + str(ValidationNloc))\n","  if ValidationNloc <=0:\n","    LocationBasedValidation = False\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Training Locations 79 Validation Locations 0\n"]}]},{"cell_type":"markdown","metadata":{"id":"33FLmGmcilz5"},"source":["## LSTM Control Parameters"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"Ds28euHRi5vt","executionInfo":{"status":"ok","timestamp":1642448939019,"user_tz":300,"elapsed":18,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"94435942-9777-428e-c993-14dd7a05b207"},"source":["CustomLoss = 1         # Can be 0 1 4\n","UseClassweights = True\n","\n","PredictionTraining = False\n","\n","if (not Hydrology) and (not Earthquake) and (NpredperseqTOT <=2):\n","  useFutures = False\n","  CustomLoss = 0\n","  UseClassweights = False\n","\n","number_of_LSTMworkers = 1\n","LSTMepochs = 100\n","LSTMbatch_size = TrainingNloc\n","LSTMbatch_size = min(LSTMbatch_size, TrainingNloc)\n","\n","LSTMactivationvalue = \"selu\"\n","LSTMrecurrent_activation = \"sigmoid\"\n","LSTMoptimizer = 'adam'\n","LSTMdropout1=0.2\n","LSTMrecurrent_dropout1 = 0.2\n","LSTMdropout2=0.2\n","LSTMrecurrent_dropout2 = 0.2\n","number_LSTMnodes= 16\n","LSTMFinalMLP = 64\n","LSTMInitialMLP = 32\n","LSTMThirdLayer = False\n","\n","LSTMSkipInitial = False\n","LSTMverbose = 0\n","LSTMvalidationfrac = 0.0\n","UsedLSTMvalidationfrac = LSTMvalidationfrac\n","if LocationBasedValidation:\n","  UsedLSTMvalidationfrac = LocationBasedValidation\n","  LSTMvalidationfrac = UsedLSTMvalidationfrac\n","bestmethod = 2\n","if UsedLSTMvalidationfrac < 0.001:\n","    bestmethod = 1\n"," "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"dJFhD-nq0fO0"},"source":["## Important Parameters defining Transformer project"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"oOxm7gWkyjIj","executionInfo":{"status":"ok","timestamp":1642448939019,"user_tz":300,"elapsed":17,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"6bb47351-aebb-4ab3-b1b4-76b6389ff1d5"},"source":["ActivateAttention = False\n","DoubleQKV = False\n","TimeShufflingOnly = False\n","Transformerbatch_size = 1\n","Transformervalidationfrac = 0.0\n","UsedTransformervalidationfrac = 0.0\n","Transformerepochs = 200\n","Transformeroptimizer ='adam'\n","Transformerverbose = 0\n","TransformerOnlyFullAttention = True\n","d_model =64\n","d_Attention = 2 * d_model\n","if TransformerOnlyFullAttention:\n","  d_Attention = d_model\n","d_qk = d_model\n","d_intermediateqk = 2 * d_model\n","num_heads = 2\n","num_Encoderlayers = 2\n","EncoderDropout= 0.1\n","EncoderActivation = 'selu'\n","d_EncoderLayer = d_Attention\n","d_merge = d_model\n","d_ffn = 4*d_model\n","MaskingOption = 0\n","PeriodicInputTemporalEncoding = 7 # natural for COVID\n","LinearInputTemporalEncoding = -1 # natural for COVID\n","TransformerInputTemporalEncoding = 10000\n","UseTransformerInputTemporalEncoding = False"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"6CdCNdQ_yGWV"},"source":["## General Control Parameters"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"fwkXnZZGgJ_1","executionInfo":{"status":"ok","timestamp":1642448939644,"user_tz":300,"elapsed":642,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"6ac1d64a-136c-4173-d4b6-dae5eee459d5"},"source":["OuterBatchDimension = Num_Seq * TrainingNloc\n","IndividualPlots = True\n","Plotrealnumbers = True\n","PlotsOnlyinTestFIPS = True\n","ListofTestFIPS = map(str,list(FIPSintegerlookup.keys())[::1])\n","if Hydrology:\n","  ListofTestFIPS = ['6224000','6622700']\n","  ListofTestFIPS = ['','']\n","if Earthquake:\n","  ListofTestFIPS = ['','']\n","  Plotrealnumbers = True\n","\n","StartDate = np.datetime64(InitialDate).astype('datetime64[D]') + np.timedelta64(Tseq*Dailyunit + int(Dailyunit/2),'D')\n","if Earthquake: \n","  dayrange = np.timedelta64(Dailyunit,'D')\n","  CutoffDate = np.datetime64('1989-01-01')\n","  NumericalCutoff = math.floor((CutoffDate - StartDate)/dayrange)\n","else:\n","  NumericalCutoff = int(Num_Seq/2)\n","  CutoffDate = StartDate + np.timedelta64(NumericalCutoff*Dailyunit,'D')\n","print('Start ' + str(StartDate) + ' Cutoff ' + str(CutoffDate) + \" sequence index \" + str(NumericalCutoff))\n","\n","TimeCutLabel = [' All Time ',' Start ',' End ']"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Start 2020-03-13 Cutoff 2020-11-05 sequence index 237\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":139},"id":"4V88mmqms1pq","executionInfo":{"status":"ok","timestamp":1642448939646,"user_tz":300,"elapsed":10,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"fa0a8252-d53e-4a9e-81a3-240e55805a5f"},"source":["print(\"Size of sequence window Tseq \", str(Tseq))\n","print(\"Number of Sequences in time Num_Seq \", str(Num_Seq))\n","print(\"Number of locations Nloc \", str(Nloc))\n","print(\"Number of Training Sequences in Location and Time \", str(OuterBatchDimension))\n","print(\"Number of internal properties per sequence including static or dynamic Npropperseq \", str(Npropperseq))\n","print(\"Number of internal properties per sequence adding in explicit space-time encoding \", str(NpropperseqTOT))\n","print(\"Total number of predictions per sequence NpredperseqTOT \", str(NpredperseqTOT))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Size of sequence window Tseq  13\n","Number of Sequences in time Num_Seq  475\n","Number of locations Nloc  79\n","Number of Training Sequences in Location and Time  37525\n","Number of internal properties per sequence including static or dynamic Npropperseq  14\n","Number of internal properties per sequence adding in explicit space-time encoding  22\n","Total number of predictions per sequence NpredperseqTOT  30\n"]}]},{"cell_type":"markdown","metadata":{"id":"ikdmffIpA6AC"},"source":["## Useful Time series utilities"]},{"cell_type":"markdown","metadata":{"id":"g2QTzC0vnSGP"},"source":["### DLprediction\n","\n","Prediction and Visualization LSTM+Transformer"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"aarkiMHirB1S","executionInfo":{"status":"ok","timestamp":1642448940294,"user_tz":300,"elapsed":657,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d587017d-1aa7-4531-fa7d-3bbd97394d13"},"source":["\n","def DLprediction(Xin, yin, DLmodel, modelflag, TFTWeights, LabelFit =''):\n","  # modelflag = 0 LSTM = 1 Transformer\n","  # Input is the windows [Num_Seq] [Nloc] [Tseq] [NpropperseqTOT] (SymbolicWindows False)\n","  # Input is  the sequences [Nloc] [Num_Time-1] [NpropperseqTOT] (SymbolicWindows True)\n","  # Input Predictions are always [Num_Seq] [NLoc] [NpredperseqTOT]\n","    current_time = timenow()\n","    print(startbold + startred + current_time + ' ' + RunName + \" DLPrediction \" +RunComment + resetfonts)\n","\n","    FitPredictions = np.zeros([Num_Seq, Nloc, NpredperseqTOT], dtype =np.float32)\n","    # Compare to RawInputPredictionsTOT\n","\n","    RMSEbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    RMSETRAINbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    RMSEVALbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    RMSVbyclass = np.zeros([NpredperseqTOT], dtype=np.float64)\n","    AbsEbyclass = np.zeros([NpredperseqTOT], dtype=np.float64)\n","    AbsVbyclass = np.zeros([NpredperseqTOT], dtype=np.float64)\n","    ObsVbytimeandclass = np.zeros([Num_Seq, NpredperseqTOT], dtype=np.float64)\n","    Predbytimeandclass = np.zeros([Num_Seq, NpredperseqTOT], dtype=np.float64)\n","    countbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    countVALbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    countTRAINbyclass = np.zeros([NpredperseqTOT,3], dtype=np.float64)\n","    totalcount = 0\n","    overcount = 0\n","    weightedcount = 0.0\n","    weightedovercount = 0.0\n","    weightedrmse1 = 0.0\n","    weightedrmse1TRAIN = 0.0\n","    weightedrmse1VAL = 0.0\n","\n","    closs = 0.0\n","    dloss = 0.0\n","    eloss = 0.0\n","    floss = 0.0\n","    sw = np.empty([Nloc,NpredperseqTOT],dtype = np.float32)\n","    for iloc in range(0,Nloc):\n","      for k in range(0,NpredperseqTOT):\n","        sw[iloc,k] = Predictionwgt[k]\n","\n","    global tensorsw\n","    tensorsw = tf.convert_to_tensor(sw, np.float32)\n","    Ctime1 = 0.0\n","    Ctime2 = 0.0\n","    Ctime3 = 0.0\n","    samplebar = notebook.trange(Num_Seq,  desc='Predict loop', unit  = 'sequences')\n","    countingcalls = 0\n","\n","    for iseq in range(0, Num_Seq):\n","      StopWatch.start('label1')\n","      if SymbolicWindows:\n","        if modelflag == 2:\n","          InputVector = np.empty((Nloc,2), dtype = int)\n","          for iloc in range (0,Nloc):\n","            InputVector[iloc,0] = iloc\n","            InputVector[iloc,1] = iseq\n","        else:\n","          InputVector = Xin[:,iseq:iseq+Tseq,:]\n","      else:\n","        InputVector = Xin[iseq]\n","      Time = None\n","      if modelflag == 0:\n","        InputVector = np.reshape(InputVector,(-1,Tseq,NpropperseqTOT))\n","      elif modelflag == 1:\n","        InputVector = np.reshape(InputVector,(1,Tseq*Nloc,NpropperseqTOT))\n","        BasicTimes = np.full(Nloc,iseq, dtype=np.int32)\n","        Time = SetSpacetime(np.reshape(BasicTimes,(1,-1)))\n","      StopWatch.stop('label1')\n","      Ctime1 += StopWatch.get('label1', digits=4)\n","      \n","      StopWatch.start('label2')\n","      PredictedVector = DLmodel(InputVector, training = PredictionTraining, Time=Time)\n","      StopWatch.stop('label2')\n","      Ctime2 += StopWatch.get('label2', digits=4)\n","      StopWatch.start('label3')\n","      PredictedVector = np.reshape(PredictedVector,(Nloc,NpredperseqTOT))\n","      TrueVector = yin[iseq]\n","      functionval = numpycustom_lossGCF1(TrueVector,PredictedVector,sw)\n","      closs += functionval\n","      PredictedVector_t = tf.convert_to_tensor(PredictedVector)\n","      yin_t = tf.convert_to_tensor(TrueVector)\n","      dloss += weightedcustom_lossGCF1(yin_t,PredictedVector_t,tensorsw)\n","      eloss += custom_lossGCF1spec(yin_t,PredictedVector_t) \n","      OutputLoss = 0.0\n","      FitPredictions[iseq] = PredictedVector\n","      for iloc in range(0,Nloc):\n","        yy = yin[iseq,iloc]\n","        yyhat = PredictedVector[iloc]\n","\n","        sum1 = 0.0\n","        for i in range(0,NpredperseqTOT):\n","          overcount += 1\n","          weightedovercount += Predictionwgt[i]\n","\n","          if(math.isnan(yy[i])):\n","            continue\n","          weightedcount += Predictionwgt[i]\n","          totalcount += 1\n","          mse1 = ((yy[i]-yyhat[i])**2)\n","          mse = mse1*sw[iloc,i]\n","          if i < Npredperseq:\n","            floss += mse\n","          sum1 += mse\n","          AbsEbyclass[i] += abs(yy[i] - yyhat[i])\n","          RMSVbyclass[i] += yy[i]**2\n","          AbsVbyclass[i] += abs(yy[i])\n","          RMSEbyclass[i,0] += mse\n","          countbyclass[i,0] += 1.0\n","          if iseq < NumericalCutoff:\n","            countbyclass[i,1] += 1.0\n","            RMSEbyclass[i,1] += mse\n","          else:\n","            countbyclass[i,2] += 1.0\n","            RMSEbyclass[i,2] += mse\n","          if LocationBasedValidation:\n","            if MappingtoTraining[iloc] >= 0:\n","              RMSETRAINbyclass[i,0] += mse\n","              countTRAINbyclass[i,0] += 1.0\n","              if iseq < NumericalCutoff:\n","                RMSETRAINbyclass[i,1] += mse\n","                countTRAINbyclass[i,1] += 1.0\n","              else:\n","                RMSETRAINbyclass[i,2] += mse\n","                countTRAINbyclass[i,2] += 1.0\n","            if MappingtoValidation[iloc] >= 0:\n","              RMSEVALbyclass[i,0] += mse\n","              countVALbyclass[i,0] += 1.0\n","              if iseq < NumericalCutoff:\n","                RMSEVALbyclass[i,1] += mse\n","                countVALbyclass[i,1] += 1.0\n","              else:\n","                RMSEVALbyclass[i,2] += mse\n","                countVALbyclass[i,2] += 1.0\n","          ObsVbytimeandclass [iseq,i] += abs(yy[i])\n","          Predbytimeandclass [iseq,i] += abs(yyhat[i])\n","        weightedrmse1 += sum1\n","        if LocationBasedValidation:\n","          if MappingtoTraining[iloc] >= 0:\n","            weightedrmse1TRAIN += sum1\n","          if MappingtoValidation[iloc] >= 0:\n","            weightedrmse1VAL += sum1\n","        OutputLoss += sum1\n","      StopWatch.stop('label3')\n","      Ctime3 += StopWatch.get('label3', digits=4)\n","      OutputLoss /= Nloc\n","      countingcalls += 1\n","      samplebar.update(1)\n","      samplebar.set_postfix( Call = countingcalls, TotalLoss = OutputLoss)\n","\n","    print('Times ' + str(round(Ctime1,5))  + ' ' + str(round(Ctime3,5)) + ' TF ' + str(round(Ctime2,5)))\n","    weightedrmse1 /= (Num_Seq * Nloc)\n","    floss /= (Num_Seq * Nloc)\n","    if LocationBasedValidation:\n","      weightedrmse1TRAIN /= (Num_Seq * TrainingNloc)\n","      if ValidationNloc>0:\n","        weightedrmse1VAL /= (Num_Seq * ValidationNloc)\n","    dloss = dloss.numpy()\n","    eloss = eloss.numpy()\n","    closs /= Num_Seq\n","    dloss /= Num_Seq\n","    eloss /= Num_Seq\n","\n","    current_time = timenow()\n","    line1 = ''\n","    global GlobalTrainingLoss, GlobalValidationLoss, GlobalLoss\n","    GlobalLoss = weightedrmse1\n","    if LocationBasedValidation:\n","      line1 = ' Training ' + str(round(weightedrmse1TRAIN,6)) + ' Validation ' + str(round(weightedrmse1VAL,6))\n","      GlobalTrainingLoss = weightedrmse1TRAIN\n","      GlobalValidationLoss = weightedrmse1VAL\n","    print( startbold + startred + current_time + ' DLPrediction Averages' + ' ' + RunName + ' ' + RunComment +  resetfonts)\n","    line = LabelFit + ' ' + RunName + ' Weighted sum over predicted values ' + str(round(weightedrmse1,6))\n","    line += ' No Encoding Preds ' + str(round(floss,6)) + line1\n","    line += ' from loss function ' + str(round(closs,6)) + ' TF version ' + str(round(dloss,6)) + ' TFspec version ' + str(round(eloss,6))  \n","    print(wraptotext(line))\n","    print('Count ignoring NaN ' +str(round(weightedcount,4))+ ' Counting NaN ' + str(round(weightedovercount,4)), 70 )\n","    print(' Unwgt Count no NaN ',totalcount, ' Unwgt Count with NaN ',overcount, ' Number Sequences ', Nloc*Num_Seq)\n","\n","    ObsvPred = np.sum( np.abs(ObsVbytimeandclass-Predbytimeandclass) , axis=0)\n","    TotalObs = np.sum( ObsVbytimeandclass , axis=0)\n","    SummedEbyclass = np.divide(ObsvPred,TotalObs)\n","    RMSEbyclass1 = np.divide(RMSEbyclass,countbyclass) # NO SQRT\n","    RMSEbyclass2 = np.sqrt(np.divide(RMSEbyclass[:,0],RMSVbyclass))\n","    RelEbyclass = np.divide(AbsEbyclass, AbsVbyclass)\n","    extracomments = []\n","\n","    line1 = '\\nErrors by Prediction Components -- class weights not included except in final Loss components\\n Name Count without NaN, '\n","    line2 = 'Loss wgt * sum errors**2/count, sqrt(sum errors**2/sum target**2), sum(abs(error)/sum(abs(value), abs(sum(abs(value)-abs(pred)))/sum(abs(pred)'\n","    print(wraptotext(startbold + startred + line1 + line2 + resetfonts))\n","    \n","    for i in range(0,NpredperseqTOT):\n","      line = startbold + startred + ' Loss Coeffs '\n","      for timecut in range(0,3):\n","        line += TimeCutLabel[timecut] + 'Full ' + str(round(RMSEbyclass1[i,timecut],6)) + resetfonts\n","      if LocationBasedValidation:\n","        RTRAIN = np.divide(RMSETRAINbyclass[i],countTRAINbyclass[i])\n","        RVAL = np.full(3,0.0, dtype =np.float32)\n","        if countVALbyclass[i,0] > 0:\n","          RVAL = np.divide(RMSEVALbyclass[i],countVALbyclass[i])\n","        for timecut in range(0,3):\n","          line += startbold + startpurple + TimeCutLabel[timecut] + 'TRAIN ' + resetfonts + str(round(RTRAIN[timecut],6))\n","          line += startbold + ' VAL ' + resetfonts + str(round(RVAL[timecut],6))\n","      else:\n","        RTRAIN = RMSEbyclass1[i]\n","        RVAL = np.full(3,0.0, dtype =np.float32)\n","        for timecut in range(0,3):\n","          line += TimeCutLabel[timecut] + 'FULL ' + str(round(RTRAIN[timecut],6))   \n","      print(wraptotext(str(i) + ' ' + startbold + Predictionname[i] + resetfonts + ' All Counts ' + str(round(countbyclass[i,0],0)) + ' '\n","       + str(round(100.0*RMSEbyclass2[i],4)) + ' ' + str(round(100.0*RelEbyclass[i],4)) + ' ' + str(round(100.0*SummedEbyclass[i],4)) +line ))\n","      extracomments.append(['Loss Coeffs F=' + str(round(RTRAIN[0],5)) + ' S=' + str(round(RTRAIN[1],5))+ ' E=' + str(round(RTRAIN[2],5)),\n","                            'Loss Coeffs F=' + str(round(RVAL[0],5)) + ' S=' + str(round(RVAL[1],5))+ ' E=' + str(round(RVAL[2],5))])\n","\n","# Don't use DLPrediction for Transformer Plots. Wait for DL2B,D,E\n","    if modelflag == 1:\n","      return FitPredictions\n","    \n","\n","    print('\\n Next plots come from DLPrediction')\n","    Location_summed_plot(yin, FitPredictions, extracomments = extracomments, Dumpplot = True)  \n","    ##inserting average feature plots\n","    AverageFeatureContributionPlot(TFTWeights)\n","    AverageTemporalImportance(TFTWeights)\n","    \n","    FindNNSE(yin, FitPredictions)\n","    for iplot in range(1,1+LengthFutures):\n","      plot_by_futureindex(iplot,yin,FitPredictions, fill=True, extrastring='')\n","      \n","    if IndividualPlots:\n","      ProduceIndividualPlots(yin, FitPredictions)\n","\n","\n","    return FitPredictions   "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["IncreaseNloc_sample = 1\n","DecreaseNloc_sample = 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"BSr9vtXkGE5p","executionInfo":{"status":"ok","timestamp":1642448940295,"user_tz":300,"elapsed":4,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"83bc78c5-55b3-45ee-db00-87b55b14b39e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["def DLprediction2F(Xin, yin, DLmodel, modelflag):\n","  # Input is the windows [Num_Seq] [Nloc] [Tseq] [NpropperseqTOT] (SymbolicWindows False)\n","  # Input is  the sequences [Nloc] [Num_Time-1] [NpropperseqTOT] (SymbolicWindows True)\n","  # Input Predictions are always [Num_Seq] [NLoc] [NpredperseqTOT]\n","  # Label Array is always [Num_Seq][Nloc] [0=Window(first sequence)#, 1=Location]\n","\n","  # if SkipDL2F:\n","  #   return\n","  if GarbageCollect:\n","    gc.collect()\n","  global  OuterBatchDimension, Nloc_sample, d_sample, max_d_sample\n","\n","  SensitivityAnalyze = np.full((NpropperseqTOT), False, dtype = np.bool)\n","  SensitivityChange = np.zeros ((NpropperseqTOT), dtype = np.float32)\n","  SensitvitybyPrediction = False\n","  if ReadApril2021Covid or ReadDecember2021:\n","    for iprop in range(0,NpropperseqTOT):\n","      SensitivityAnalyze[iprop] = True\n","\n","  something = 0\n","  SensitivityList = []\n","  for iprop in range(0,NpropperseqTOT):\n","    if SensitivityAnalyze[iprop]:\n","      something +=1\n","      SensitivityList.append(iprop)\n","  if something == 0:\n","    return\n","  ScaleProperty = 0.99\n","  SampleSize = 1\n","\n","\n","  SensitivityFitPredictions = np.zeros([Num_Seq, Nloc, NpredperseqTOT, 1 + something], dtype =np.float32)\n","  FRanges = np.full((NpredperseqTOT), 1.0, dtype = np.float32)\n","  current_time = timenow()\n","  print(wraptotext(startbold+startred+ 'DLPrediction2F ' +current_time + ' ' + RunName + RunComment +  resetfonts))\n","\n","  sw = np.empty_like(yin, dtype=np.float32)\n","  for i in range(0,sw.shape[0]):\n","    for j in range(0,sw.shape[1]):\n","      for k in range(0,NpredperseqTOT):\n","        sw[i,j,k] = Predictionwgt[k] \n","  labelarray =np.empty([Num_Seq, Nloc, 2], dtype = np.int32)\n","  for iseq in range(0, Num_Seq):\n","    for iloc in range(0,Nloc):\n","      labelarray[iseq,iloc,0] = iseq\n","      labelarray[iseq,iloc,1] = iloc\n","\n","  Totaltodo = Num_Seq*Nloc\n","  Nloc_sample = Nloc # default\n","\n","  if IncreaseNloc_sample > 1:\n","    Nloc_sample = int(Nloc_sample*IncreaseNloc_sample)\n","  elif DecreaseNloc_sample > 1:\n","    Nloc_sample = int(Nloc_sample/DecreaseNloc_sample)\n","\n","  if Totaltodo%Nloc_sample != 0:\n","    printexit('Invalid Nloc_sample ' + str(Nloc_sample) + \" \" + str(Totaltodo))\n","  d_sample = Tseq * Nloc_sample        \n","  max_d_sample = d_sample\n","  OuterBatchDimension = int(Totaltodo/Nloc_sample)\n","  print(' Predict with ' +str(Nloc_sample) + ' sequences per sample and batch size ' + str(OuterBatchDimension))\n","\n","  print(startbold+startred+ 'Sensitivity using Property ScaleFactor ' + str(round(ScaleProperty,3)) + resetfonts)\n","  for Sensitivities in range(0,1+something):\n","    if Sensitivities == 0:\n","      iprop = -1\n","      print(startbold+startred+ 'Basic Predictions' + resetfonts)\n","      if SymbolicWindows:\n","        ReshapedSequencesTOTmodified = ReshapedSequencesTOT\n","      else:\n","        Xinmodified = Xin\n","    else:\n","      iprop = SensitivityList[Sensitivities-1]\n","      maxminplace = PropertyNameIndex[iprop]\n","      lastline = ''\n","      if iprop < Npropperseq:\n","        lastline = ' Normed Mean ' +str(round(QuantityStatistics[maxminplace,5],4))\n","      print(startbold+startred+ 'Property ' + str(iprop) + ' ' + InputPropertyNames[maxminplace] + resetfonts + lastline)\n","      if SymbolicWindows:\n","        ReshapedSequencesTOTmodified = np.copy(ReshapedSequencesTOT)\n","        ReshapedSequencesTOTmodified[:,:,iprop] = ScaleProperty * ReshapedSequencesTOTmodified[:,:,iprop]\n","      else:\n","        Xinmodified = np.copy(Xin)\n","        Xinmodified[:,:,:,iprop] = ScaleProperty*Xinmodified[:,:,:,iprop]\n","    CountFitPredictions = np.zeros([Num_Seq, Nloc, NpredperseqTOT], dtype =np.float32)\n","    meanvalue2 = 0.0\n","    meanvalue3 = 0.0\n","    meanvalue4 = 0.0\n","    variance2= 0.0\n","    variance3= 0.0\n","    variance4= 0.0\n","\n","    samplebar = notebook.trange(SampleSize,  desc='Full Samples', unit  = 'sample')\n","    bbar = notebook.trange(OuterBatchDimension,  desc='Batch    loop', unit  = 'sample')\n","    for shuffling in range (0,SampleSize):\n","      if GarbageCollect:\n","        gc.collect()\n","      yuse = yin\n","      labeluse = labelarray\n","      y2= np.reshape(yuse, (-1, NpredperseqTOT)).copy()\n","      labelarray2 = np.reshape(labeluse, (-1,2))\n","\n","      if SymbolicWindows:\n","        # Xin X2 X3 not used rather ReshapedSequencesTOT\n","        labelarray2, y2 = shuffleDLinput(labelarray2, y2)\n","        ReshapedSequencesTOTuse = ReshapedSequencesTOTmodified\n","      else:\n","        Xuse = Xinmodified\n","        X2 = np.reshape(Xuse, (-1, Tseq, NpropperseqTOT)).copy()\n","        X2, y2, labelarray2 = shuffleDLinput(X2, y2,labelarray2)\n","        X3 = np.reshape(X2, (-1, d_sample, NpropperseqTOT))\n","        \n","      y3 = np.reshape(y2, (-1, Nloc_sample, NpredperseqTOT))\n","      sw = np.reshape(sw, (-1, Nloc_sample, NpredperseqTOT))\n","      labelarray3 = np.reshape(labelarray2, (-1, Nloc_sample, 2))\n","\n","      quan2 = 0.0\n","      quan3 = 0.0\n","      quan4 = 0.0\n","      for Batchindex in range(0, OuterBatchDimension):\n","        if GarbageCollect:\n","          gc.collect()\n","\n","        if SymbolicWindows:\n","          X3local = list()\n","          for iloc_sample in range(0,Nloc_sample):\n","            LocLocal = labelarray3[Batchindex, iloc_sample,1]\n","            SeqLocal = labelarray3[Batchindex, iloc_sample,0]\n","            X3local.append(ReshapedSequencesTOTuse[LocLocal,SeqLocal:SeqLocal+Tseq])\n","          InputVector = np.array(X3local)\n","        else:\n","          InputVector = X3[Batchindex]\n","\n","        Labelsused = labelarray3[Batchindex]\n","        Time = None\n","        # if modelflag == 0:\n","        #   InputVector = np.reshape(InputVector,(-1,Tseq,NpropperseqTOT))\n","        # else:\n","        #   Time = SetSpacetime(np.reshape(Labelsused[:,0],(1,-1)))\n","        #   InputVector = np.reshape(InputVector,(1,Tseq*Nloc_sample,NpropperseqTOT))\n","        for iseq in range(0, Num_Seq):\n","          StopWatch.start('label1')\n","          if SymbolicWindows:\n","            if modelflag == 2:\n","              InputVector = np.empty((Nloc,2), dtype = int)\n","              for iloc in range (0,Nloc):\n","                InputVector[iloc,0] = iloc\n","                InputVector[iloc,1] = iseq\n","            else:\n","              InputVector = Xin[:,iseq:iseq+Tseq,:]\n","          else:\n","            InputVector = Xin[iseq]\n","          Time = None\n","          if modelflag == 0:\n","            InputVector = np.reshape(InputVector,(-1,Tseq,NpropperseqTOT))\n","          elif modelflag == 1:\n","            InputVector = np.reshape(InputVector,(1,Tseq*Nloc,NpropperseqTOT))\n","            BasicTimes = np.full(Nloc,iseq, dtype=np.int32)\n","            Time = SetSpacetime(np.reshape(BasicTimes,(1,-1)))\n","        # print(InputVector)\n","        # print(PredictionTraining)\n","        # print('TIME')\n","        # print(Time)\n","        PredictedVector = DLmodel(InputVector, training = PredictionTraining, Time=Time )\n","        PredictedVector = np.reshape(PredictedVector,(1,Nloc_sample,NpredperseqTOT))\n","\n","        swbatched = sw[Batchindex,:,:]\n","        if LocationBasedValidation:\n","          swT = np.zeros([1,Nloc_sample,NpredperseqTOT],dtype = np.float32)\n","          swV = np.zeros([1,Nloc_sample,NpredperseqTOT],dtype = np.float32)\n","          for iloc_sample in range(0,Nloc_sample):\n","            fudgeT = Nloc/TrainingNloc\n","            fudgeV = Nloc/ValidationNloc\n","            iloc = Labelsused[iloc_sample,1]\n","            if MappingtoTraining[iloc] >= 0:\n","              swT[0,iloc_sample,:] = swbatched[iloc_sample,:]*fudgeT\n","            else:\n","              swV[0,iloc_sample,:] = swbatched[iloc_sample,:]*fudgeV\n","        TrueVector = y3[Batchindex]\n","        TrueVector = np.reshape(TrueVector,(1,Nloc_sample,NpredperseqTOT))\n","        swbatched = np.reshape(swbatched,(1,Nloc_sample,NpredperseqTOT))\n","\n","        losspercall = numpycustom_lossGCF1(TrueVector,PredictedVector,swbatched)\n","        quan2 += losspercall\n","        bbar.update(1)\n","        if LocationBasedValidation:\n","          losspercallTr = numpycustom_lossGCF1(TrueVector,PredictedVector,swT)\n","          quan3 += losspercallTr\n","          losspercallVl = numpycustom_lossGCF1(TrueVector,PredictedVector,swV)\n","          quan4 += losspercallVl\n","        \n","        for iloc_sample in range(0,Nloc_sample):\n","          LocLocal = Labelsused[iloc_sample,1]\n","          SeqLocal = Labelsused[iloc_sample,0]\n","          yyhat = PredictedVector[0,iloc_sample]\n","          CountFitPredictions [SeqLocal,LocLocal,:] += FRanges\n","          SensitivityFitPredictions [SeqLocal,LocLocal,:,Sensitivities] += yyhat\n","\n","        fudge = 1.0/(1.0 + Batchindex)\n","        mean2 = quan2 * fudge \n","        if LocationBasedValidation:\n","          mean3 = quan3 * fudge\n","          mean4 = quan4 * fudge\n","          bbar.set_postfix(AvLoss = mean2, AvTr = mean3, AvVl = mean4, Loss = losspercall, Tr = losspercallTr, Vl = losspercallVl)\n","        else:\n","          bbar.set_postfix(Loss = losspercall, AvLoss = mean2 ) \n","\n","  # Processing at the end of Sampling Loop\n","      fudge = 1.0/OuterBatchDimension\n","      quan2 *= fudge\n","      quan3 *= fudge\n","      quan4 *= fudge\n","      meanvalue2 += quan2\n","      variance2 += quan2**2\n","      variance3 += quan3**2\n","      variance4 += quan4**2\n","      if LocationBasedValidation:\n","        meanvalue3 += quan3\n","        meanvalue4 += quan4        \n","      samplebar.update(1)\n","      if LocationBasedValidation:\n","        samplebar.set_postfix(Shuffle=shuffling, Loss = quan2, Tr = quan3, Val = quan4)\n","      else:\n","        samplebar.set_postfix(Shuffle=shuffling, Loss = quan2)\n","      bbar.reset()\n","  # End Shuffling loop\n","\n","    if Sensitivities == 0:\n","      iprop = -1\n","      lineend = startbold+startred+ 'Basic Predictions' + resetfonts\n","    else:\n","      iprop = SensitivityList[Sensitivities-1]\n","      nameplace = PropertyNameIndex[iprop]\n","      maxminplace = PropertyAverageValuesPointer[iprop]\n","      lastline = ' Normed Mean ' +str(round(QuantityStatistics[maxminplace,5],4))\n","      lineend= startbold+startred + 'Property ' + str(iprop) + ' ' + InputPropertyNames[nameplace] + resetfonts + lastline\n","\n","    meanvalue2 /= SampleSize \n","\n","    global GlobalTrainingLoss, GlobalValidationLoss, GlobalLoss\n","    # printloss(' Full Loss ',meanvalue2,variance2,SampleSize, lineend = lineend)\n","    meanvalue2 /= SampleSize\n","    GlobalLoss = meanvalue2\n","    GlobalTrainingLoss = 0.0\n","    GlobalValidationLoss = 0.0\n","    \n","    if LocationBasedValidation:\n","      # printloss(' Training Loss ',meanvalue3,variance3,SampleSize, lineend = lineend)\n","      # printloss(' Validation Loss ',meanvalue4,variance4,SampleSize, lineend = lineend)\n","      meanvalue3 /= SampleSize\n","      meanvalue4 /= SampleSize\n","      GlobalTrainingLoss = meanvalue3\n","      GlobalValidationLoss = meanvalue4\n","\n","# Sequence Location Predictions\n","    SensitivityFitPredictions[:,:,:,Sensitivities] = np.divide(SensitivityFitPredictions[:,:,:,Sensitivities],CountFitPredictions[:,:,:])\n","    if Sensitivities == 0:\n","      Goldstandard = np.sum(np.abs(SensitivityFitPredictions[:,:,:,Sensitivities]), axis =(0,1))\n","      TotalGS = np.sum(Goldstandard)\n","      continue\n","    Change = np.sum(np.abs(np.subtract(SensitivityFitPredictions[:,:,:,Sensitivities],SensitivityFitPredictions[:,:,:,0])), axis =(0,1))\n","    TotalChange = np.sum(Change)\n","    SensitivityChange[iprop] = TotalChange\n","    print(str(round(TotalChange,5)) +  ' GS ' + str(round(TotalGS,5)) + ' ' +lineend)\n","    if SensitvitybyPrediction:\n","      for ipred in range(0,NpredperseqTOT):\n","        print(str(round(Change[ipred],5)) +  ' GS ' + str(round(Goldstandard[ipred],5)) \n","        + ' ' + str(ipred) + ' ' + Predictionname[ipred] + ' wgt ' + str(round(Predictionwgt[ipred],3)))\n","    \n","  print(startbold+startred+ '\\nSummarize Changes Total ' + str(round(TotalGS,5))+ ' Property ScaleFactor ' + str(round(ScaleProperty,3)) + resetfonts )\n","  for Sensitivities in range(1,1+something):\n","    iprop = SensitivityList[Sensitivities-1]\n","    nameplace = PropertyNameIndex[iprop]\n","    maxminplace = PropertyAverageValuesPointer[iprop]\n","    \n"," \n","    lastline = ' Normed Mean ' +str(round(QuantityStatistics[maxminplace,5],4))\n","    lastline += ' Normed Std ' +str(round(QuantityStatistics[maxminplace,6],4))\n","    TotalChange = SensitivityChange[iprop] \n","    NormedChange = TotalChange/((1-ScaleProperty)*TotalGS)\n","    stdmeanratio = 0.0\n","    stdchangeratio = 0.0   \n","    if np.abs(QuantityStatistics[maxminplace,5]) > 0.0001:\n","      stdmeanratio = QuantityStatistics[maxminplace,6]/QuantityStatistics[maxminplace,5]\n","    if np.abs(QuantityStatistics[maxminplace,6]) > 0.0001:\n","      stdchangeratio = NormedChange/QuantityStatistics[maxminplace,6]\n","\n","    lratios =  ' Normed Change '+ str(round(NormedChange,5)) + ' /std ' + str(round(stdchangeratio,5))\n","    lratios += ' Std/Mean ' + str(round(stdmeanratio,5))\n","    print(str(iprop) + ' Change '+ str(round(TotalChange,2)) + startbold + lratios\n","          + ' ' + InputPropertyNames[nameplace] + resetfonts + lastline)\n","\n","  current_time = timenow()  \n","  print(startbold+startred+ '\\nEND DLPrediction2F ' + current_time + ' ' + RunName + RunComment +resetfonts) \n","  return "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"mclQf3BxB3sQ","executionInfo":{"status":"ok","timestamp":1642448940913,"user_tz":300,"elapsed":621,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c0ca246d-bd3c-4a6b-d616-1c938fa3f4f9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","source":["### Feature Importance Plots\n"],"metadata":{"id":"ZrFjfW6ICXWd"}},{"cell_type":"code","source":["col_list =['black','blue','red','grey','yellow','green','purple','magenta','cyan','brown','aquamarine','plum','chartreuse','coral','yellowgreen']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"CjYbUAEAO-nR","executionInfo":{"status":"ok","timestamp":1642448940915,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"a61f1852-7df5-47a5-cfa5-5c94ac8191e3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["def AverageFeatureContributionPlot(TFTWeights):\n","  '''\n","  This function is for the summed plots to be viewed after training each model iteration\n","  '''\n","  # current_time = timenow()\n","  # print(wraptotext(startbold + startred + current_time + ' feature importance from Future Attention weights ' + RunName + ' ' + RunComment + resetfonts))\n","  # otherlen = len(otherlabs)\n","\n","  plt.rcParams[\"figure.figsize\"] = [16,6]\n","  figure, (ax1) = plt.subplots(nrows=1, ncols=1)\n","  ax1.set_prop_cycle('color',col_list)\n","  FutureWeights = TFTWeights.getFutureWeights()\n","  avgFutWeights = FutureWeights.mean(axis=0)\n","\n","  if len(TFTWeights.known) != avgFutWeights.shape[1]:\n","    printexit('Incorrect future feature lengths')\n","  else:\n","    for index, Feature in enumerate(TFTWeights.known):\n","      \n","      FeatureString = Feature[0].split()[1]\n","      titleString = 'Future Known Inputs Attention weights for feature importance'\n","      ax1.set_title('\\n'.join(wrap(titleString,70)))\n","      ax1.plot(avgFutWeights[:,index], label=FeatureString)\n","      ylab = FeatureString + ' average attention weights'\n","      ax1.set_ylabel(ylab)\n","      ax1.grid(False)\n","      ax1.legend()\n","  figure.tight_layout()\n","  plt.show()\n","\n","  ## End Future Plot\n","\n","  ## Begin Historical Plot\n","\n","  plt.rcParams[\"figure.figsize\"] = [16,6]\n","  figure, ax1 = plt.subplots(nrows=1, ncols=1)\n","  ax1.set_prop_cycle('color',col_list)\n","\n","  HistoricalWeights = TFTWeights.getHistoricalWeights()\n","  skip_unknown = True\n","  if skip_unknown:\n","    unknown_indices = []\n","    new_historical = []\n","  if len(TFTWeights.historical) != HistoricalWeights.shape[2]:\n","    printexit('Incorrect Feature Lengths')\n","  else:\n","    for index, Feature in enumerate(TFTWeights.historical):\n","      if skip_unknown:\n","        if (Feature[2] != 2) and (Feature[2] != 1):\n","          unknown_indices.append(index)\n","        else:\n","          new_historical.append(Feature)\n","  HistoricalWeights = np.delete(HistoricalWeights, unknown_indices, axis=2)\n","  avgHist = HistoricalWeights.mean(axis=0)\n","  if skip_unknown:\n","    if len(new_historical) != avgHist.shape[1]:\n","      printexit('Mismatch due to the unknown inputs')\n","    else:\n","      for index, Feature in enumerate(new_historical):\n","        FeatureString = Feature[0].split()[1]\n","        titleString = 'Historical (known future + obserbed) inputs attention weights for feature importance'\n","        ax1.set_title('\\n'.join(wrap(titleString,70)))\n","        ax1.plot(avgHist[:,index], label=FeatureString)\n","        ylab = FeatureString + ' average attention weights'\n","        ax1.set_ylabel(ylab)\n","        ax1.grid(False)\n","        ax1.legend()\n","  figure.tight_layout()\n","  plt.show()\n","          \n","  ## End Historical Plot \n","\n","  ## Begin Static Plot \n","\n","  plt.rcParams[\"figure.figsize\"] = [16,6]\n","  figure, ax1 = plt.subplots(nrows=1, ncols=1)\n","  ax1.set_prop_cycle('color',col_list)\n","\n","  StaticWeights = TFTWeights.getStaticWeights()\n","  avgStatic = StaticWeights.mean(axis=0)\n","\n","  if len(TFTWeights.static) != avgStatic.shape[1]:\n","    printexit('Incorrect static feature lengths')\n","  else:\n","    for index, Feature in enumerate(TFTWeights.static):\n","      \n","      FeatureString = Feature[0].split()[1]\n","      titleString = 'Static Inputs Attention weights for feature importance'\n","      ax1.set_title('\\n'.join(wrap(titleString,70)))\n","      ax1.plot(avgStatic[:,index], label=FeatureString)\n","      ylab = FeatureString + ' average attention weights'\n","      ax1.set_ylabel(ylab)\n","      ax1.grid(False)\n","      ax1.legend()\n","\n","  figure.tight_layout()\n","  plt.show()\n","\n","def AverageTemporalImportance(TFTWeights):\n","\n","  TemporalMatrix = TFTWeights.getTemporalImportance()\n","  for idx,i in enumerate(TemporalMatrix):\n","  \n","    titleStr = 'Temporal attention weights for day ' + str(idx+1)\n","    if idx % 2 == 0:\n","      figure, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,6))\n","    \n","    ax.flatten()[idx%2].plot(TemporalMatrix[idx])\n","    minm = min(TemporalMatrix[idx])\n","    maxm = max(TemporalMatrix[idx])\n","    ax.flatten()[idx%2].vlines(idx, minm, maxm,color='black',alpha=.5,label='Weights for Day')\n","    if idx-7 > 0:\n","      ax.flatten()[idx%2].vlines(idx-7, minm, maxm,color='green',alpha=.5, label='Current Timestep - 7(days)')\n","    if idx-14 > 0:\n","      ax.flatten()[idx%2].vlines(idx-14, minm, maxm,color='green',alpha=.5)\n","    if idx-21 > 0:\n","      ax.flatten()[idx%2].vlines(idx-21, minm, maxm,color='green',alpha=.5)\n","\n","    ax.flatten()[idx%2].set_title(titleStr)\n","    ax.flatten()[idx%2].set_ylabel('Decoder Attention Weight')\n","    ax.flatten()[idx%2].set_xlabel('Importance of point X in the 28 day sequence')\n","    ax.flatten()[idx%2].legend(loc='upper right')\n","    if idx%2==1:\n","      figure.tight_layout()\n","      plt.show()\n","      print()\n","\n","\n","def FuturewQuantiles(TFTWeights):\n","\n","  qs = TFTWeights.quantiles\n","  FutureQMatrix = np.quantile(TFTWeights.weights['future_flags'],qs,axis=0)\n","\n","  for Feature in range(FutureQMatrix.shape[2]):\n","    plot_title = TFTWeights.known[Feature][0]\n","    for Quantile in range(len(qs)):\n","      if qs[Quantile] == .5:\n","        plt.plot(FutureQMatrix[Quantile,:,Feature],label='.5 Quantile')\n","      else:\n","        qlabel = str(qs[Quantile]) + ' Quantile'\n","        plt.plot(FutureQMatrix[Quantile,:,Feature],linestyle='--',color='black',alpha=.5,label=qlabel)\n","    plt.title(plot_title)\n","    plt.legend(loc='upper right')\n","    plt.show()\n","\n","def HistwQuantiles(TFTWeights):\n","\n","  qs = TFTWeights.quantiles\n","  HistoryQMatrix = np.quantile(TFTWeights.weights['historical_flags'],qs,axis=0)\n","\n","  for Feature in range(HistoryQMatrix.shape[2]):\n","    plot_title = TFTWeights.historical[Feature][0]\n","    for Quantile in range(len(qs)):\n","      if qs[Quantile] == .5:\n","        plt.plot(HistoryQMatrix[Quantile,:,Feature],label='.5 Quantile')\n","      else:\n","        qlabel = str(qs[Quantile]) + ' Quantile'\n","        plt.plot(HistoryQMatrix[Quantile,:,Feature],linestyle='--',color='black',alpha=.5,label=qlabel)\n","    plt.title(plot_title)\n","    plt.legend(loc='upper right')\n","    plt.show()\n","\n","\n","def HistwQuantiles(TFTWeights):\n","\n","  qs = TFTWeights.quantiles\n","  HistoryQMatrix = np.quantile(TFTWeights.weights['historical_flags'],qs,axis=0)\n","\n","  for Feature in range(HistoryQMatrix.shape[2]):\n","    plot_title = TFTWeights.historical[Feature][0]\n","    for Quantile in range(len(qs)):\n","      if qs[Quantile] == .5:\n","        plt.plot(HistoryQMatrix[Quantile,:,Feature],label='.5 Quantile')\n","      else:\n","        qlabel = str(qs[Quantile]) + ' Quantile'\n","        plt.plot(HistoryQMatrix[Quantile,:,Feature],linestyle='--',color='black',alpha=.5,label=qlabel)\n","    plt.title(plot_title)\n","    plt.legend(loc='upper right')\n","    plt.show()\n","\n","def StaticwQuantiles(TFTWeights):\n","\n","  qs = TFTWeights.quantiles\n","  StaticQMatrix = np.quantile(TFTWeights.weights['static_flags'],qs,axis=0)\n","  StaticNames = TFTWeights.static\n","  xloc = np.arange(StaticQMatrix.shape[1])\n","  width = .6\n","\n","  xt = [i[0].split()[1] for i in StaticNames]\n","  print(xt)\n","  for Feature in range(StaticQMatrix.shape[1]):\n","    plot_title = 'Static Feature'\n","    for Quantile in range(len(qs)):\n","      if qs[Quantile] == .5:\n","        plt.bar(Feature,StaticQMatrix[Quantile,Feature],.2,color='blue')\n","      elif qs[Quantile] < .5:\n","        qlabel = str(qs[Quantile]) + ' Quantile'\n","        plt.bar(Feature-width/3,StaticQMatrix[Quantile,Feature],.2,color='orange',alpha=.5)#,label=qlabel)\n","      elif qs[Quantile] > .5:\n","        qlabel = str(qs[Quantile]) + ' Quantile'\n","        plt.bar(Feature+width/3,StaticQMatrix[Quantile,Feature],.2,color='green',alpha=.5)#,label=qlabel)\n","  plt.xticks(xloc,xt)\n","  plt.title(plot_title)\n","  leg = [str(i) + ' quantile' for i in qs]\n","  plt.legend(leg,loc='upper right')\n","  plt.show()\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"bZkHuRYZBbaf","executionInfo":{"status":"ok","timestamp":1642448941123,"user_tz":300,"elapsed":211,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"7a91db28-46bb-4d02-c9ee-c0704ec9a0cb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["tt = np.array(TFTdfTotal['2 Age Distribution'].dropna())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"tF0aceEWvKIn","executionInfo":{"status":"ok","timestamp":1642367689624,"user_tz":300,"elapsed":822,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"a98d311f-7386-4a9a-a01a-b6c7dcb82daf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["np.linalg.norm(tt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"L21qpkGrvgMj","executionInfo":{"status":"ok","timestamp":1642367691225,"user_tz":300,"elapsed":255,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"1edaef9b-7de5-44b4-92d6-2dc1e7484df4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["124.72369"]},"metadata":{},"execution_count":253}]},{"cell_type":"code","source":["(tt/np.linalg.norm(tt))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"5OCHW_zk5D0f","executionInfo":{"status":"ok","timestamp":1642371289938,"user_tz":300,"elapsed":317,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"316d92e8-5b46-40aa-db06-b7e4344fad37"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["array([0.00387103, 0.00387103, 0.00387103, ..., 0.0071634 , 0.0071634 ,\n","       0.0071634 ], dtype=float32)"]},"metadata":{},"execution_count":262}]},{"cell_type":"code","source":["(tt2/np.linalg.norm(tt2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"SoRoRLmk9SxA","executionInfo":{"status":"ok","timestamp":1642371304766,"user_tz":300,"elapsed":300,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c64db12e-f9ed-4bbf-dcf8-df54af8328d2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["array([0.00489033, 0.00489033, 0.00489033, ..., 0.00237361, 0.00237361,\n","       0.00237361], dtype=float32)"]},"metadata":{},"execution_count":264}]},{"cell_type":"code","source":["tt2 = np.array(TFTdfTotal['4 Comorbidities'].dropna())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"bj2NKhSC5FPM","executionInfo":{"status":"ok","timestamp":1642370211943,"user_tz":300,"elapsed":819,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"275b083a-3433-4234-e8d3-9bb8b6e1fc5c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["np.dot((tt/np.linalg.norm(tt)).T,(tt2/np.linalg.norm(tt2)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"p7sbqsTI5KM5","executionInfo":{"status":"ok","timestamp":1642371350630,"user_tz":300,"elapsed":848,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c195f4b6-c734-46db-c4ce-6468bdc9d83d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["0.8089241"]},"metadata":{},"execution_count":265}]},{"cell_type":"code","source":["uktt / np.linalg.norm(tt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"Qp4_xCUgvabA","executionInfo":{"status":"ok","timestamp":1642367692848,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"39f21f68-e146-43ce-a554-8d54f6fdaa37"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["array([0.00387103, 0.00387103, 0.00387103, ..., 0.0071634 , 0.0071634 ,\n","       0.0071634 ], dtype=float32)"]},"metadata":{},"execution_count":254}]},{"cell_type":"code","source":["StaticwQuantiles(TFTAttentionWeights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"id":"_ojPOnSfyB_d","executionInfo":{"status":"ok","timestamp":1642354040195,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d19732a0-5b27-4007-c2f3-26f5e956344c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["['Age', 'Air', 'Comorbidities', 'Health', 'Mobility', 'Residential']\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["HistwQuantiles(TFTAttentionWeights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":6358},"id":"86MxG_lMxevu","executionInfo":{"status":"ok","timestamp":1642351463422,"user_tz":300,"elapsed":3306,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"a5119f17-9f16-49d9-ec14-4b8488a938b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA8EAAAF1CAYAAADIjOhKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeZhU5Zm4//sBuls22VUEtRUQBMEWG9wmghqVTIy7icskkhk1Ji4zWc0vZnTixERHZ5LJqEnUOMTEgAYV+Zq4jCYuiUYF4waoIKI0iiBCBGxk6ff3Ry3WRncjGIJ1f66Li6r3ebdz6nTVeeosFSklJEmSJEmqBh229gQkSZIkSfprMQmWJEmSJFUNk2BJkiRJUtUwCZYkSZIkVQ2TYEmSJElS1TAJliRJkiRVDZNgSZL+SiJiVUTssbXnsS2LiAcj4sytPQ9J0rbLJFiSpAoioj4ifhsRyyNicURcHRGdNlJ3fES0ZJPcVRHRFBG3RsSYwnoppW4ppfl/nSX44CJiRETcFxFvR8SKiJgZEX+/teclSdKWYBIsSVJl1wJLgP5AAzAO+FIr9V9PKXUDugMHAC8Aj0TE4R/2RD8E/w/4P2AnYAfgAuCdD9JRRHTcgvOSJGmzmQRLklTZ7sCtKaU1KaXFwD3AiLYapYymlNLFwA3AFblYRKSIGJx9/PcRMTsiVkbEooj4WkG9oyPi6exR2EcjYlRB7JsR8XK23eyIOL4gNjgiHoqIv0TEWxFxS0FsWET8X/bo7osR8elK84+Ivtllvz6ltDb7748ppT9k4+OzR7q/lR1jQUScXtB+UkT8OHsUfTVwaETsHBG3RcTSiHglIi4oqD82Ih7LLusb2SPutQXxIyLihewyXQ1EW6+BJEmtMQmWJKmyHwKnRESXiBgAfIJMIrwpbgdGR0TXCrGfAV9IKXUH9gZ+BxAR+wI3Al8A+gA/BaZHRF223cvAx4AewHeAX0ZE/2zs34H7gF7AQOB/sn12JXNk91dkjuyeAlwbEcMrzGsZMC/b73ERsWOFOjsBfYEBwBnAdRExtCB+GnAZmaPij5I5svxMtv7hwL9ExFHZuhuAL2f7OzAb/1J23n2z6/Db2fjLwMEV5iNJUruZBEuSVNnDZI78vgM0ATOAaZvYx+tkjlz2rBBbBwyPiO1TSstTSk9ly88GfppSejyltCGl9HPgPTKnWJNS+nVK6fWUUktK6RZgLjC2oM/dgJ2zR7D/kC0/GliQUvrflNL6lNKfgduAk0snlVJKwKHAAuA/gTci4uGIGFJS9V9TSu+llB4CfgMUHlm+M3v0uAUYCfRLKV2aPao8H7ieTCJOSmlmSulP2XktIJP0j8v28/fArJTS1JTSOjJfTCzeyLqWJKldTIIlSSoRER3IHPW9HehK5ihkLwpObW6nAUACVlSInUgmyXs1ewrzgdny3YCvZk8PXhERK4BdgJ2zc/tcwanSK8gcRe6bbfsNMkn3ExExKyL+saDP/Uv6PJ3MEd0y2dO5z0spDcq2XQ3cVFBleUppdcHzV3Pzy1pY8Hg3YOeSsb8F7Jhdnj0j4q7szcfeAb5XsDw7F/aVTdAL+5YkaZOZBEuSVK43sCtwdfZo5zLgf8kkrZvieOCpkoQRgJTSkymlY8mcnjwNuDUbWghcllLqWfCvS0ppckTsRuYo6nlAn5RST+B5stfJppQWp5TOSintTOZ06muz1yAvBB4q6bNbSumLbS1ASmkhcA2ZZDunV8kp3ruSOeqdb1bweCHwSsnY3VNKuXX5YzI3ERuSUtqeTIKcu+73DTJfAAAQEVH4XJKkD8IkWJKkEimlt4BXgC9GRKeI6Enm2tdn22obGQMi4hLgTDJJXWmd2og4PSJ6ZE/zfQdoyYavB86JiP2zfXWNiE9GRHcyR6UTsDTbz+cpSE4j4uSIGJh9ujxbtwW4C9gzIj4bETXZf2MiYq8Kc+sVEd/J3mSrQ/a63H8E/lRS9TvZ5fgYmdOtf72RVfIEsDIiLoyIzhHRMSL2jvd/Pqp7dvlXRcQwoDAx/w0wIiJOiMzPU13ARo5eS5LUXibBkiRVdgIwgUzCOY/M9bZfbqX+zhGxClgFPEnmWtjxKaX7NlL/s8CC7CnA55A5PZmU0gzgLOBqMonsPGBiNjabzHW6jwFvZsf4Y0GfY4DHs/OYDvxzSml+SmklcCSZ63BfJ3Nd7RVAHeXWAvXA/WSS0+fJXJM8saDO4uzcXgduBs5JKb1QaSFTShvIJMkNZL5YeIvMXbN7ZKt8jcyNtFaS+QLgloK2b5G5bvlyMjfsGlKyvJIkbbLIXF4jSZLUtogYD/wypTSwrbqSJP0t8kiwJEmSJKlqmARLkiRJkqqGp0NLkiRJkqqGR4IlSZIkSVXDJFiSJEmSVDU6be0JbC19+/ZN9fX1W3sakiRJkqQPwcyZM99KKfUrLa/aJLi+vp4ZM2Zs7WlIkiRJkj4EEfFqpXJPh5YkSZIkVQ2TYEmSJElS1TAJliRJkiRVjaq9JliSJEmSNte6detoampizZo1W3sqVWu77bZj4MCB1NTUtKu+SbAkSZIkfUBNTU10796d+vp6ImJrT6fqpJRYtmwZTU1N7L777u1q4+nQkiRJkvQBrVmzhj59+pgAbyURQZ8+fTbpSLxJsCRJkiRtBhPgrWtT179JsCRJkiRtw+655x6GDh3K4MGDufzyyyvW+clPfsLIkSNpaGjg7/7u75g9e3bFerNmzeKwww5j6NChDBo0iEsuuYSWlpYtPudp06YVzeHiiy/m/vvvB2D8+PHMmDFji4+ZYxIsSZIkSduoDRs2cO6553L33Xcze/ZsJk+eXDHBPe2003juued4+umn+cY3vsFXvvKVsjrNzc0cc8wxfPOb3+TFF1/kueee44knnuC///u/t/i8S5PgSy+9lI9//ONbfJxKTIIlSZIkaRv1xBNPMHjwYPbYYw9qa2s55ZRTuPPOO8vqbb/99vnHq1evrngK8a9+9SsOPvhgjjzySAC6dOnC1VdfzZVXXgnAv/3bv3HVVVfl6++9994sWLAAgOOOO4799tuPESNGcN111+XrdOvWjYsuuoh99tmHAw44gDfffJNHH32U6dOn8/Wvf52GhgZefvllJk6cyNSpU8vmdN9993HggQcyevRoTj75ZFatWvXBVlQB7w4tSZIkSVvIpEmTyspGjBjBmDFjWLduHTfffHNZvKGhgYaGBt59911uvfXWotjEiRNbHW/RokXssssu+ecDBw7k8ccfr1j3mmuu4b/+679Yu3Ytv/vd78ris2bNYr/99isqGzRoEM3NzaxYsaLVedx444307t2b5uZmxowZw4knnkifPn1YvXo1BxxwAJdddhnf+MY3uP766/n2t7/NMcccw9FHH81JJ5200T7feustvvvd73L//ffTtWtXrrjiCv7rv/6Liy++uNW5tMUkWJIkSZL+ilJKZc9bWlry5Sml/OPC8g4dOhARRWUbNmygpaWF9evX07Fjx3z79evXl41z7rnncu655/KLX/yCSy+9lJ/97GcV57du3bqy64Dfe++9/OO1a9eW/Sbvj370I+644w4AFi5cyNy5c+nTpw+1tbUcffTRAOy333783//9XzvXEvzpT39i9uzZHHzwwflxDzzwwHa33xiTYEmSVBUKdy4hszMJmR3M3M5e4Q5jbgdv3bp1bNiwoSzeuXNnIPPzKBs2bCjqv0OHDnTt2hXInHZYuDOaUqJjx475UxP/8pe/sH79+nwspURNTQ09e/YEYNmyZUVxgLq6Onr16gXA4sWLy+bXuXNn+vTpA2R2RkuXr1u3bvTt2xeA+fPnl62fnj170rdvX1paWnj55ZfL1l2fPn3o27cv69evZ+7cuWXtd9xxR/r27ct7773HSy+9VPYaDBgwgD59+vDuu+/y4osvlsXr6+vp3bs3K1eu5MUXXyxa7yklhgwZQq9evVi+fHnF9sOHD6dHjx4sXbqUl156qax9Q0MD3bt354033qg4v7Fjx9KlSxdee+21suUD+NjHPkZdXR0vv/xyxfXz8Y9/nE6dOjFnzhxeeeWVsnguIXjmmWd49dVXi+KdOnXKx5988kkWLlxY1Ha77bbjk5/8JAB/+MMfeP3118te21z8gQceYMmSJUX99+7dm0984hMA/Pa3v2XZsmVF8Z122omjjjoKgNtvv52//OUvRetnl1124YgjjgBg8uTJvPvuu0XjDxo0iEMPPRTIHBFdt25dUXzYsGEccsghAPz0pz8tW7ejRo3ioIMOYu3atfzsZz8rS+LGjBnDmDFjWL16NZMmTSqLH3zwwey7774sX76cX/7yl2XxQw89lJEjR/Lmm28yZcqUsviECRMYNmwYCxcu5Ne//nVRLKXEcccdx6BBg3j55Ze57bbbADjkkEN44403AOjduzcTJ06kubmZ5cuXF7V//fXX6du3LxMnTmT16tVF6xYyf8v9+vVj4sSJrFq1infeeSdfnrPjjjvSsWNHVq9ezcqVK4HM3/v8+fNZsmQJO+20E01NTfTt25clS5ZQaueddwbgk5/8JOeeey5XXHFFPhYRDB8+nIcffpiVK1fmf3Lo1VdfpWfPnvnts6WlhZUrV9KrV698nQcffJD777+fxx57jC5dujB+/Ph8rKamJn/qdceOHfPvZ+2RUuKII45g8uTJ7W7THibBkj4UG9vZzO0oFsYjIr+zuXbt2rKdtQ4dOlBXVwdkbthQ+k1pp06d8jujK1euLIvX1tbmd0aXL19e1n9dXR3du3cHKNtZgMz1MNtvvz0tLS0sXry4LN69e3d69OjBhg0bWLRoUdny9+rVix49erBu3bqynZmUEv369aNHjx6sWbOG1157rWwd9u/fn+23357Vq1fz6quvlsV33XVXunfvzjvvvJOPF/Y/aNAgunXrxvLly/PX7RR+6A8dOpSuXbuydOnSivGRI0fSuXNn3njjjbKdNYDGxkZqa2t57bXX8vMvbH/ggQfSqVMnXn75ZZqamsra53aWXnjhhbL117Fjx3z82Wefze9kFL52ufiMGTPKXr+uXbvm448++ihvvfVW0frr2bMn48aNAzIf4IU7LCkl+vbtm99Zu/fee/M7HIWvzd/93d8BMH36dJqbm4uWfdddd+Wggw4C4Ne//jXr1q0rig8ePJj9998fgF/84hdlr93w4cOLTp8r3ZHfd9992XfffXn33XeZPHlyWXz//fdn1KhRrFixgltuuaXstTnkkEMYPnw4S5cuze/sFcaPOOII9txzTxYtWsTtt99eFj/66KPZY489mD9/PtOnTy8b/+STT2aXXXbhhRde4De/+U3Za//Zz36WnXbaiWeeeYZ77rmnqC3AWWedRZ8+fXj88cd54IEHysa/4IIL6N69Ow8//DAPPfRQWfzCCy+krq6O++67j0cffZRSl1xyCRHBb37zG2bOnFkUq62t5Vvf+haQeW2fe+65oni3bt342te+BmQShcJECjJJ4vnnnw9kXvvc31ZO//79+cIXvgDAlClT8tt2zm677cbnP/95IHON3rJly4rie+65J6eddhoAN998c37bzNl7773zpxj+4he/YO3atUXx/fbbj0996lMA3HTTTWXr5sADD+Soo47a6Kmb48ePZ/z48TQ3N+e3rUJHHnkkffv2ZdWqVflEodDRRx9Nnz59WLFiRcVrF0888UR69+7NsmXLuOuuu8rip556Kr169WLJkiVF205O//796dGjB4sXL6541GnQoEF0796d119/nd///vdl8b333psuXbqwaNEi/vjHPwLv/wRLRLD//vtTV1fHokWLePLJJ4tikHlf69SpE4sXL+a5554ri3/yk58kIliyZAlz584tihceXVu2bFn+cyNXJ/d5BpkvUJYuXVoUz30hAuQTrYjIx3Ofl5D5zH3vvfeKxi9sX7rc8P7nOUCnTp2KEpxcWU7nzp3p1KlTUTz3eQ6Zz8/S61Jz84sIevfuXTaXXLxDhw7ssMMOZfHc+unUqVM+4SuMd+vWDcj8je+6664bbd+5c2cGDRpUth5y8W7dujFixAgigtraWrp06QKQPxLbqVOn/FiFcvGampr8vkeh3Pqtra0tuoY3N4fcPOrq6vJ1x40bxz//8z+zYsUK+vTpw5QpU/j5z3+e/yIt12bevHn079+fiOChhx5iyJAhZev49NNP53vf+x5PPPEEhx56KM3Nzfz7v/87l1xyCb1796a+vp677rqLL3/5y/z5z3/mlVdeATLbYq9evejSpQsvvPACf/rTn8qWrVT37t3L3rtKHXDAAZx77rnMmzePwYMHs3r1ahYtWsSee+7ZZv+tMQn+G/Xaa6/l39RyOnTowL777gtkvrV9++23i+I1NTXss88+AMydO7fsvP26ujpGjRoFZHY2c98u5XTp0oW9994bgOeff57Vq1cXxbt3787w4cOBzDeXzc3NRfGePXsybNgwAGbOnFn2gdunT5/8Bvv444+XvcnusMMODB48GCD/gZOTUmLnnXdmjz32YMOGDfzhD38oO12kvr6ePfbYg/fee4+HH364LNEaOnQou+++O6tXr+bBBx8saptSYtSoUdTX17NixYr8B2JhfOzYsey6664sWbKkYnzcuHEMGDCApqamivGjjjqK/v37M3/+/Irx448/nn79+jF79mweeuihsuU7/fTT6dWrF0899RSPPPJIPpZz5pln0q1bNx577DEee+yxsp3N888/n7q6Oh588EGeeOKJsvbf+MY3iAjuuece/vznP5clkV//+tcBuOOOO3j++eeL2nfr1i1/h8HJkycXfSsPmW9FL7jgAiCzM9bazuCkSZPy32rnFO4M3nDDDa3uDF533XWt7gz++Mc/Lts2R48ezTHHHAPAtddeS6nczuD69euLbvSQM27cOA499FDeffddbrzxxrL4kUceyUEHHcQ777xTcWfz6KOPprGxkbfffptf/epXZfETTjiBUaNGsXTp0rLrhCCzMzh06FAWL15ccWfzjDPOoFu3bjQ1NVXc2Tz77LPp2rUrr732Gr/5zW/K4nvssQedO3fmlVde4b777iuLjxw5ktraWubPn5//2yo0duzYfBJcKREZP348EcG8efN46qmngPc/sGtra/NJ7Pz58/N3kczFu3Xrlo+/+uqrzJs3r2iHrVevXvl4U1NTfmcyFy/cgXr99dfz35rn+ig8FWzJkiX599VKO5PLly8vu9FI7kgcZL6gWbduXVG8cFvMnWZWOP/SIxSlO6OF/9fW1pbVy+2MdujQIb+zVTh+rk3Hjh3zcy3sM7ezWltbS//+/cviueXv0qULu+22W1HfEcF2220HZD4/CndYcvVy8V69ejFy5MiyeG78HXfcMX+NWqVkYeDAgRx44IFl4+d2NvfYY4+iHfXSne5hw4aV7Szm2kJmG8/tTBdumzmNjY0MHjy4qP/csgEcdNBBjBo1quK6AzjssMNobm4uihcmOp/4xCfy20rhtp9z3HHH5T9Tc/HCnetTTz01vy1ViufeXwvHz8Vramo466yzitZrYfsuXbpwzjnnlLXPza9nz56cd955Ze1zy7fDDjvwL//yL2XxXEIxcOBAvvrVr5a9trltY/DgwVx44YVFbeH912fEiBEMHTq07LXPvb6jR4/O71uVjgGZ9//WTr085JBD8l+UVXLooYfm34MqOeKII/JHVSuZMGECEyZM2Gg8d8R3Y3KfbRtz3HHHtRo/4YQTWo2ffPLJrcY/85nPtBrPfXZXUlNT02r7zp07tzp+9+7dOfHEEzca79WrF8cff/xG43379uXYY4/daHzHHXfMr/85c+bQo0ePonhNTU3Z6cKFamtri95HNjd+zTXX5N8L/vEf/5GGhgYg87NDjY2NHHPMMdxwww3cf//91NTU0KtXL2666aai96qc6dOnc/7553PBBRewaNEivv3tb+evSz7xxBO56aabaGhoYP/998+/t0+YMIGf/OQn7LXXXgwdOpQDDjhgo3PPOeWUUzjrrLP40Y9+VPGGWAD9+vVj0qRJnHrqqfnPye9+97ubnQRH6QdstWhsbEwf5m9Pba677rqr7LexampquOiiiwC47bbbWv1Wuq1E5Oc//3n+m5ucwkTkuuuuazURufrqq4uOqAAMGTKE008/HYD//M//bDUR+f73v190XQEUJyLf+c53ynb+conI2rVr+d73vlcUiwjGjRvH+PHjWbVqFT/84Q+Lvi2LCA477DD2339/3n77bW644Yay+Mc//nH22WcflixZwq9+9auiWERw5JFHMnToUF5//XWmTZtWFj/qqKOor6/ntdde47777iuLT5gwgf79+/PKK6/wyCOPVIz36dOHl19+uexb5Vz/22+/PXPnzs2/9oUf2BMm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38zSpUuZOXMmNTU11NfXs2bNmvx4OR07dqS5ubndc04pccYZZ/D9739/E5f2g9mavxMsSZIkSdqC3njjDSCTWE6bNo299967rM65557LpEmT8neOXrZsGRdddBH/+q//CmTu2jxz5kwApk+fzrp16wD4y1/+wg477EBNTQ2///3vefXVV9ucT/fu3Vm5cmWrdQ4//HCmTp3KkiWZX7p9++2329X3B2USLEmSJEnbsL//+7/P/wzR6aefzsiRIxk5ciRvvfUW3/72t8vq9+/fn1/+8pecffbZDB06lJ133pkLLriAcePGAXDWWWfx0HZlIvAAACAASURBVEMPsc8++/DYY4/RtWvXfN8zZsxg5MiR3HTTTQwbNqzNuU2cOJFzzjknf2OsSoYPH853v/tdjjzySEaNGsURRxyRT+Y/DJH99aGq09jYmCrdlUySJEmS2mvOnDnstddeW3sam+Xaa6/lxz/+MQ8//DC9evXa2tP5QCq9DhExM6VUdkcujwRLkiRJUhX70pe+xHPPPbfNJsCbyiRYkiRJklQ1TIIlSZIkSVXDJFiSJEmSVDVMgiVJkiRJVcMkWJIkSZJUNUyCJUmSJGkbds899zB06FAGDx7M5ZdfXrHOl7/8ZRoaGmhoaGDPPfekZ8+eFes1NTVx7LHHMmTIEPbYYw/OO+883nvvvS0+5wcffJBHH300//wnP/kJN910E5D5beGpU6du8TFzTIIlSZIkaRu1YcMGzj33XO6++25mz57N5MmTmT17dlm9H/zgBzz99NM8/fTTnH/++ZxwwglldVJKnHDCCRx33HHMnTuXuXPn0tzczDe+8Y0tPu/SJPicc87hc5/73BYfpxKTYEmSJEnaRj3xxBMMHjyYPfbYg9raWk455RTuvPPOVttMnjyZU089taz8d7/7Hdtttx2f//znAejYsSM/+MEPuOmmm1i1ahWTJk3ivPPOy9c/+uijefDBBwH44he/SGNjIyNGjOCSSy7J16mvr+eSSy5h9OjRjBw5khdeeIEFCxbwk5/8hB/84Ac0NDTwyCOP8G//9m9cddVVZXOaOXMm48aNY7/99uOoo47ijTfe+CCrqUinze5BkiRJkgTApEmTyspGjBjBmDFjWLduHTfffHNZPHea8rvvvsutt95aFJs4cWKr4y1atIhddtkl/3zgwIE8/vjjG63/6quv8sor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xxm6P6+1sjKzv3vv+c7Md2b/vnvvmRERERGR9yIz25r8Dqo02fxiLBEREREREZG/KjXBIiIiIiIiEhpqgkVERERERCQ01ASLiIiIiIhIaKgJFhERERERkdBQEywiIiIiIiKhoSZYREREREREQkNNsIiIiIiIiISGmmAREREREREJDTXBIiIiIiIiEhpqgkVERERERCQ01ASLiIiIiIhIaKgJFhERERERkdBQEywiIiIiIiKhoSZYREREREREQkNNsIiIiIiIiISGmmAREREREREJDTXBIiIiIiIiEhpqgkVERERERCQ01ASLiIiIiIhIaKgJFhERERERkdBQEywiIiIiIiKhoSZYREREREREQkNNsIiIiIiIiISGmmAREREREREJDTXBIiIiIiIiEhpqgkVERERERCQ01ASLiIiIiIhIaKgJFhERERERkdBQEywiIiIiIiKhoSZYREREREREQkNNsIiIiIiIiISGmmAREREREREJDTXBIiIiIiIiEhpqgkVERERERCQ01ASLiIiIiIhIaKgJFhERERERkdBQEywiIiIiIiKhcUVNsJndZGb7zOwdM/tGhvj1ZrbNzOJm9slBsVVmdsbMXhk03czsf5jZ22a2x8weGBS/bvD6zOwfzWxXcv7vmZklp88ys7eS+fnTRURERERERFK9axNsZhHgYeBmoBm4x8yaB83WCnwOeCbDKv4JuDfD9M8BY4FJzrlrgOcG3eY/AGtSpn0AWABMA6YA1wGLkuFHgP8MNCb/bnq3+yUiIiIiIiLhcyVHgucA7zjnWpxzfSSa1dtSZ3DOHXTO7QAGBi/snHsN6Mqw3v8C/L1zbiA5X0dK7KvAC0DqNAcUAjGgAIgCx81sFFDmnHvDOeeAHwGfuIL7JSIiIiIiIiFzJU1wHXA45XpbctqfqwFYZmZbzGylmTUCmFkdcDuJo7s+59wm4HXgaPJvtXNuTzKXtv+A/EREREREROQ9JptfjFUAXHDOzQb+H/BEcvo/A3/nHSH2mNn7gWuAMSSa3BvN7IN/yg2a2ReTTfeWEydO/Nl3QERERERERK4u+VcwzxESn931jElO+3O1AT9LXn4R+Jfk5dnAc8nvtqoCPmpmcRKf9X3DOdcNYGYrgfnAj5M5vWt+zrnlwHKA2bNnu7/AfRAREREREZGryJUcCX4TaDSz8WYWA+4GfvEXuO2fA4uTlxcBbwM458Y7597nnHsfsAL4snPu5yS+fGuRmeWbWTS5zB7n3FHgnJnNS34r9GeBl/4C+YmIiIiIiMh7zLs2wc65OHA/sBrYAzzvnNtlZn9vZreC/3NGbcBdwKNmtstb3sw2Aj8FPmRmbWa2NBn6DnCnmb0F/C/gC++SygrgAPAWsB3Y7px7ORn7MvAY8E5ynpXvftdFREREREQkbCzxhcrhM3v2bLdly5ZspyEiIiIiIpLTvJ4x+ZFVBgYGMDP/eq4ys63J76BKcyWfCRaR/wCZdkCZGc45/y9VXl4eZsbAwAADAwOBdeTn52NmXLp0iUuXLgXWHY1GMTPi8bgfT12+oKAAM6O/v594PB5YftiwYQBcvHgxsLyZUVRUBMCFCxcCy5sZxcXFAJw/fz6wfCQS8ePd3d2B/CORCCUlJQCcO3fOv//eOqLRqB8/c+ZMWhwgc1lFJAAAERVJREFUFov58dOnTwfiBQUFlJaWAuB9aV7qY1NUVERJSQnOOTo6/u2X27x5SkpKKCkp4dKlS2lxT2lpKSUlJcTjcT+euv4RI0ZQXFxMX19fxvVXVFRQXFzMhQsXMq6/qqqKoqIient76ejoCNROTU0Nw4YNo7u7mxMnTgTidXV1FBQUcO7cuYzrHzduHLFYjM7OTlK/VNBbz4QJE4hGo5w8eZKTJ08G4k1NTUQiEY4fP86pU6cC8ebmZsyM9vZ2Tp8+nRbPy8tj8uTJALS2tnLmzJlA3XvxlpYWzp07F6jr5ubET9vv37+frq70X+wbNmwY11xzDQB79+6lp6cnLV5SUsLEiRMB2LlzJxcuXEiLDx8+nMbGRgC2b99OX19fWryiooKGhgYAtm7dGqjt6upqxo8fD8DmzZsZrLa2lvr6ei5dusSbb74ZiNfV1TF27Fj6+vrYunVrID5u3Djq6uro7e3l97//PZBeew0NDdTW1tLd3c0f/vCHwPJNTU2MHDmSs2fPsmPHjsDykydPprKyklOnTrFz587A8tOnT2fEiBF0dHSwe/fuwPKzZs2irKyM9vZ29u7dG1h+7ty5FBcX09rayv79+wPLL1y4kMLCQlpaWjhw4EBg+cWLF5Ofn8++ffs4dOiQP91bx0c+8hHMjF27dnH48OG0ZSORCEuWLAESz217e3vabcdiMT784Q8DsGXLFo4fP5627uLiYhYvTnzqa9OmTWmvDUjUzvXXXw/Ahg0bArVdWVnJwoULAVi7di3d3d1p8draWubPnw/AypUr6e3tTbv9MWPGMHfuXABeeukl+vv7025//PjxzJo1C4Cf/vSngceusbGRa6+9lng8zosvvhiINzc3M3nyZHp7e3n55ZcD8WnTpjFp0iS6urpYuTJ4gt6sWbNoaGigs7OTNWvWBOLz5s2jvr6ejo4OXn/99UB84cKF1NXV0d7ezoYNGwLxxYsXU1NTw6FDh9i0aVMgvmTJEiorKzlw4EDgteWc42Mf+xhlZWXs3buXbdu2pcUAbr/9doqKitixY4f/2kiNL1u2jFgsxpYtW9i9e3fgffezn/0sZsamTZvYt29f4H3t3nvvBWD9+vW0tLSkxYcNG8anPvUpANasWUNra2tavKysjGXLlgHwyiuvBGq3qqqKO++8E4AVK1YEtnujR4/mE59I/NroM888Q2dnZ1ru9fX13HLLLQA8+eSTgffN97///Sxdmjjxc/ny5YH3xebmZm688UYAvv/97wcem2uvvZYPfvCD9Pf388Mf/pDB5syZw9y5c+np6eHxxx8PxBcsWMCsWbM4c+YMTz31VCB+4403MnXqVDo6Onj22WcD8aVLlzJp0iTa2tpYsWJFIP7xj3+choYGWlpaeOmllwL533XXXYwdO5a9e/fy6quvBuKf+cxnqK2tZfv27axZsyYQ/8IXvkBFRQW/+93vWLduXeD2v/KVr1BaWsrGjRvZuHGjP91bz4MPPkhBQQFr167ljTfeCMS/9a1vYWa8+uqradsN5xyxWIyHHnoIgBdeeIG33nor7bZLSkp48MEHAfjJT37CnXfeSSwWC+R4NVATnKN+/etf+wMCr2jz8/P5/Oc/D8C6det455130pYZNmyY/6a5atUqDh06lPbCGj58OPfccw+Q2CC2t7enrb+6upq77roLSGwQBw+GR48eze233w7A008/TWdnZ9r66+vrufXWWwF4/PHH6enpSYs3NTVx8803A/CDH/zAf1P05pkyZYo/4Pjud78beFOYOXMmN9xwA/39/Xzve98LxOfPn8+CBQvo6enh4Ycf9qd7891www3MnTuX06dPs3z58kD8pptuYsaMGRw7downnngiEL/tttuYMmUKhw4d4sc//nEgvmzZMpqamnj77bd57rnn0mKQ2OCNHz+enTt3ZnxT/eIXv8jo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\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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eOmll3jmmWf4+c9/vtXH3TIEX3rppXzuc5/b6o9TjiFYkiRJkj6mnnnmGfbaay/22GMPKisrOemkk7jnnntKtuvdu3fh9sqVK8ueQnz77bdz2GGH8fnPfx6A7t27c80113DllVcC8KMf/YirrrqqsP1+++3HwoULATjuuOMYO3Yso0eP5vrrry9s07NnTy666CIOPPBADj74YN5++22efPJJZs6cyXnnnUd1dTWvv/46kyZNYtq0aSVj+t3vfschhxzCmDFj+PKXv8yHH364ZS9UEa8OLUmSJElbyeTJk0vaRo8ezbhx41i3bh233XZbSb26uprq6mpWrVrF1KlTm9UmTZrU6uPV19ez2267Fe4PHTqUp59+uuy21157LT/72c9Yu3Ytjz76aEl9zpw5jB07tlnbnnvuyerVq1m+fHmr47jpppvo378/q1evZty4cXzpS1+iqqqKlStXcvDBB/OTn/yEH/zgB/zqV7/ihz/8IRMnTuSYY47hhBNO2GSfy5Yt47LLLuPhhx+mR48eXHHFFfzsZz/j4osvbnUsbTEE76Def/99Vq1a1awtIthll10AeO+991i9enWz+k477VSov/vuuyVXSKuoqGDQoEFAbkKtXbu2Wb1z584MHDgQgIaGBtatW9esXllZyYABAwB4++23Wb9+fbN6165dqaqqAuCtt95iw4YNzerdunWjf//+ACxZsoSUUrN69+7d6devH5D7x9xSz5496dOnDxs3bmTJkiUl9V69etGnTx82bNhQtt6nTx969+7NunXreOutt0rq/fr1o2fPnqxdu7Zsvaqqih49evDRRx/x9ttvl9QHDhxI9+7dWbVqFQ0NDSX1nXfema5du7Jy5cqy9cGDB9OlSxdWrFhBY2NjSX3IkCF07tyZ999/n3fffbekvttuu1FRUcHy5ct57733Suq77747O+20E++++y7vv/9+Sb3psv7Lli1jxYoVzWoRwbBhw4Dc3Gh5BK5Tp0586lOfAnJzo+Xc7dy5M0OHDgVg6dKlJXOzsrKSIUOGALm5sWbNmmb1rl27MnjwYCD3awhazs3u3buz8847A/Dmm2+WzL0ePXoU5v6iRYtKvtfSq1evwtxesGBByWvTu3dvqqqq2LhxI4sWLSqp9+3bl379+rF+/XoWL15cUu/fvz99+vQp/B7Blqqqqujduzdr1qwpO3cH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zj777ML2xxxzDI899hgA3/rWt6ipqWH06NFccsklhW2GDRvGJZdcwpgxY9h///3585//zMKFC/nlL3/J1VdfTXV1NU888QQ/+tGPuOqqq0rGNHv2bA4//HDGjh3LhAkTWLp06Za8TM20ayVYkiRJktS2yZMnl7SNHj2acePGsW7dOm677baSetNpyqtWrWLq1KnNapMmTWr18err69ltt///OsZDhw7l6aef3uT2ixYtYsGCBRx5ZOnJtHPmzGHs2LHN2nr37s2wYcOYP39+q+P4yU9+Qv/+/dmwYQPjx4/nxRdf5IADDgBgwIABPPfcc/ziF7/gqquu4oYbbuCss86iZ8+efP/73wfgkUceKelz3bp1fPe73+Wee+5h4MCB3HXXXVx00UXcdNNNrY6lLYZgSZIkScqIO++8kxNOOIFOnTpt1X6nTp3K9ddfz/r161m6dClz584thODjjz8egLFjx/I///M/7e7zlVde4eWXX+aoo44Ccqd+Dx48uMNjNQRLkiRJ0lbS2spt586dW6137969zZXfloYMGcLixYsL9+vq6hgypOQySgV33nkn1157bdnaqFGjSi5I9cEHH/DWW28xcuRIXn75ZTZu3FioffTRRwAsWLCAq666imeffZZ+/foxadKkQg2gS5cuQO706vXr17f7uaWUGD16NE899VS792kPvxMsSZIkSR9T48aN47XXXmPBggWsXbuWO++8k4kTJ5bd9s9//jPvvfcehxxySNn6+PHjWbVqVeEqzRs2bOCf//mfOfvss+nWrRvDhg3j+eefZ+PGjSxevJhnnnkGyAXlHj160KdPH95++23uv//+Nsfdq1cvVqxY0eo2I0eOpKGhoRCC161bx5w5c1rdpz0MwZIkSZL0MVVRUcE111zDhAkT2HfffTnxxBMZPXo0ABdffDEzZ84sbHvnnXdy0kknERFl+4oIpk+fzrRp0xgxYgRVVVXstNNOXHTRRQAcdthhDB8+nFGjRnHOOecwZswYAA488ED+6q/+in322YdTTjmFww47rM1xf/GLX2T69OmFC2OVU1lZybRp0zj//PM58MADqa6ubvZrlbZU5H4jUfbU1NSk2tra7T0MSZIkSR9j8+bNY999993ew9gmnnzySU4++WSmT59eCLw7qnJ/DxExO6VU03JbvxMsSZIkSSpx6KGHsmjRou09jK3O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\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["FuturewQuantiles(TFTAttentionWeights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":3001},"id":"6iZwh4dRwGg_","executionInfo":{"status":"ok","timestamp":1642351289084,"user_tz":300,"elapsed":1152,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c7550d91-9955-48d2-ac1e-6b5771e584c0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"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PlzXXHONRo4cqXPOOUf19fWaP3++KioqdPnll6usrEz19fU644wzVFFRkTSmxx9/XCeeeKLKysr09a9/XaFQqMOePzOoAAAAADq9//P8Sq3asq9d1zmib55u/ZeRR9Xnpptu0m233abJkyfrZz/7mTIzMxPqK1eu1MyZMxOWlZeXe6fetiQrK0vPPvus8vLytHPnTk2cOFHnn3++JKmyslJPPfWUHnzwQV1yySX63e9+pyuuuEL33HOP5syZo/Ly8hbXu3r1aj399NN64403lJ6erm9+85t64okndNVVVx3V824rAioAAAAAfAJ++tOfqqioSA0NDbr22mt155136pZbbmmXdTvn9G//9m96/fXXFQgEtHnzZm3fvl2SvM+9StL48eO1cePGNq/3lVde0ZIlSzRhwgRJUn19vXr16tUuY06FgAoAAACg0zvamc6O0KdPH0lSZmamrr76as2ZMyepzYgRI7RkyRJNmzbNW7ZkyRJvljMtLU3hcFiSFA6H1dDQIEl64okntGPHDi1ZskTp6ekqKSnRwYMHve3FBINB1dfXt3nMzjnNnDlTP/3pT4/y2X40fAYVAAAAAD4BW7dulRQJfQsWLNCoUaOS2syePVtz5871rvBbU1Ojm266Sf/+7/8uKXJ13SVLlkiSFi5cqMbGRknS3r171atXL6Wnp+u1117Tpk2bjjie3Nxc1dbWttpm8uTJmj9/vj788ENJ0q5du9q07o+KgAoAAAAAHeTcc8/1vsrl8ssv1+jRozV69Gjt3LlTN998c1L7Pn366PHHH9e1116r0tJS9e3bV9/+9rc1adIkSdI111yjv/3tbxo7dqzeeustZWdne+uuqKjQ6NGj9dhjj2nYsGFHHNusWbN03XXXeRdJSmXEiBG6/fbbdc4552jMmDE6++yzvaDdEcw512Er/yjKy8tdqitHAQAAAMDRWL16tYYPH36sh/Gx3Hffffrv//5vvf766+revfuxHs5RS/VvYGZLnHMpr8zEDCoAAAAA+NQ3v/lNLV++/FMZTj8KAioAAAAAwBcIqAAAAAAAXyCgAgAAAAB8gYAKAAAAAPAFAioAAAAAwBcIqAAAAADQQV588UWVlpZq8ODB+tnPfpayzXe/+12VlZWprKxMQ4cOVbdu3VK2q66u1rRp0zRkyBANGjRI119/vQ4dOtTuY/7rX/+qN99803t8//3367HHHpMU+e7U+fPnt/s2YwioAAAAANABQqGQZs+erRdeeEGrVq3SU089pVWrViW1u+uuu7R06VItXbpU3/rWt3ThhRcmtXHO6cILL9SXvvQlVVZWqrKyUvX19brhhhvafdzNA+p1112nq666qt23kwoBFQAAAAA6wDvvvKPBgwdr0KBBysjI0PTp0/Xcc8+12uepp57SjBkzkpa/+uqrysrK0tVXXy1JCgaDuuuuu/TYY49p//79mjt3rq6//nqv/Xnnnae//vWvkqRvfOMbKi8v18iRI3Xrrbd6bUpKSnTrrbdq3LhxGsletAQAACAASURBVD16tN5//31t3LhR999/v+666y6VlZXp73//u37yk59ozpw5SWNasmSJJk2apPHjx2vKlCnaunXrR/kxJUj72GsAAAAAgE+BuXPnJi0bOXKkJkyYoMbGRj3xxBNJ9dipt3V1dXrmmWcSarNmzWp1e5s3b1b//v29x8XFxVq0aFGL7Tdt2qQNGzbozDPPTKqtXLlS48ePT1iWl5enkpISrV27ttVx3HHHHerRo4dCoZAmT56sZcuWacyYMZKkwsJCvfvuu7rvvvs0Z84c/eY3v9F1112nnJwc/eAHP5AkvfLKK0nrbGxs1Le+9S0999xz6tmzp55++mnddNNNevjhh1sdy5EQUAEAAADAB+bNm6eLL75YwWCwXdf7zDPP6IEHHlBTU5O2bt2qVatWeQE1djrx+PHj9fvf/77N61yzZo1WrFihs88+W1LkdOY+ffp87LESUAEAAAB8JrQ245ment5qvWvXrkecMW2uX79+qqqq8h5XV1erX79+LbafN2+e7r333pS1ESNGJF2caN++fdq2bZtKS0u1YsUKhcNhr3bw4EFJ0oYNGzRnzhwtXrxY3bt316xZs7yaJGVmZkqKnDLc1NTU5ufmnNPIkSP11ltvtblPW/AZVAAAAADoABMmTFBlZaU2bNighoYGzZs3T+eff37Ktu+//752796tk08+OWV98uTJqqur866mGwqF9P3vf1/XX3+9unTpopKSEi1dulThcFhVVVV65513JEVCbHZ2tvLz87V9+3a98MILRxx3bm6uamtrW21TWlqqHTt2eAG1sbFRK1euPOK6j4SACgAAAAAdIC0tTffcc4+mTJmi4cOH65JLLtHIkSMlSbfccosWLlzotZ03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nYGFlpn5i41Lly4FFlrJl1FevHgxsND6pHh2dra/GOro6AgsxCKRiL/Q9zblkuXk5PiLrcGX8Q0lHo1Gyc/PxzkXODsMib6Vl5dHf39/aN/Ny8vz+15Y3/ykeH5+/h+073l9q7e3l56enpSxNnl8FhH5Y2Vmzc65+aExFagiIiIiIiLyWfm4AnUon+IrIiIiIiIi8genAlVEREREREQyggpUERERERERyQgqUEVERERERCQjqEAVERERERGRjKACVURERERERDKCClQRERERERHJCCpQRUREREREJCOoQBUREREREZGMoAJVREREREREMoIKVBEREREREckIKlBFREREREQkI6hAFRERERERkYxgzrl055DCzM4Ax9OdxycoA86mOwm5YtSeY4vac2xRe44tas+xRe05tqg9x5ZMb89JzrnysEDGFaijgZm96Zybn+485MpQe44tas+xRe05tqg9xxa159ii9hxbRnN76hJfERERERERyQgqUEVERERERCQjqEAdnh+nOwG5otSeY4vac2xRe44tas+xRe05tqg9x5ZR2556D6qIiIiIiIhkBJ1BFRERERERkYygAvVTMLOvmtkhM3vHzL6T7nxk+Mysxsx2mNkBM3vbzB5Md04ycmaWbWa7zezFdOciI2Nm48zsaTNrMbODZlab7pxk+MzsLwfG2v1m9qSZ5aU7Jxk6M/t3MzttZvuT7is1s21mdmTga0k6c5Sh+4j2/NuB8XafmT1nZuPSmaMMXVh7JsU2mpkzs7J05DZcKlCHyMyygX8BlgGzgLVmNiu9WckI9AIbnXOzgBuBP1d7jgkPAgfTnYRcEf8EbHHOXQPMRe06apnZVcBfAPOdc7OBbOCO9GYln9JPga8Ouu87wHbn3NXA9oHvZXT4KcH23AbMds7NAQ4Dj3zWScmw/ZRge2JmNUA9cOKzTmikVKAO3Q3AO865o865buApYHWac5Jhcs61Oud2DdzuILH4vSq9WclImNlEYDnwk3TnIiNjZsXAzcC/ATjnup1z7enNSkYoAuSbWQSIAe+nOR/5FJxzrwHnBt29GvjZwO2fAbd/pknJsIW1p3Nuq3Oud+DbN4CJn3liMiwf8foE+Afgr4BR94FDKlCH7irgvaTvT6KCZkwws8nAF4Cm9GYiI/SPJAbi/nQnIiM2BTgD/MfAJds/MbOCdCclw+OcOwX8HYld/FbgvHNua3qzkiugwjnXOnD7t0BFOpORK+rPgP9OdxIyfGa2GjjlnNub7lyGQwWq/FEzszjwDPCQc+5CuvOR4TGzFcBp51xzunORKyICzAMec859AbiELh8ctQbem7iaxMZDNVBgZnenNyu5klziT0KMurM0EmRmf03ibVCPpzsXGR4ziwGPAt9Ndy7DpQJ16E4BNUnfTxy4T0YpM8shUZw+7px7Nt35yIgsBFaZ2TESl98vNrP/TG9KMgIngZPOOe+qhqdJFKwyOt0K/J9z7oxzrgd4FliQ5pxk5NrMrApg4OvpNOcjI2Rm64AVwF1Of4dyNJtKYkNw78C6aCKwy8wq05rVp6ACdej+F7jazKaYWZTEBzw8n+acZJjMzEi8v+2gc+7v052PjIxz7hHn3ETn3GQSr82XnXM6QzNKOed+C7xnZjMG7voKcCCNKcnInABuNLPYwNj7FfShV2PB88C9A7fvBTalMRcZITP7Kom3yaxyznWmOx8ZPufcW865Cc65yQPropPAvIG5dVRQgTpEA28cfwD4HxIT6385595Ob1YyAguBPyVxpm3PwL/b0p2UiPg2AI+b2T7g88DfpDkfGaaBM+FPA7uAt0isPX6c1qTkUzGzJ4GdwAwzO2lm64EfAEvM7AiJs+Q/SGeOMnQf0Z7/DBQC2wbWRP+a1iRlyD6iPUc10xl8ERERERERyQQ6gyoiIiIiIiIZQQWqiIiIiIiIZAQVqCIiIiIiIpIRVKCKiIiIiIhIRlCBKiIiIiIiIhlBBaqIiIiIiIhkBBWoIiIiIiIikhFUoIqIiIiIiEhG+H+nuu8u/es2pAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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pWHDhp3w93DSpEm6/fbb9Zvf/Cbp4kiS1LZtW82ePVs33XSTampqJEkPPfSQc9xTZWLzlb2iuLjYns376gAAAADnu9i1iLGzi3V1dWrZsqUkaf/+/Tpy5IjC4bBTk6TCwkJJ0po1a7R3796EgJiWlqaxY8dKqr+v544dO5xaOBxW69atnemvv//977Vz586E8XTp0sUJUo8//rjKy8sT6gUFBbrlllskSbNmzVJVVZWCwaACgYCCwaB69OihSy65RJL0yiuvyFqbUO/QoYN69uwpqX4xIb/fr2AwqKqqKvXq1Ut+v19+v9+ZMhub1ppstdzPipdeeknTpk3Tm2++qa5du57r4TRq7dq16tOnT8I2Y0yptbY4WXvOoAIAAABnUDgcVnV1dUIADIfDatu2rVJSUnTgwAHt3r3b2R5rU1RUpLS0NG3ZskUff/yxq//48eOVlpam0tJSffTRR0491ua73/2uAoGAXn31VddKsT6fz1ld9a233tKyZcsS6mlpaU5AXb16tVavXu2Ev0AgoFatWjltA4GA0tPTEwJiLPxK0tChQ1VVVZXQP3bWUZJuvPFGSUroHwgcjyV33HFHk+/vV7/61Sbrffv2dR6vXbtWKSkpzvPYWc3zwdVXX62rr776XA/jjCOgAgCAU2Ktdc6exP/KzMxUZmamamtrtWXLFmd7bNZWp06dlJubq6qqKq1fv961365du6p169aqrKx0VpqM1717d+Xk5OjQoUPavHmzq15QUKAWLVpo//79SVek7NWrlzIzM7Vv3z5t377dVS8sLFRaWpr27t2rsrIyV71///5KSUnR7t27tWvXLle9qKhIfr9fZWVl2rNnj6s+ePBgGWO0detW11kkn8/n3EZi8+bNqqioSKgHAgFddNFFkqSPP/7YdWuJ1NRUDRw4UFL9F/OGUxkzMjLUv39/SdKqVatc9yxs0aKF8+V+2bJlznV1MS1btlTv3r0lSaWlpc60vtjvbW5urnr16iVJWrx4sWuF0fbt2zv1N99809ke+9m5c2ddeOGFCofDSes9evRQQUGBampqtHDhQle9T58+6t69uyorK5P2HzBggLp166aDBw8mrQ8ZMkRdunRReXm5Fi1aJGttwhnI0aNHq3PnztqyZYvmz5+fEB7D4bBuvfVW5efna82aNXrxxRfV0B133KGOHTtq06ZN+vvf/+6qFxQUOJ+90tJSBQIBBQIB+f1+BQIB50yn3+9XamqqMjMzE9rE9OzZUxkZGQl9Y2cPjTEaPny4BgwYkNA3NkVVkiZOnKjrrruu0SB32WWXJd0eM2DAgCbrsam+QDIEVAAAPsNiq0jGT7Xz+/1q0aKFpPoVHmtraxMCZKtWrZSfny9rrd58882EvuFwWD169FBRUZFCoZCeeuopVwAdOnSovvSlL+no0aMJN4WPGTNmjEaMGKHKysqkqzuOGzdOubm5OnToUNIb1k+cOFGtW7dWRUVF0vqkSZOUk5OjvXv3Jq3fdtttatGihXbt2qX58+e76rfffrsyMzO1ffv2pPUuXbooLS1Nmzdv1uuvv+6q9+zZUykpKfr444/15ptvuup9+/aV3+/XmjVrtHjxYlc9FkBXrVqlhpc1BYNBp75s2TKtWLEioZ6VleUE1NLSUlfAb926tRNQP/jgA2eRlJj27ds7AXXx4sWugN21a1cnoL7zzjvat2+f67XHAuqiRYtci6j069fPCaD/+te/nAAbM2jQIKf+1ltvOdtjQWjYsGG68MILFYlEtGTJEtc0zPT0dBUUFCgcDmv58uWuetu2bdW9e3eFQiGtX7/eVc/Pz5ck1dbWatu2ba567BrI2tpa7d2717k2MT7gxcbRuXPnhAAYCASUnZ0tScrLy9NXv/pVV8CMXVNYWFiozp07J/SNhc7Y+9DUdYKx+3I2pqCgQAUFBY3W27Vrp3bt2jVajw+7wKeNa1ABADgNsXAXf5YldmsBSdqzZ48qKyudWl1dnYLBoHM9zvLly3XgwIGEkJiTk6ORI0dKkubPn699+/YlBMROnTpp4sSJkqT/+q//cp1F69OnjzOF7tFHH9WxY8cS6gMHDtQ111wjSfrZz34mY4zzJTkQCKioqEgjR45UJBLRs88+mzAFLxAIqGfPnurVq5dCoZA++OCDhL6BQEDt27dXmzZtFA6H9cknnygYDMrv9zuLjKSnpys1NVXhcNh1Bk+qP8uXkpLSaD0zM1PBYFChUMhZWbNhPRAInLBeW1vrOkMYq/v9ftXU1LgCllQfEn0+n2pqalRbW5u0boxpVj22smjDuiRVV1c7Z8xijDHKyMhw6pFIxFVPT09vtO7z+ZSWliZJqqmpSVqPhaSamho1/J7o8/mc6ZLx700s4Pl8PmeqZjgcdgXA82l6JT4bkl3/iE8X16ACAM471tqEgBcOh5WVlSW/36/KykodPHjQVb/wwgsVCAS0c+dO7dixI6FWV1enSy+9VH6/XytXrtTHH3+cUI9EIrrtttskSQsXLtSqVasS+gaDQX3/+9+XJM2bN0+rV69OGG92dramTZsmSfrnP//pmqaam5vr/GW9dOlSbdu2zZliFwgE1LFjR6dtJBJxzqzEguIFF1zg1IcNG6ba2tqEABl/rdjNN9+cEECDwaATQCTpxz/+caOBwefz6Wtf+1qjvy/BYFAjRoxotN7wtSSrx1+3drL1YDConJycU66npKQkXJvWUGpqasJ79WnXY0HybNWbOvaZqMdfUwgAzcWfHACAkxY7q2KMUTgc1uHDh51bCsTOAnbo0EFZWVk6ePCg1q1bl1APhUIaNmyYcnNztWXLFr311lsJq0WGQiHdfPPNat++vUpLS/W3v/3NNYapU6cqNzdXK1as0BtvvOGqT5s2TdnZ2dqwYYMWLVqUUAsEAho5cqT8fr8OHDignTt3JkzjCwQCzrVaOTk5ysvLS6jHh5qBAwcmTPWLn6Yn1U93HTlyZMK+46/1+trXvia/399oSDzRAhgnul1A586dm6xzNgsA4CUEVAA4j8TO8sXuOZeenq66ujqVlZW5AmLHjh3VoUMHHTt2TG+//XZCOAyFQs61Yvv27dPcuXNd97S7+uqrNXDgQO3atUtPPvmkayw33nij+vTpo3379um1116TJOdeccFgUP369XOmwdbV1TkLfsTqsRDYsWNHjRo1KiEABgIBZWZmSqqfztq2bdtG68OHD9fQoUOdms/nSwhlI0eOdKbTJjN48GDnmsBkTnS/t6au85I4ywQAnydTpkzRv/71L2d2x+zZs5NeT/zOO+9o2rRpOnz4sKy1+u53v6u77rrrjI9n9uzZuvzyy53ZLt/61rc0bdo0FRYWKj8/XyUlJZ/6olb8rQgAn4KqqirV1tYmBLzU1FRnquaqVat07NixhOsQ27Zt6yxmMm/ePOd6tVi9d+/eznWCjz76qEKhUML1ZCNGjNCYMWMUCoX0pz/9yTWmL3/5y+rQoYNCoZA+/PBD58xe7Ffs2rmUlBRdcMEFzvZYu1jwatOmja655pqEvoFAQG3atJEkdevWTT/84Q+d6xAbnrHr1q2bunXr1uh716FDB3Xo0KHReqtWrRKmtDbU1BROAAA+bb/85S913XXXNVrfs2ePbr75Zr300ksaNGiQ9u3bp7Fjx6pDhw7O+gFnyuzZs9WvXz8noP7hD384o/s/FQRUAJ8bsesYYyEwEok417ft3btXR44cSQiQgUDAWSq/tLRU5eXlCfXs7GxdccUVkqS//vWv2r17d0I9Ly/PuY7xj3/8o+t2ET179tTkyZMlSW+88UbC7SCMMerfv78TUMvLy51rH2NnB2PXl/l8Pg0aNChhIZvYTcul+oB26623JgTIYDDo9M/Oztb06dMbfd+ys7N1/fXXN1rPzMx0Vg1NJnYmFwAAnNjjjz+uKVOmaNCgQZLq1y34xS9+oZ/+9Ke65pprNGXKFI0bN84JuVlZWaqsrFRlZaUmTJigAwcOKBQK6aGHHtKECRO0detWXXnllfriF7+oxYsXKy8vTy+//LJeeeUVlZSUaPLkyUpPT9d7772nK6+8UjNmzFBxceL6Rc8884x+85vfqLa2VkOHDtVvf/vbs7baMwH1PBS7Z1f8gh6xFQmPHj2qAwcOuOo9evRw7um2fft2ZxXKmCFDhiglJUXbtm1Lek+4YcOGye/3a/Pmzdq9e7erHltEY8OGDfrkk08San6/37mGat26da4v8SkpKRoyZIik+htHN1ytMj093fkfeOXKla57vmVlZTlfnpctW6ajR48m1HNycpxl5UtLS10rOrZu3dpZzGTJkiWuFRfbtWvnTPFbvHixa0XEDh06qEePHrLW6t1333W9N506dVJ+fr7C4bDef/99V71Lly7q0qWLampq9OGHH7rq3bp1U15enqqqqrR06VJXvaCgQO3bt9fhw4edm3LH3/etsLBQ7dq10/79+7Vs2TLXPeGKioqUm5urvXv3Ju0/bNgwtWrVSmVlZVq+fLmr/8iRI5WTk6MtW7Zo+fLlrv5jx45VZmam1q1bp1WrVrn6x25KvmLFCmchmvg2kyZNkt/v14cffqh169YlBFBrre6++25J0ssvv6yPPvoo4b3JyMjQvffeK6n+dglr165NqOfk5DgBdf369dq2bVtCAIyXnZ2tSCSSUI/dTkCqP1sZCoUS6vE3Lf/mN78pn8/n1BueaTzRTcvHjh3baM3n86l79+5N9gcA4Hz3n39brTW7Dp+44Uko7Jit+6/qe1J9pk+frgcffFCjR4/WI4884lpwbPXq1c4/cMcUFxdrzZo1Te43LS1N8+bNU3Z2tvbt26dhw4Zp/Pjxkuq/g8+ZM0e///3vdcMNN+ivf/2rbrnlFs2cOTNpII23du1aPffcc3r33XcVDAZ111136dlnn9Wtt956Uq+7uQiopyH+3nPxN1COBcD4mzfn5uYqOztbVVVV2rBhg2u1yd69e6tt27aqqKjQkiVLEvrW1dVp5MiR6tixo7Zu3ao33njDFTBvvPFGderUSStWrEh6Y+g777xT7du315o1a/TKK6+46vfcc49at26tzZs36x//+IerXlRUpJSUFG3atCnhvmUxF198sfx+vz7++GNXyDLGOAF1zZo1rpCQlpbmBNSVK1cmXQ0zFlA/+ugjbdy4MaHetm1bJ6B++OGHrpuu5+XlOQH1/fffd900vVu3bk5Afeedd3TgwIGEeu/evZ2A+tZbb7kC7oABA5yAunDhQuem5DFDhgxxAuqCBQvU0IgRI5yAmqz+5S9/WV26dFF1dXXS+hVXXKG8vDwdPXo0aT0jI8MJqAsXLnTV27Ztq3bt2ungwYN6++23k94zLjc3VwcPHlRpaWlCzRijfv36qVWrVjp06JBWr17t6j906FBJ0uHDh5378cW3iQX+o0ePavfu3a7+scBfXV2tQ4cOufrHwmo4HFZNTY0CgYDS09OVnZ2dsNDNhRdeqOzs7ISAGP8XwqWXXqrhw4cn1OND6M033+x67+KNGTOmyXrsM9aYplYaBQAA54ef//znat++vWpra3XHHXfo0Ucf1X333XdG9m2t1Y9//GO99dZb8vl82rlzp/bu3Sup/vtu7FrXwYMHa+vWrc3e7z//+U+VlpY638ePHTt2wvUVTgf3QT1JR44c0cyZM52AGHv/Lr/8cg0fPlz79u3TzJkzXf3GjRun4uJi7dq1S7NmzXLVJ06cqAEDBmj79u2aM2dOwmqPfr9fV155pfLz81VWVqZFixa56sOHD3fOcq1duzah5vf71adPH2VkZOjgwYMqLy9PWEjE7/crNzfXuSdcLHDH7lcn1S/iYYxRXV2d6wxhc+qxL/rhcNh1T7WzXY/dXkFS0vvNnW7d5/M5Uxyaqseml55OveH98GJ1n8/XrHrs9ybZfekAAADON16+D+qiRYs0Y8YM/f3vf0/Y/pOf/EQ+n08PPvigs23hwoV6+OGHtWDBAn3rW9/S5ZdfrhtuuEGRSERpaWmqra3V7Nmz9eqrr+qZZ55RMBhUfn6+s4r9uHHjtGrVKknSjBkzVFlZqQceeECjRo1KOIMa/zy2SNKcOXO0a9cu/fznPz+l18l9UM+ylJQUXXTRRa7VIrt27SpJatGiha699lrX7Qpii4W0a9dO99xzj6t/LOB06dJFP/zhDxs9fqdOnXTLLbc0Wr/gggsS7o/XUMuWLZu8p9yJ7gkXG/Op1k+0WuXZrjeclvlp1mOrl55OvanX15z62bpWAAAAACe2e/dudejQQdZavfTSS0lnWN19990aOnSoJk6cqKKiIlVUVGj69Ol65JFHJNXPbistLdUNN9yg+fPnOydIDh06pHbt2ikYDOrNN9/Utm3bTjieFi1a6MiRI022GT16tCZMmKDvfe97zmVhR44ccfLPmUZAPUmpqanOoiiN1WOLmiQTCAQSrksDAAAAcP76yle+oj/84Q/q2LGjJk+erPLycllrVVRUpCeeeMLVvkOHDnrmmWd0xx136NChQ9q6datmz56tSy65RJJ0++23a8KECRo4cKCuuOIK57ZqkydP1lVXXaX+/furuLhYvXv3PuHYpkyZojvvvNNZJCmZwsJCPfTQQ7r88sud9TYef/zxsxZQmeILAAAA4Lzk5Sm+zfXb3/5W//M//6O33nqryduqedXJTvH1JdsIAAAAADj37rrrLq1cufIzGU5PBQEVAAAAAOAJBFQAAAAAgCcQUAEAAAAAnkBABQAAAAB4AgEVAAAAAOAJBFQAAAAAOEtee+019erVSwUFBXrkkUeStvne976noqIiFRUV6cILL1TLli2TtisrK9OECRPUs2dPde/eXVOnTlVNTc0ZH/OiRYu0ePFi5/kTTzyhp59+WlL9vVNfeOGFM37MmGYFVGPMFcaY9caYjcaYHyWppxpjnovWlxhj8qPbU4wxfzLGrDTGLDfGjDqjowcAAAAAj6qrq9Pdd9+tV199VWvWrNGcOXO0Zs0aV7vHHntMy5Yt07Jly/Sd73xHEydOdLWx1mrixIm6+uqrtWHDBm3YsEHHjh3Tvffee8bH3TCg3nnnnbr11lvP+HGSOWFANcb4JT0u6UpJhZJuMsYUNmj2TUkHrLUFkh6T9Gh0++2SZK3tL2mMpP9njOGsLQAAAIDz3gcffKCCggJ1795dKSkpmjRpkl5++eUm+8yZM0c33XSTa/vChQuVlpamr3/965Ikv9+vxx57TE8//bQqKys1e/ZsTZ061Wk/btw4LVq0SJL07W9/W8XFxerbt6/uv/9+p01+fr7uv/9+DRo0SP3799e6deu0detWPfHEE3rsscdUVFSkt99+Ww888IBmzJjhGlNpaakuueQSDR48WGPHjtXu3btP5W1KEGhGm4slbbTWbpYkY8xcSRMkxUf/CZIeiD5+QdJMY4xRfaBdKEnW2k+MMQclFUv64LRHDgAAAAAnYfbs2a5tffv21ZAhQxQKhfTss8+66rGpt1VVVXr++ecTalOmTGnyeDt37lTnzp2d5506ddKSJUsabb9t28sMxagAACAASURBVDZt2bJFl156qau2evVqDR48OGFbdna28vPztXHjxibH8bOf/UytW7dWXV2dRo8erRUrVmjAgAGSpNzcXC1dulS//e1vNWPGDP3hD3/QnXfeqaysLP3gBz+QJP3zn/907TMUCuk73/mOXn75ZbVt21bPPfecpk+frieffLLJsZxIcwJqnqQdcc/LJA1trI21NmyMOSSpjaTlksYbY+ZI6ixpcPRnQkA1xtwh6Q5J6tKly8m/CgAAAAD4jJs7d66uu+46+f3+M7rf559/XrNmzVI4HNbu3bu1Zs0aJ6DGphMPHjxYL774YrP3uX79eq1atUpjxoyRVD+duUOHDqc91uYE1NPxpKQ+kkokbZO0WFJdw0bW2lmSZklScXGxPctjAgAAAPA51NQZz2Aw2GQ9IyPjhGdMG8rLy9OOHcfP9ZWVlSkvL6/R9nPnztXjjz+etFZYWOhanOjw4cPas2ePevXqpVWrVikSiTi16upqSdKWLVs0Y8YMffjhh2rVqpWmTJni1CQpNTVVUv2U4XA43OzXZq1V37599d577zW7T3M053rQnao/6xnTKbotaRtjTEBSjqQKa23YWvs9a22RtXaCpJaSPj79YQMAAACAtw0ZMkQbNmzQli1bVFtbq7lz52r8+PFJ265bt04HDhzQF77whaT10aNHq6qqyllNt66uTt///vc1depUpaenKz8/X8uWLVMkEtGOHTv0wQf1k1YPHz6szMxM5eTkaO/evXr11VdPOO4WLVroyJEjTbbp1auXysvLnYAaCoW0evXqE+77RJoTUD+U1NMY080YkyJpkqT5DdrMl3Rb9PF1khZaa60xJsMYkylJxpgxksLWWveyVQAAAABwngkE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\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZIHPso_LrPJy"},"source":["###Organize Location v Time Plots"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"1WsspqAef_yR","executionInfo":{"status":"ok","timestamp":1642448941803,"user_tz":300,"elapsed":394,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"ed2b9467-b1f1-465a-ecae-fe3dfdf6d14e"},"source":["def ProduceIndividualPlots(Observations, FitPredictions):\n","  current_time = timenow()\n","  print(startbold + startred + current_time + ' Produce Individual Plots ' + RunName + ' ' + RunComment + resetfonts)\n","# Find Best and Worst Locations\n","  fips_b, fips_w = bestandworst(Observations, FitPredictions)\n","  if Hydrology or Earthquake:\n","    plot_by_fips(fips_b, Observations, FitPredictions)\n","    plot_by_fips(fips_w, Observations, FitPredictions)\n","  else:\n","    for i in list(map(str,list(FIPSintegerlookup.keys())[::10])):\n","      plot_by_fips(int(i),Observations,FitPredictions)\n","\n","    # plot_by_fips(6037, Observations, FitPredictions)\n","    # plot_by_fips(41017, Observations, FitPredictions)\n","    # plot_by_fips(48167, Observations, FitPredictions)\n","    # plot_by_fips(1003, Observations, FitPredictions)\n","    # plot_by_fips(42019, Observations, FitPredictions)\n","    # plot_by_fips(10005, Observations, FitPredictions)\n","    # plot_by_fips(15001, Observations, FitPredictions)\n","    if (fips_b!=6037) and (fips_b!=36061) and (fips_b!=17031) and (fips_b!=53033):\n","        plot_by_fips(fips_b, Observations, FitPredictions)\n","    if (fips_w!=6037) and (fips_w!=36061) and (fips_w!=17031) and (fips_w!=53033):\n","        plot_by_fips(fips_w, Observations, FitPredictions)\n","\n","  # Plot top 10 largest cities\n","    sortedcities = np.flip(np.argsort(Locationpopulation))\n","    for pickout in range (0,10):\n","      Locationindex = sortedcities[pickout]\n","      fips = Locationfips[Locationindex]\n","      if not(Hydrology or Earthquake):\n","        if (fips == 6037 or fips == 36061 or fips == 17031 or fips == 53033):\n","          continue\n","      if (fips == fips_b or fips == fips_w):\n","        continue\n","      plot_by_fips(fips, Observations, FitPredictions)\n","      \n","  if LengthFutures > 1:\n","      plot_by_futureindex(2, Observations, FitPredictions)\n","  if LengthFutures > 6:\n","      plot_by_futureindex(7, Observations, FitPredictions)\n","  if LengthFutures > 11:\n","      plot_by_futureindex(12, Observations, FitPredictions)\n","  return\n","\n","def bestandworst(Observations, FitPredictions):\n","    current_time = timenow()\n","    print(startbold +  startred + current_time + ' ' + RunName + \" Best and Worst \" +RunComment + resetfonts)\n","\n","    keepabserrorvalues = np.zeros([Nloc,NumpredbasicperTime], dtype=np.float64)\n","    keepRMSEvalues = np.zeros([Nloc,NumpredbasicperTime], dtype=np.float64)\n","    testabserrorvalues = np.zeros(Nloc, dtype=np.float64)\n","    testRMSEvalues = np.zeros(Nloc, dtype=np.float64)\n","\n","    real = np.zeros([NumpredbasicperTime,Num_Seq], dtype=np.float64)\n","    predictsmall = np.zeros([NumpredbasicperTime,Num_Seq], dtype=np.float64) \n","    c_error_props = np.zeros([NumpredbasicperTime], dtype=np.float64)\n","    c_error_props = np.zeros([NumpredbasicperTime], dtype=np.float64)\n"," \n","  \n","    for icity in range(0,Nloc):\n","      validcounts = np.zeros([NumpredbasicperTime], dtype=np.float64) \n","      RMSE = np.zeros([NumpredbasicperTime], dtype=np.float64)\n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        for itime in range (0,Num_Seq):\n","          if not math.isnan(Observations[itime, icity, PredictedQuantity]):\n","            real[PredictedQuantity,itime] = Observations[itime, icity, PredictedQuantity]\n","            predictsmall[PredictedQuantity,itime] = FitPredictions[itime, icity, PredictedQuantity]\n","            validcounts[PredictedQuantity] += 1.0\n","            RMSE[PredictedQuantity] += (Observations[itime, icity, PredictedQuantity]-FitPredictions[itime, icity, PredictedQuantity])**2\n","        c_error_props[PredictedQuantity] = cumulative_error(predictsmall[PredictedQuantity], real[PredictedQuantity]) # abs(error) as percentage\n","        keepabserrorvalues[icity,PredictedQuantity] = c_error_props[PredictedQuantity]\n","        keepRMSEvalues[icity,PredictedQuantity] = RMSE[PredictedQuantity] *100. / validcounts[PredictedQuantity]\n","\n","      testabserror = 0.0\n","      testRMSE = 0.0\n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","         testabserror += c_error_props[PredictedQuantity]\n","         testRMSE += keepRMSEvalues[icity,PredictedQuantity]\n","      testabserrorvalues[icity] = testabserror\n","      testRMSEvalues[icity] = testRMSE\n","    \n","    sortingindex = np.argsort(testabserrorvalues)\n","    bestindex = sortingindex[0]\n","    worstindex = sortingindex[Nloc-1]\n","    fips_b = Locationfips[bestindex]\n","    fips_w = Locationfips[worstindex]\n","\n","    current_time = timenow()\n","    print( startbold + \"\\n\" + current_time + \" Best \" + str(fips_b) + \" \" + Locationname[bestindex] + \" \" + Locationstate[bestindex] + ' ABS(error) ' + \n","          str(round(testabserrorvalues[bestindex],2)) + ' RMSE ' + str(round(testRMSEvalues[bestindex],2)) + resetfonts)\n","     \n","    for topcities in range(0,10):\n","      localindex = sortingindex[topcities]\n","      printstring = str(topcities) + \") \" + str(Locationfips[localindex]) + \" \" + Locationname[localindex] + \" ABS(error) Total \" + str(round(testabserrorvalues[localindex],4)) + \" Components \" \n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        printstring += ' ' + str(round(keepabserrorvalues[localindex,PredictedQuantity],2))\n","      print(printstring)\n","    print(\"\\nlist RMSE\")\n","    for topcities in range(0,9):\n","      localindex = sortingindex[topcities]\n","      printstring = str(topcities) + \") \" + str(Locationfips[localindex]) + \" \" + Locationname[localindex] +  \" RMSE Total \" + str(round(testRMSEvalues[localindex],4)) + \" Components \" \n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        printstring += ' ' + str(round(keepRMSEvalues[localindex,PredictedQuantity],2))\n","      print(printstring)\n","\n","    print( startbold + \"\\n\" + current_time + \" Worst \" + str(fips_w) + \" \" + Locationname[worstindex] + \" \" + Locationstate[worstindex] + ' ABS(error) ' + \n","          str(round(testabserrorvalues[worstindex],2)) + ' RMSE ' + str(round(testRMSEvalues[worstindex],2)) + resetfonts)\n"," \n","    for badcities in range(Nloc-1,Nloc-11,-1):\n","      localindex = sortingindex[badcities]\n","      printstring = str(badcities) + \") \" + str(Locationfips[localindex]) + \" \" + Locationname[localindex] +  \" ABS(error) Total \" + str(round(testabserrorvalues[localindex],4)) + \" Components \" \n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        printstring += ' ' + str(round(keepabserrorvalues[localindex,PredictedQuantity],2))\n","      print(printstring)\n","    print(\"\\nlist RMSE\")\n","    for badcities in range(0,9):\n","      localindex = sortingindex[badcities]\n","      printstring = str(badcities) + \") \" + str(Locationfips[localindex]) + \" \" + Locationname[localindex] +  \" RMSE Total \" + str(round(testRMSEvalues[localindex],4)) + \" Components \" \n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        printstring += ' ' + str(round(keepRMSEvalues[localindex,PredictedQuantity],2))\n","      print(printstring)\n"," \n","    return fips_b,fips_w  "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"0S2QaUybnLTb"},"source":["### Summed & By Location Plots"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"GrWzXpoTa18c","executionInfo":{"status":"ok","timestamp":1642448944238,"user_tz":300,"elapsed":2438,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"a0edd763-f1e6-46d6-fb7b-644a7efc51f1"},"source":["def setValTrainlabel(iValTrain):\n","\n","  if SeparateValandTrainingPlots:\n","    if iValTrain == 0:\n","      Overalllabel = 'Training ' \n","      if GlobalTrainingLoss > 0.0001:\n","        Overalllabel += str(round(GlobalTrainingLoss,5)) + ' '\n","    if iValTrain == 1:\n","      Overalllabel = 'Validation '\n","      if GlobalValidationLoss > 0.0001:\n","        Overalllabel += str(round(GlobalValidationLoss,5)) + ' '\n","  else:\n","    Overalllabel = 'Full ' + str(round(GlobalLoss,5)) + ' '\n","  Overalllabel += RunName + ' '\n","  return Overalllabel\n","\n","def Location_summed_plot(Observations, FitPredictions,  fill=True, otherlabs= [], otherfits=[], extracomments = None, Dumpplot = False):\n","    # Only deal with futures as days; plot sum over locations\n","    current_time = timenow()\n","    print(wraptotext(startbold + startred + current_time + ' Location_summed_plot ' + RunName + ' ' + RunComment + resetfonts))\n","    otherlen = len(otherlabs)\n","    basiclength = Num_Seq\n","    predictlength = LengthFutures\n","    if not UseFutures:\n","        predictlength = 0\n","    totallength = basiclength + predictlength\n","    if extracomments is None:\n","      extracomments = []\n","      for PredictedQuantity in range(0,NumpredbasicperTime):\n","        extracomments.append([' ',''])\n","\n","    NumberValTrainLoops = 1\n","    if SeparateValandTrainingPlots:\n","      NumberValTrainLoops = 2\n","        \n","    real = np.zeros([NumpredbasicperTime,NumberValTrainLoops,basiclength])\n","    predictsmall = np.zeros([NumpredbasicperTime,NumberValTrainLoops,basiclength])\n","    predict = np.zeros([NumpredbasicperTime,NumberValTrainLoops,totallength])\n","    if otherlen!=0:\n","      otherpredict = np.zeros([otherlen,NumpredbasicperTime,NumberValTrainLoops, totallength])  \n","\n","      \n","    for PredictedQuantity in range(0,NumpredbasicperTime):\n","      for iValTrain in range(0,NumberValTrainLoops):\n","\n","        for iloc in range(0,Nloc):\n","          if SeparateValandTrainingPlots:\n","            if iValTrain == 0:\n","              if MappingtoTraining[iloc] < 0:\n","                continue\n","            if iValTrain == 1:\n","              if MappingtoTraining[iloc] >= 0:\n","                continue\n","          for itime in range (0,Num_Seq):\n","            if np.math.isnan(Observations[itime, iloc, PredictedQuantity]):\n","              real[PredictedQuantity,iValTrain,itime] += FitPredictions[itime, iloc, PredictedQuantity]\n","            else:\n","              real[PredictedQuantity,iValTrain,itime] += Observations[itime, iloc, PredictedQuantity]\n","            predict[PredictedQuantity,iValTrain,itime] += FitPredictions[itime, iloc, PredictedQuantity]\n","            for others in range (0,otherlen):\n","              otherpredict[others,PredictedQuantity,iValTrain,itime] += FitPredictions[itime, iloc, PredictedQuantity] + otherfits[others,itime, iloc, PredictedQuantity]\n","          if FuturedPointer[PredictedQuantity] >= 0:\n","            for ifuture in range(0,LengthFutures):\n","              jfuture = NumpredbasicperTime + NumpredFuturedperTime*ifuture\n","              predict[PredictedQuantity,iValTrain,Num_Seq+ifuture] += FitPredictions[itime, iloc, \n","                                      FuturedPointer[PredictedQuantity] + jfuture] \n","              for others in range (0,otherlen):\n","                otherpredict[others,PredictedQuantity,iValTrain,Num_Seq+ifuture] += FitPredictions[itime, iloc, PredictedQuantity + jfuture] + otherfits[others, itime, iloc, PredictedQuantity + jfuture]\n","        for itime in range(0,basiclength):\n","            predictsmall[PredictedQuantity,iValTrain,itime] = predict[PredictedQuantity,iValTrain,itime]\n","          \n","    error = np.absolute(real - predictsmall)\n","    xsmall = np.arange(0,Num_Seq)\n","\n","    neededrows = math.floor((NumpredbasicperTime*NumberValTrainLoops +1.1)/2)\n","    iValTrain = -1\n","    PredictedQuantity = -1\n","    for rowloop in range(0,neededrows):\n","      plt.rcParams[\"figure.figsize\"] = [16,6]\n","      figure, (ax1,ax2) = plt.subplots(nrows=1, ncols=2)\n","      for kplot in range (0,2):\n","        if NumberValTrainLoops == 2:\n","          iValTrain = kplot\n","        else:\n","          iValTrain = 0\n","        if iValTrain == 0:\n","          PredictedQuantity +=1\n","          if PredictedQuantity > (NumpredbasicperTime-1):\n","            PredictedQuantity = NumpredbasicperTime-1          \n","        Overalllabel = setValTrainlabel(iValTrain)\n","        \n","        eachplt = ax1\n","        if kplot == 1:\n","          eachplt = ax2\n","        \n","        Overalllabel = 'Full '\n","        if SeparateValandTrainingPlots:\n","          if iValTrain == 0:\n","            Overalllabel = 'Training ' \n","            if GlobalTrainingLoss > 0.0001:\n","              Overalllabel += str(round(GlobalTrainingLoss,5)) + ' '\n","          if iValTrain == 1:\n","            Overalllabel = 'Validation '\n","            if GlobalValidationLoss > 0.0001:\n","              Overalllabel += str(round(GlobalValidationLoss,5)) + ' '\n","        else:\n","          Overalllabel += RunName + ' ' + str(round(GlobalLoss,5)) + ' '\n","\n","        maxplot = np.float32(totallength)\n","        if UseRealDatesonplots:\n","          StartDate = np.datetime64(InitialDate).astype('datetime64[D]') + np.timedelta64(Tseq*Dailyunit + math.floor(Dailyunit/2),'D')\n","          EndDate = StartDate + np.timedelta64(totallength*Dailyunit)\n","          datemin, datemax = makeadateplot(figure,eachplt, datemin=StartDate, datemax=EndDate)\n","          Dateplot = True\n","          Dateaxis = np.empty(totallength, dtype = 'datetime64[D]')\n","          Dateaxis[0] = StartDate\n","          for idate in range(1,totallength):\n","            Dateaxis[idate] = Dateaxis[idate-1] + np.timedelta64(Dailyunit,'D')\n","        else:\n","          Dateplot = False\n","          datemin = 0.0\n","          datemax = maxplot\n","\n","        sumreal = 0.0\n","        sumerror = 0.0\n","        for itime in range(0,Num_Seq):\n","          sumreal += abs(real[PredictedQuantity,iValTrain,itime])\n","          sumerror += error[PredictedQuantity,iValTrain,itime]\n","        c_error = round(100.0*sumerror/sumreal,2)\n","\n","        if UseRealDatesonplots:\n","          eachplt.plot(Dateaxis[0:real.shape[-1]],real[PredictedQuantity,iValTrain,:], label=f'real')\n","          eachplt.plot(Dateaxis,predict[PredictedQuantity,iValTrain,:], label='prediction')            \n","          eachplt.plot(Dateaxis[0:error.shape[-1]],error[PredictedQuantity,iValTrain,:], label=f'error', color=\"red\")\n","          for others in range (0,otherlen):\n","            eachplt.plot(Dateaxis[0:otherpredict.shape[-1]],otherpredict[others,PredictedQuantity,iValTrain,:], label=otherlabs[others])\n","\n","          if fill:\n","            eachplt.fill_between(Dateaxis[0:predictsmall.shape[-1]], predictsmall[PredictedQuantity,iValTrain,:], \n","                                 real[PredictedQuantity,iValTrain,:], alpha=0.1, color=\"grey\")\n","            eachplt.fill_between(Dateaxis[0:error.shape[-1]], error[PredictedQuantity,iValTrain,:], alpha=0.05, color=\"red\")\n","\n","        else:\n","\n","          ## Andrej Testing\n","          print('ANDREJ IN THE LOOP')\n","          # real[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, Locationindex, Observations[itime, Locationindex, PredictedQuantity])\n","          # predict[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, Locationindex, FitPredictions[itime, Locationindex, PredictedQuantity])\n","\n","          print(real.shape,predict.shape,error.shape)\n","\n","          new_real = np.zeros(real.shape)\n","          new_real = np.squeeze(new_real)\n","          new_error = np.zeros(error.shape)\n","          new_error = np.squeeze(new_error)\n","          new_predict = np.zeros(predict.shape)\n","          new_predict = np.squeeze(new_predict)\n","\n","          for itime in range(new_real.shape[1]):\n","            new_real[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, 0, real[PredictedQuantity,iValTrain,itime])\n","\n","          for itime in range(new_predict.shape[1]):\n","            new_predict[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, 0, predict[PredictedQuantity,iValTrain,itime])\n","\n","          for itime in range(new_error.shape[1]):\n","            new_error[PredictedQuantity,itime] = np.absolute(new_real[PredictedQuantity, itime] - new_predict[PredictedQuantity, itime])\n","\n","          \n","          real[PredictedQuantity,iValTrain,:] = new_real[PredictedQuantity,:]\n","          predict[PredictedQuantity,iValTrain,:] = new_predict[PredictedQuantity,:]\n","          error[PredictedQuantity,iValTrain,:] = new_error[PredictedQuantity,:]\n","          \n","\n","          ## Andrej Testing End\n","          eachplt.plot(real[PredictedQuantity,iValTrain,:], label=f'real')\n","          eachplt.plot(predict[PredictedQuantity,iValTrain,:], label='prediction')\n","          eachplt.plot(error[PredictedQuantity,iValTrain,:], label=f'error', color=\"red\")\n","          for others in range (0,otherlen):\n","            eachplt.plot(otherpredict[others,PredictedQuantity,iValTrain,:], label=otherlabs[others])\n","\n","          if fill:\n","            eachplt.fill_between(xsmall, predictsmall[PredictedQuantity,iValTrain,:], real[PredictedQuantity,iValTrain,:], \n","                                 alpha=0.1, color=\"grey\")\n","            eachplt.fill_between(xsmall, error[PredictedQuantity,iValTrain,:], alpha=0.05, color=\"red\")\n","\n","        \n","        if Earthquake and AddSpecialstoSummedplots:\n","          if NumberValTrainLoops == 2:\n","            if iValTrain == 0:\n","              Addfixedearthquakes(eachplt, datemin, datemax, quakecolor = 'black', Dateplot = Dateplot, \n","                                  vetoquake = PrimaryTrainingvetoquake)\n","              Addfixedearthquakes(eachplt, datemin, datemax,  quakecolor = 'purple', Dateplot = Dateplot, \n","                                  vetoquake = SecondaryTrainingvetoquake)\n","            else:\n","              Addfixedearthquakes(eachplt, datemin, datemax,  quakecolor = 'black', Dateplot = Dateplot, \n","                                  vetoquake = PrimaryValidationvetoquake)\n","              Addfixedearthquakes(eachplt, datemin, datemax, quakecolor = 'purple', Dateplot = Dateplot, \n","                                  vetoquake = SecondaryValidationvetoquake)\n","          else:\n","            vetoquake = np.full(numberspecialeqs,False, dtype = np.bool)\n","            Addfixedearthquakes(eachplt, datemin, datemax,  quakecolor = 'black', Dateplot = Dateplot, \n","                                vetoquake = vetoquake)\n","          \n","        extrastring = Overalllabel + current_time + ' ' + RunName + \" \" \n","        extrastring += f\"Length={Num_Seq}, Location Summed Results {Predictionbasicname[PredictedQuantity]}, \"\n","        extrastring += extracomments[PredictedQuantity][iValTrain]\n","        eachplt.set_title('\\n'.join(wrap(extrastring,70)))\n","        if Dateplot:\n","          eachplt.set_xlabel('Years')\n","        else:\n","          eachplt.set_xlabel(TimeIntervalUnitName+'s')\n","        eachplt.set_ylabel(Predictionbasicname[PredictedQuantity])\n","        eachplt.grid(False)\n","        eachplt.legend()\n","      figure.tight_layout()\n","      if Dumpplot and Dumpoutkeyplotsaspics:\n","        VT = 'Both'\n","        if NumberValTrainLoops == 1:\n","          VT='Full'\n","        plt.savefig(APPLDIR +'/Outputs/DLResults' + VT + str(PredictedQuantity) +RunName + '.png ',format='png')\n","      plt.show()\n","\n","# Produce more detailed plots in time\n","    splitsize = Plotsplitsize\n","    if splitsize <= 1:\n","      return\n","    Numpoints = math.floor((Num_Seq+0.001)/splitsize)\n","    extraone = Num_Seq%Numpoints\n","\n","    neededrows = math.floor((splitsize*NumberValTrainLoops +1.1)/2)\n","    iValTrain = -1\n","    PredictedQuantity = 0\n","    iseqnew = 0\n","    counttimes = 0\n","    for rowloop in range(0,neededrows):\n","      plt.rcParams[\"figure.figsize\"] = [16,6]\n","      figure, (ax1,ax2) = plt.subplots(nrows=1, ncols=2)\n","      for kplot in range (0,2):\n","        if NumberValTrainLoops == 2:\n","          iValTrain = kplot\n","        else:\n","          iValTrain = 0\n","        Overalllabel = setValTrainlabel(iValTrain)\n","        eachplt = ax1\n","        if kplot == 1:\n","          eachplt = ax2\n","        sumreal = 0.0\n","        sumerror = 0.0\n","\n","        if iValTrain == 0:\n","          iseqold = iseqnew\n","          iseqnew = iseqold + Numpoints\n","          if counttimes < extraone:\n","            iseqnew +=1\n","          counttimes += 1\n","        for itime in range(iseqold,iseqnew):\n","          sumreal += abs(real[PredictedQuantity,iValTrain,itime])\n","          sumerror += error[PredictedQuantity,iValTrain,itime]\n","        c_error = round(100.0*sumerror/sumreal,2)\n","\n","        eachplt.plot(xsmall[iseqold:iseqnew],predict[PredictedQuantity,iValTrain,iseqold:iseqnew], label='prediction')\n","        eachplt.plot(xsmall[iseqold:iseqnew],real[PredictedQuantity,iValTrain,iseqold:iseqnew], label=f'real')\n","        eachplt.plot(xsmall[iseqold:iseqnew],error[PredictedQuantity,iValTrain,iseqold:iseqnew], label=f'error', color=\"red\")\n","\n","        if fill:\n","            eachplt.fill_between(xsmall[iseqold:iseqnew], predictsmall[PredictedQuantity,iValTrain,iseqold:iseqnew], real[PredictedQuantity,iseqold:iseqnew], alpha=0.1, color=\"grey\")\n","            eachplt.fill_between(xsmall[iseqold:iseqnew], error[PredictedQuantity,iValTrain,iseqold:iseqnew], alpha=0.05, color=\"red\")\n","\n","        extrastring = Overalllabel + current_time + ' ' + RunName + \" \" + f\"Range={iseqold}, {iseqnew} Rel Error {c_error} Location Summed Results {Predictionbasicname[PredictedQuantity]}, \"\n","        eachplt.set_title('\\n'.join(wrap(extrastring,70)))\n","        eachplt.set_xlabel(TimeIntervalUnitName+'s')\n","        eachplt.set_ylabel(Predictionbasicname[PredictedQuantity])\n","        eachplt.grid(True)\n","        eachplt.legend()\n","      figure.tight_layout()\n","      plt.show()\n","\n","def normalizeforplot(casesdeath,Locationindex,value):\n","\n","    if np.math.isnan(value):\n","      return value\n","    if Plotrealnumbers:\n","      predaveragevaluespointer = PredictionAverageValuesPointer[casesdeath]\n","      newvalue = value/QuantityStatistics[predaveragevaluespointer,2] + QuantityStatistics[predaveragevaluespointer,0]\n","      rootflag = QuantityTakeroot[predaveragevaluespointer]\n","      if rootflag == 2:\n","        newvalue = newvalue**2\n","      if rootflag == 3:\n","        newvalue = newvalue**3\n","    else:\n","      newvalue = value\n","    if PopulationNorm:\n","      newvalue *= Locationpopulation[Locationindex]\n","    return newvalue\n","\n","# PLOT individual city data\n","def plot_by_fips(fips, Observations, FitPredictions, dots=True, fill=True):\n","    Locationindex = FIPSintegerlookup[fips]\n","    current_time = timenow()\n","    print(startbold + startred + current_time + ' plot by location ' + str(Locationindex) + ' population ' + str(Locationpopulation[Locationindex]) + ' ' + str(fips) + ' ' + Locationname[Locationindex] + ' ' +RunName + ' ' + RunComment + resetfonts)\n","\n","    basiclength = Num_Seq\n","    predictlength = LengthFutures\n","    if not UseFutures:\n","        predictlength = 0\n","    totallength = basiclength + predictlength\n","    real = np.zeros([NumpredbasicperTime,basiclength])\n","    predictsmall = np.zeros([NumpredbasicperTime,basiclength])\n","    predict = np.zeros([NumpredbasicperTime,totallength]) \n","\n","    for PredictedQuantity in range(0,NumpredbasicperTime):\n","      for itime in range (0,Num_Seq):\n","        if np.math.isnan(Observations[itime, Locationindex, PredictedQuantity]):\n","          Observations[itime, Locationindex, PredictedQuantity] = FitPredictions[itime, Locationindex, PredictedQuantity]\n","        else:\n","          real[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, Locationindex, Observations[itime, Locationindex, PredictedQuantity])\n","          predict[PredictedQuantity,itime] = normalizeforplot(PredictedQuantity, Locationindex, FitPredictions[itime, Locationindex, PredictedQuantity])\n","      if FuturedPointer[PredictedQuantity] >= 0:\n","        for ifuture in range(0,LengthFutures):\n","          jfuture = NumpredbasicperTime + NumpredFuturedperTime*ifuture\n","          predict[PredictedQuantity,Num_Seq+ifuture] += normalizeforplot(PredictedQuantity,Locationindex, \n","                                          FitPredictions[itime, Locationindex, FuturedPointer[PredictedQuantity] + jfuture])\n","      for itime in range(0,basiclength):\n","          predictsmall[PredictedQuantity,itime] = predict[PredictedQuantity,itime]\n","        \n","    error = np.absolute(real - predictsmall)\n","    xsmall = np.arange(0,Num_Seq)\n","\n","    neededrows = math.floor((NumpredbasicperTime +1.1)/2)\n","    iplot = -1\n","    for rowloop in range(0,neededrows):\n","      plt.rcParams[\"figure.figsize\"] = [16,6]\n","      figure, (ax1,ax2) = plt.subplots(nrows=1, ncols=2)\n","      for kplot in range (0,2):\n","        iplot +=1\n","        if iplot > (NumpredbasicperTime-1):\n","          iplot = NumpredbasicperTime-1\n","        eachplt = ax1\n","        if kplot == 1:\n","          eachplt = ax2\n","\n","        sumreal = 0.0\n","        sumerror = 0.0\n","        for itime in range(0,Num_Seq):\n","          sumreal += abs(real[iplot,itime])\n","          sumerror += error[iplot,itime]\n","        c_error = round(100.0*sumerror/sumreal,2)\n","        RMSEstring = ''\n","        if not Plotrealnumbers:\n","          sumRMSE = 0.0\n","          count = 0.0\n","          for itime in range(0,Num_Seq):\n","            sumRMSE += (real[iplot,itime] - predict[iplot,itime])**2\n","            count += 1.0\n","          RMSE_error = round(100.0*sumRMSE/count,4)\n","          RMSEstring = ' RMSE ' + str(RMSE_error)\n","\n","        x = list(range(0, totallength))\n","        if dots:\n","            eachplt.scatter(x, predict[iplot])\n","            eachplt.scatter(xsmall, real[iplot])\n","\n","        eachplt.plot(predict[iplot], label=f'{fips} prediction')\n","        eachplt.plot(real[iplot], label=f'{fips} real')\n","        eachplt.plot(error[iplot], label=f'{fips} error', color=\"red\")\n","        if fill:\n","            eachplt.fill_between(xsmall, predictsmall[iplot], real[iplot], alpha=0.1, color=\"grey\")\n","            eachplt.fill_between(xsmall, error[iplot], alpha=0.05, color=\"red\")\n","\n","        name = Locationname[Locationindex]\n","        if Plotrealnumbers:\n","            name = \"Actual Numbers \" + name\n","        stringpopulation = \" \"\n","        if not Hydrology:\n","          stringpopulation = \" Population \" +str(Locationpopulation[Locationindex])\n","\n","        titlestring = current_time + ' ' + RunName + f\" {name}, Label={fips}\" + stringpopulation + f\" Length={Num_Seq}, Abs Rel Error={c_error}%\" + RMSEstring + ' ' + RunName\n","        eachplt.set_title('\\n'.join(wrap(titlestring,70)))\n","        eachplt.set_xlabel(TimeIntervalUnitName+'s')\n","        eachplt.set_ylabel(Predictionbasicname[iplot])\n","        eachplt.grid(True)\n","        eachplt.legend()\n","\n","      figure.tight_layout()\n","      plt.show();\n","\n","\n","def cumulative_error(real,predicted):\n","  error = np.absolute(real-predicted).sum()\n","  basevalue = np.absolute(real).sum()\n","  return 100.0*error/basevalue\n","\n","# Plot summed results by Prediction Type\n","# selectedfuture one more than usual future index\n","def plot_by_futureindex(selectedfuture, Observations, FitPredictions, fill=True, extrastring=''):\n","    current_time = timenow()\n","    print(startbold + startred + current_time + ' plot by Future Index ' + str(selectedfuture) + ' ' + RunName + ' ' + RunComment + resetfonts)\n","\n","    \n","    selectedfield = NumpredbasicperTime + NumpredFuturedperTime*(selectedfuture-1)\n","    if selectedfuture == 0:\n","      selectedfield = 0\n","    real = np.zeros([NumpredFuturedperTime,Num_Seq])\n","    predictsmall = np.zeros([NumpredFuturedperTime,Num_Seq])\n","    validdata = 0\n","\n","    for PredictedQuantity in range(0,NumpredFuturedperTime):\n","      for iloc in range(0,Nloc):\n","        for itime in range (0,Num_Seq):\n","          temp = normalizeforplot(PredictedQuantity, 0, Observations[itime, iloc, selectedfield+PredictedQuantity])\n","          real[PredictedQuantity,itime] += temp#Observations[itime, iloc, selectedfield+PredictedQuantity]\n","          temp2 = normalizeforplot(PredictedQuantity, 0, FitPredictions[itime, iloc, selectedfield+PredictedQuantity])\n","          predictsmall[PredictedQuantity,itime] += temp2 #FitPredictions[itime, iloc, selectedfield+PredictedQuantity]\n","      for itime in range (0,Num_Seq):\n","        if np.math.isnan(real[PredictedQuantity,itime]):\n","            real[PredictedQuantity,itime] = predictsmall[PredictedQuantity,itime]\n","        else:\n","            if PredictedQuantity == 0:\n","              validdata += 1    \n","\n","    error = np.absolute(real - predictsmall)\n","    xsmall = np.arange(0,Num_Seq)\n","\n","    neededrows = math.floor((NumpredFuturedperTime +1.1)/2)\n","    iplot = -1\n","    for rowloop in range(0,neededrows):\n","      plt.rcParams[\"figure.figsize\"] = [16,6]\n","      figure, (ax1,ax2) = plt.subplots(nrows=1, ncols=2)\n","      for kplot in range (0,2):\n","        iplot +=1\n","        if iplot > (NumpredbasicperTime-1):\n","          iplot = NumpredbasicperTime-1\n","        eachplt = ax1\n","        if kplot == 1:\n","          eachplt = ax2\n","        sumreal = 0.0\n","        sumerror = 0.0\n","        for itime in range(0,Num_Seq):\n","          sumreal += abs(real[iplot,itime])\n","          sumerror += error[iplot,itime]\n","        c_error = round(100.0*sumerror/sumreal,2)\n","\n","        eachplt.plot(predictsmall[iplot,:], label='prediction')\n","        eachplt.plot(real[iplot,:], label=f'real')\n","        eachplt.plot(error[iplot,:], label=f'error', color=\"red\")\n","\n","        if fill:\n","            eachplt.fill_between(xsmall, predictsmall[iplot,:], real[iplot,:], alpha=0.1, color=\"grey\")\n","            eachplt.fill_between(xsmall, error[iplot,:], alpha=0.05, color=\"red\")\n","        errorstring= \" Error % \" + str(c_error)\n","        printstring = current_time + \" Future Index \" + str(selectedfuture) + \" \" + RunName \n","        printstring += \" \" + f\"Length={Num_Seq}, Location Summed Results {Predictionbasicname[iplot]}, \" + errorstring + \" \" + extrastring\n","        eachplt.set_title('\\n'.join(wrap(printstring,70)))\n","        eachplt.set_xlabel(TimeIntervalUnitName+'s')\n","        eachplt.set_ylabel(Predictionbasicname[iplot])\n","        eachplt.grid(True)\n","        eachplt.legend()\n","      figure.tight_layout()\n","      plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"MVxWS_-p5T_N"},"source":["###Calculate NNSE\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"dHr9p5LC5Z-k","executionInfo":{"status":"ok","timestamp":1642448944240,"user_tz":300,"elapsed":4,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"3ec021e6-1b8b-4728-c785-2bada793b4fe"},"source":["# Calculate NNSE\n","# Sum (Obsevations - Mean)^2 / [Sum (Obsevations - Mean)^2 + Sum(Observations-Predictions)^2]\n","def FindNNSE(Observations, FitPredictions, Label=''):\n","\n","  NNSEList = np.empty(NpredperseqTOT, dtype = np.int)\n","  NumberNNSEcalc = 0\n","  for ipred in range(0,NpredperseqTOT):\n","    if CalculateNNSE[ipred]:\n","      NNSEList[NumberNNSEcalc] = ipred\n","      NumberNNSEcalc +=1\n","  if NumberNNSEcalc == 0:\n","    return\n","  StoreNNSE = np.zeros([Nloc,NumberNNSEcalc], dtype = np.float64)\n","  basiclength = Num_Seq\n","\n","  current_time = timenow()\n","  print(wraptotext(startbold + startred + current_time + ' Calculate NNSE ' + Label + ' ' +RunName + ' ' + RunComment + resetfonts))\n","  for NNSEpredindex in range(0,NumberNNSEcalc):\n","    PredictedQuantity = NNSEList[NNSEpredindex]\n","    averageNNSE = 0.0\n","    averageNNSETraining = 0.0\n","    averageNNSEValidation = 0.0\n","    line = ''\n","    for Locationindex in range(0, Nloc):\n","      QTObssq = 0.0\n","      QTDiffsq = 0.0\n","      QTObssum = 0.0\n","      for itime in range (0,Num_Seq):\n","        Observed = Observations[itime, Locationindex, PredictedQuantity]\n","        if np.math.isnan(Observed):\n","          Observed = FitPredictions[itime, Locationindex, PredictedQuantity]\n","        real = normalizeforplot(PredictedQuantity, Locationindex, Observed)\n","        predict = normalizeforplot(PredictedQuantity, Locationindex, FitPredictions[itime, \n","                                    Locationindex, PredictedQuantity])\n","        QTObssq += real**2\n","        QTDiffsq += (real-predict)**2\n","        QTObssum += real\n","      Obsmeasure = QTObssq - (QTObssum**2 / Num_Seq )\n","      StoreNNSE[Locationindex,NNSEpredindex] =  Obsmeasure / (Obsmeasure +QTDiffsq )\n","      if MappingtoTraining[Locationindex] >= 0:\n","        averageNNSETraining += StoreNNSE[Locationindex,NNSEpredindex]\n","      if MappingtoValidation[Locationindex] >= 0:\n","        averageNNSEValidation += StoreNNSE[Locationindex,NNSEpredindex]\n","      averageNNSE += StoreNNSE[Locationindex,NNSEpredindex]\n","      line += str(round(StoreNNSE[Locationindex,NNSEpredindex],3)) + ' '\n","    \n","    if ValidationNloc > 0:\n","      averageNNSEValidation = averageNNSEValidation / ValidationNloc\n","    averageNNSETraining = averageNNSETraining / TrainingNloc\n","    averageNNSE = averageNNSE / Nloc\n","\n","# Location Summed    \n","    QTObssq = 0.0\n","    QTDiffsq = 0.0\n","    QTObssum = 0.0\n","    QTObssqT = 0.0\n","    QTDiffsqT = 0.0\n","    QTObssumT = 0.0\n","    QTObssqV = 0.0\n","    QTDiffsqV = 0.0\n","    QTObssumV = 0.0\n","    for itime in range (0,Num_Seq):\n","      real = 0.0\n","      predict = 0.0\n","      realT = 0.0\n","      predictT = 0.0\n","      realV = 0.0\n","      predictV = 0.0\n","      for Locationindex in range(0, Nloc):\n","        Observed = Observations[itime, Locationindex, PredictedQuantity]\n","        if np.math.isnan(Observed):\n","          Observed = FitPredictions[itime, Locationindex, PredictedQuantity]\n","        localreal = normalizeforplot(PredictedQuantity, Locationindex, Observed)\n","        localpredict = normalizeforplot(PredictedQuantity, Locationindex, FitPredictions[itime, \n","                                    Locationindex, PredictedQuantity])\n","        real += localreal\n","        predict += localpredict\n","        if MappingtoTraining[Locationindex] >= 0:\n","          realT += localreal\n","          predictT += localpredict\n","        if MappingtoValidation[Locationindex] >= 0:\n","          realV  += localreal\n","          predictV += localpredict\n","\n","      QTObssq += real**2\n","      QTDiffsq += (real-predict)**2\n","      QTObssum += real\n","      QTObssqT += realT**2\n","      QTDiffsqT += (realT-predictT)**2\n","      QTObssumT += realT\n","      QTObssqV += realV**2\n","      QTDiffsqV += (realV-predictV)**2\n","      QTObssumV += realV\n","    Obsmeasure = QTObssq - (QTObssum**2 / Num_Seq )\n","    SummedNNSE =  Obsmeasure / (Obsmeasure +QTDiffsq )\n","    ObsmeasureT = QTObssqT - (QTObssumT**2 / Num_Seq )\n","    SummedNNSET =  ObsmeasureT / (ObsmeasureT +QTDiffsqT )\n","    ObsmeasureV = QTObssqV - (QTObssumV**2 / Num_Seq )\n","    if ValidationNloc > 0:\n","      SummedNNSEV =  ObsmeasureV / (ObsmeasureV +QTDiffsqV )\n","    else:\n","      SummedNNSEV =  0.0\n","\n","    print(wraptotext('NNSE ' + startbold + Label + ' ' + str(PredictedQuantity) + ' ' + Predictionname[PredictedQuantity] + startred + ' Averaged ' +\n","          str(round(averageNNSE,3)) + resetfonts + ' Training ' + str(round(averageNNSETraining,3)) +\n","          ' Validation ' + str(round(averageNNSEValidation,3)) + startred + startbold + ' Summed ' +  \n","          str(round(SummedNNSE,3)) + resetfonts + ' Training ' + str(round(SummedNNSET,3)) +\n","          ' Validation ' + str(round(SummedNNSEV,3))))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"WOO6uzE1FUa1","executionInfo":{"status":"ok","timestamp":1642448944686,"user_tz":300,"elapsed":449,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"9e4f6c00-23ae-49be-a7ed-ac6ca08e6d82"},"source":["def weightedcustom_lossGCF1(y_actual, y_pred, sample_weight):\n","    tupl = np.shape(y_actual)\n","\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    sw = sample_weight[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.reduce_sum(tf.multiply(tf.math.square(y_actual-y_pred),sw))\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n","\n","def numpycustom_lossGCF1(y_actual, y_pred, sample_weight):\n","    tupl = np.shape(y_actual)\n","\n","    flagGCF = np.isnan(y_actual)\n","    y_actual = y_actual[np.logical_not(flagGCF)]\n","    y_pred = y_pred[np.logical_not(flagGCF)]\n","    sw = sample_weight[np.logical_not(flagGCF)]\n","    tensordiff = np.sum(np.multiply(np.square(y_actual-y_pred),sw))\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n","\n","def weightedcustom_lossGCF1(y_actual, y_pred, sample_weight):\n","    tupl = np.shape(y_actual)\n","\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    sw = sample_weight[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.reduce_sum(tf.multiply(tf.math.square(y_actual-y_pred),sw))\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"zeDyzoVynCHL"},"source":["### Custom Loss Functions"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"lJylkkL9AvsV","executionInfo":{"status":"ok","timestamp":1642448944686,"user_tz":300,"elapsed":4,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"940fb374-1d5a-4613-cc74-b4f7287bc30e"},"source":["def custom_lossGCF1(y_actual,y_pred):\n","    tupl = np.shape(y_actual)\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.reduce_sum(tf.math.square(y_actual-y_pred))\n","\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n","\n","@tf.autograph.experimental.do_not_convert\n","def custom_lossGCF1spec(y_actual,y_pred):\n","    global tensorsw\n","    tupl = np.shape(y_actual)\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    sw = tensorsw[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.reduce_sum(tf.multiply(tf.math.square(y_actual-y_pred),sw))\n","\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n","\n","def custom_lossGCF1A(y_actual,y_pred):\n","    print(np.shape(y_actual), np.shape(y_pred))\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.square(y_actual-y_pred)\n","    return tf.math.reduce_mean(tensordiff)\n","\n","# Basic TF does NOT supply sample_weight\n","def custom_lossGCF1B(y_actual,y_pred,sample_weight=None):\n","    tupl = np.shape(y_actual)\n","\n","    flagGCF = tf.math.is_nan(y_actual)\n","    y_actual = y_actual[tf.math.logical_not(flagGCF)]\n","    y_pred = y_pred[tf.math.logical_not(flagGCF)]\n","    sw = sample_weight[tf.math.logical_not(flagGCF)]\n","    tensordiff = tf.math.reduce_sum(tf.multiply(tf.math.square(y_actual-y_pred),sw))\n","    if len(tupl) >= 2:\n","      tensordiff /= tupl[0]\n","    if len(tupl) >= 3:\n","      tensordiff /= tupl[1]\n","    if len(tupl) >= 4:\n","      tensordiff /= tupl[2]\n","    return tensordiff\n","    \n","def custom_lossGCF4(y_actual,y_pred):\n","    tensordiff = y_actual-y_pred\n","    newtensordiff = tf.where(tf.math.is_nan(tensordiff), tf.zeros_like(tensordiff), tensordiff)\n","    return tf.math.reduce_mean(tf.math.square(newtensordiff))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"tIWDP9I8myNQ"},"source":["### Utility: Shuffle, Finalize"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"OIB3yMlo7kFI","executionInfo":{"status":"ok","timestamp":1642448944855,"user_tz":300,"elapsed":172,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"353b1629-bbe2-441b-deda-a18c61548ad8"},"source":["def SetSpacetime(BasicTimes):\n","  global GlobalTimeMask\n","  Time = None\n","  if (MaskingOption == 0) or (not GlobalSpacetime):\n","    return Time\n","  NumTOTAL = BasicTimes.shape[1]\n","  BasicTimes = BasicTimes.astype(np.int16)\n","  BasicTimes = np.reshape(BasicTimes,(BasicTimes.shape[0],NumTOTAL,1))\n","  addons = np.arange(0,Tseq,dtype =np.int16)\n","  addons = np.reshape(addons,(1,1,Tseq))\n","  Time = BasicTimes+addons\n","  Time = np.reshape(Time,(BasicTimes.shape[0], NumTOTAL*Tseq))\n","  BasicPureTime = np.arange(0,Tseq,dtype =np.int16) \n","  BasicPureTime = np.reshape(BasicPureTime,(Tseq,1))\n","  GlobalTimeMask = tf.where( (BasicPureTime-np.transpose(BasicPureTime))>0, 0.0,1.0)\n","  GlobalTimeMask = np.reshape(GlobalTimeMask,(1,1,1,Tseq,Tseq))\n","  return Time\n","\n","def shuffleDLinput(Xin,yin,AuxiliaryArray=None, Spacetime=None):\n"," # Auxiliary array could be weight or location/time tracker\n"," # These are per batch so sorted axis is first\n","  \n","  np.random.seed(int.from_bytes(os.urandom(4), byteorder='little'))\n","  trainingorder = list(range(0, len(Xin)))\n","  random.shuffle(trainingorder)\n","\n","  Xinternal = list()\n","  yinternal = list()\n","  if AuxiliaryArray is not None:\n","    AuxiliaryArrayinternal = list()\n","  if Spacetime is not None:\n","    Spacetimeinternal = list()\n","  for i in trainingorder:\n","    Xinternal.append(Xin[i])\n","    yinternal.append(yin[i])\n","    if AuxiliaryArray is not None:\n","      AuxiliaryArrayinternal.append(AuxiliaryArray[i])\n","    if Spacetime is not None:\n","      Spacetimeinternal.append(Spacetime[i])\n","  X = np.array(Xinternal)\n","  y = np.array(yinternal)\n","  if (AuxiliaryArray is None) and (Spacetime is None):\n","    return X, y\n","  if (AuxiliaryArray is not None) and (Spacetime is None):\n","    AA = np.array(AuxiliaryArrayinternal)\n","    return X,y,AA\n","  if (AuxiliaryArray is None) and (Spacetime is not None):\n","    St = np.array(Spacetimeinternal)\n","    return X,y,St\n","  AA = np.array(AuxiliaryArrayinternal)\n","  St = np.array(Spacetimeinternal)\n","  return X,y,AA,St\n","\n","# Simple Plot of Loss from history\n","def finalizeDL(ActualModel, recordtrainloss, recordvalloss, validationfrac, X_in, y_in, modelflag, LabelFit =''):\n","  \n","  histlen = len(recordtrainloss)\n","\n","  trainloss = recordtrainloss[histlen-1]\n","  plt.rcParams[\"figure.figsize\"] = [8,6]\n","  plt.plot(recordtrainloss)\n","  if (validationfrac > 0.001) and len(recordvalloss) > 0:\n","    valloss = recordvalloss[histlen-1]\n","    plt.plot(recordvalloss)\n","  else:\n","    valloss = 0.0\n","  \n","  current_time = timenow()\n","  print(startbold + startred + current_time + ' ' + RunName + ' finalizeDL ' + RunComment +resetfonts)\n","  plt.title(LabelFit + ' ' + RunName+' model loss ' + str(round(trainloss,7)) + ' Val ' + str(round(valloss,7)))\n","  plt.ylabel('loss')\n","  plt.xlabel('epoch')\n","  plt.yscale(\"log\")\n","  plt.grid(True)\n","  plt.legend(['train', 'val'], loc='upper left')\n","  plt.show()\n","\n","  FitPredictions = DLprediction(X_in, y_in,ActualModel,modelflag, LabelFit = LabelFit)\n","  for debugfips in ListofTestFIPS:\n","    if debugfips != '': \n","      debugfipsoutput(debugfips, FitPredictions, X_in, y_in)\n","  return\n","\n","def debugfipsoutput(debugfips, FitPredictions, Xin, Observations):\n","\n","  print(startbold + startred + 'debugfipsoutput for ' + str(debugfips) + RunName + ' ' + RunComment +resetfonts)\n","# Set Location Number in Arrays\n","  LocationNumber = FIPSstringlookup[debugfips]\n","\n","  # Sequences to look at\n","  Seqcount = 5\n","  Seqnumber =  np.empty(Seqcount, dtype = np.int)\n","  Seqnumber[0] = 0\n","  Seqnumber[1] = int(Num_Seq/4)-1\n","  Seqnumber[2] = int(Num_Seq/2)-1\n","  Seqnumber[3] = int((3*Num_Seq)/4) -1\n","  Seqnumber[4] = Num_Seq-1\n","\n","  # Window Positions to look at\n","  Wincount = 5\n","  Winnumber = np.empty(Wincount, dtype = np.int)\n","  Winnumber[0] = 0\n","  Winnumber[1] = int(Tseq/4)-1\n","  Winnumber[2] = int(Tseq/2)-1\n","  Winnumber[3] = int((3*Tseq)/4) -1\n","  Winnumber[4] = Tseq-1\n","\n","  if SymbolicWindows:\n","    InputSequences = np.empty([Seqcount,Wincount, NpropperseqTOT], dtype=np.float32)\n","    for jseq in range(0,Seqcount):\n","      iseq = Seqnumber[jseq]\n","      for jwindow in range(0,Wincount):\n","        window = Winnumber[jwindow]\n","        InputSequences[jseq,jwindow] = Xin[LocationNumber,iseq+jseq]\n","  else:\n","    InputSequences = Xin \n","\n","  # Location Info\n"," \n","  print('\\n' + startbold + startred + debugfips + ' # ' + str(LocationNumber) + ' ' +\n","        Locationname[LocationNumber] + ' ' + Locationstate[LocationNumber] + ' Pop '\n","        + str(Locationpopulation[LocationNumber]) + resetfonts)\n","  plot_by_fips(int(debugfips), Observations, FitPredictions)\n"," \n","  if PlotsOnlyinTestFIPS:\n","    return\n","    \n","  # Print Input Data to Test\n","  # Static Properties\n","  print(startbold + startred + 'Static Properties ' + debugfips + ' ' +\n","         Locationname[LocationNumber] + resetfonts)\n","  line = ''\n","  for iprop in range(0,NpropperTimeStatic):\n","    if SymbolicWindows:\n","      val = InputSequences[0,0,iprop]\n","    else:\n","      val = InputSequences[0,LocationNumber,0,iprop]\n","    line += startbold + InputPropertyNames[PropertyNameIndex[iprop]] + resetfonts + ' ' + str(round(val,3)) + ' '\n","  print('\\n'.join(wrap(line,200)))\n","\n"," # Dynamic Properties\n","  for iprop in range(NpropperTimeStatic, NpropperTime):\n","    print('\\n')\n","    for jwindow in range(0,Wincount):\n","      window = Winnumber[jwindow]\n","      line = startbold + InputPropertyNames[PropertyNameIndex[iprop]] + ' W= '+str(window) +resetfonts\n","      for jseq in range(0,Seqcount):\n","        iseq = Seqnumber[jseq]\n","        line += startbold + startred + ' ' + str(iseq) + ')' +resetfonts\n","        if SymbolicWindows:\n","          val = InputSequences[jseq,jwindow,iprop]\n","        else:\n","          val = InputSequences[iseq,LocationNumber,window,iprop]\n","        line +=   ' ' + str(round(val,3))\n","      print('\\n'.join(wrap(line,200)))\n","  \n","\n","  # Total Input\n","  print('\\n')\n","  line = startbold + 'Props: ' + resetfonts \n","  for iprop in range(0,NpropperseqTOT):\n","    if iprop%5 == 0:\n","      line += startbold + startred + ' ' + str(iprop) + ')' + resetfonts     \n","    line += ' ' + InputPropertyNames[PropertyNameIndex[iprop]]\n","  print('\\n'.join(wrap(line,200)))\n","  for jseq in range(0,Seqcount):\n","    iseq = Seqnumber[jseq]\n","    for jwindow in range(0,Wincount):\n","      window = Winnumber[jwindow]\n","      line = startbold + 'Input: All in Seq ' + str(iseq) + ' W= ' + str(window) + resetfonts\n","      for iprop in range(0,NpropperseqTOT):\n","        if iprop%5 == 0:\n","          line += startbold + startred + ' ' + str(iprop) + ')' +resetfonts\n","        if SymbolicWindows:\n","          val = InputSequences[jseq,jwindow,iprop]\n","        else:\n","          val = InputSequences[iseq,LocationNumber,window,iprop]\n","        result = str(round(val,3))\n","        line += ' ' + result\n","      print('\\n'.join(wrap(line,200)))\n","\n","  # Total Prediction\n","  print('\\n')\n","  line = startbold + 'Preds: ' + resetfonts \n","  for ipred in range(0,NpredperseqTOT):\n","    if ipred%5 == 0:\n","      line += startbold + startred + ' ' + str(ipred) + ')' + resetfonts     \n","    line += ' ' + Predictionname[ipred]\n","  for jseq in range(0,Seqcount):\n","    iseq = Seqnumber[jseq]\n","    line = startbold + 'Preds: All in Seq ' + str(iseq) + resetfonts\n","    for ipred in range(0,NpredperseqTOT):\n","      fred = Observations[iseq,LocationNumber,ipred]\n","      if np.math.isnan(fred):\n","        result = 'NaN'\n","      else:\n","        result = str(round(fred,3))\n","      if ipred%5 == 0:\n","          line += startbold + startred + ' ' + str(ipred) + ')' + resetfonts     \n","      line += ' ' + result\n","    print('\\n'.join(wrap(line,200)))   \n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"GkiL51xZ3XUr"},"source":["##Set up TFT"]},{"cell_type":"markdown","metadata":{"id":"GqBfMQNwQj1z"},"source":["###Data and Input Types"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"-tUyF2ZhQ3-C","executionInfo":{"status":"ok","timestamp":1642448945147,"user_tz":300,"elapsed":294,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"56c71b92-9459-44b2-de90-24aacd0bc99c"},"source":["# Type defintions\n","import enum\n","\n","class DataTypes(enum.IntEnum):\n","  \"\"\"Defines numerical types of each column.\"\"\"\n","  REAL_VALUED = 0\n","  CATEGORICAL = 1\n","  DATE = 2\n","  NULL = -1\n","  STRING = 3\n","\n","class InputTypes(enum.IntEnum):\n","  \"\"\"Defines input types of each column.\"\"\"\n","  TARGET = 0\n","  OBSERVED_INPUT = 1\n","  KNOWN_INPUT = 2\n","  STATIC_INPUT = 3\n","  ID = 4  # Single column used as an entity identifier\n","  TIME = 5  # Single column exclusively used as a time index\n","  NULL = -1\n","\n","def checkdfNaN(label, AttributeSpec, y):\n","  countNaN = 0\n","  countnotNaN = 0\n","  if y is None:\n","    return\n","  names = y.columns.tolist()\n","  count = np.zeros(y.shape[1])\n","  for j in range(0,y.shape[1]):\n","    colname = names[j]\n","    if AttributeSpec.loc[colname,'DataTypes'] != DataTypes.REAL_VALUED:\n","      continue\n","    for i in range(0,y.shape[0]):\n","          if(np.math.isnan(y.iloc[i,j])):\n","              countNaN += 1\n","              count[j] += 1\n","          else:\n","              countnotNaN += 1\n","\n","\n","  percent = (100.0*countNaN)/(countNaN + countnotNaN)\n","  print(label + ' is NaN ',str(countNaN),' percent ',str(round(percent,2)),' not NaN ', str(countnotNaN))\n","  for j in range(0,y.shape[1]):\n","    if count[j] == 0:\n","      continue\n","    print(names[j] + ' has NaN ' + str(count[j]))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FOXCqWirQxZb"},"source":["###Convert FFFFWNPF to TFT"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1319},"id":"98Wz3J3y3b2z","executionInfo":{"status":"ok","timestamp":1642448945483,"user_tz":300,"elapsed":338,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"1d03e408-099f-407b-afee-ad2d8c934d85"},"source":["import pandas as pd\n","  \n","if TFTConversion:\n","# Pick Values setting InputType\n","# Currently ONLY pick from properties BUT\n","# If PropPick = 0 (target) then these should be selected as predictions in FFFFWNPF and futured of length LengthFutures\n","\n","  if ReadApril2021Covid:\n","    PropPick = [0,0,3,3,3,3,1,3,3,1,3,1,1,1,3,2,2,2,2,2,2,2,2]\n","    PropDataType = [0] * NpropperseqTOT\n","  if ReadDecember2021:     #?\n","    PropPick = [0,0,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,2,2,2,2]\n","    PropDataType = [0] * NpropperseqTOT\n","  if Earthquake:\n","    PropPick = [3,3,3,3,0,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n","    PropDataType = [0] * NpropperseqTOT\n","\n","# Dataframe is overall label (real starting at 0), Location Name, Time Input Properties, Predicted Properties Nloc times Num_Time values\n","# Row major order in Location-Time Space\n","  Totalsize = (Num_Time + TFTExtraTimes) * Nloc\n","  RawLabel = np.arange(0, Totalsize, dtype =np.float32)\n","  LocationLabel = []\n","  FFFFWNPFUniqueLabel = []\n","  RawTime = np.empty([Nloc,Num_Time + TFTExtraTimes], dtype = np.float32)\n","#  print('Times ' + str(Num_Time) + ' ' + str(TFTExtraTimes))\n","  ierror = 0\n","  for ilocation in range(0,Nloc):\n","#   locname = Locationstate[LookupLocations[ilocation]] + ' ' + Locationname[LookupLocations[ilocation]] \n","    locname = Locationname[LookupLocations[ilocation]]  + ' ' + Locationstate[LookupLocations[ilocation]]\n","    if locname == \"\":\n","      printexit('Illegal null location name ' + str(ilocation))\n","    for idupe in range(0,len(FFFFWNPFUniqueLabel)):\n","      if locname == FFFFWNPFUniqueLabel[idupe]:\n","        print(' Duplicate location name ' + str(ilocation) + ' ' + str(idupe) + ' ' + locname)\n","        ierror += 1\n","    FFFFWNPFUniqueLabel.append(locname)\n","#    print(str(ilocation) + ' ' +locname)\n","    for jtime in range(0,Num_Time + TFTExtraTimes):\n","      RawTime[ilocation,jtime] = np.float32(jtime)\n","      LocationLabel.append(locname)\n","  if ierror > 0:\n","    printexit(\" Duplicate Names \" + str(ierror))\n","  RawTime = np.reshape(RawTime,-1)\n","  TFTdf1 = pd.DataFrame(RawLabel, columns=['RawLabel'])\n","  TFTdf2 = pd.DataFrame(LocationLabel, columns=['Location'])\n","  TFTdf3 = pd.DataFrame(RawTime, columns=['Time from Start'])\n","  TFTdfTotal = pd.concat([TFTdf1,TFTdf2,TFTdf3], axis=1)\n","  TFTdfTotalSpec = pd.DataFrame([['RawLabel', DataTypes.REAL_VALUED, InputTypes.NULL]], columns=['AttributeName', 'DataTypes', 'InputTypes'])\n","  TFTdfTotalSpec.loc[len(TFTdfTotalSpec.index)] = ['Location', DataTypes.STRING, InputTypes.ID]\n","  TFTdfTotalSpec.loc[len(TFTdfTotalSpec.index)]  = ['Time from Start', DataTypes.REAL_VALUED, InputTypes.TIME] \n","\n","  ColumnsProp=[]\n","  for iprop in range(0,NpropperseqTOT):\n","    line = str(iprop) + ' ' + InputPropertyNames[PropertyNameIndex[iprop]]  \n","    jprop = PropertyAverageValuesPointer[iprop]\n","    if QuantityTakeroot[jprop] > 1:\n","      line += ' Root ' + str(QuantityTakeroot[jprop])\n","    ColumnsProp.append(line)\n","\n","#  iloc = 292\n","#  for jtime in range(390,424):\n","#    print(str(jtime) + ' ' + str(ReshapedSequencesTOT[iloc,jtime,0]) + ' ' + str(ReshapedSequencesTOT[iloc,jtime,1])\n","#     + ' ' + str(ReshapedSequencesTOT[iloc,jtime,2]) + ' ' + str(ReshapedSequencesTOT[iloc,jtime,3]))\n","\n","\n","  TFTInputSequences = np.reshape(ReshapedSequencesTOT,(-1,NpropperseqTOT))\n","  TFTNumberTargets = 0\n","  for iprop in range(0,NpropperseqTOT):\n","    if PropPick[iprop] >= 0:\n","      if PropPick[iprop] == 0:\n","        TFTNumberTargets += 1\n","      nextcol = TFTInputSequences[:,iprop]\n","      dftemp = pd.DataFrame(nextcol, columns=[ColumnsProp[iprop]])\n","      TFTdfTotal = pd.concat([TFTdfTotal,dftemp], axis=1)\n","      TFTdfTotalSpec.loc[len(TFTdfTotalSpec.index)] = [ColumnsProp[iprop], PropDataType[iprop], PropPick[iprop]]\n","  FFFFWNPFNumberTargets = TFTNumberTargets\n","\n","  ReshapedPredictionsTOT = np.transpose(RawInputPredictionsTOT,(1,0,2))\n"," \n","  TFTdfTotalSpec = TFTdfTotalSpec.set_index('AttributeName', drop= False)\n","  TFTdfTotalshape = TFTdfTotal.shape\n","  TFTdfTotalcols = TFTdfTotal.columns\n","  print(TFTdfTotalshape)\n","  print(TFTdfTotalcols)\n","  pd.set_option('display.max_rows', 100)\n","  display(TFTdfTotalSpec)\n","  \n","  # Set Prediction mapping\n","  PredictionTFTmapping =[]\n","  CovidDeathonly = False\n","  All = True\n","  line ='Prediction mapping'\n","  if CovidDeathonly:\n","    FFFFWNPFNumberTargets = 2\n","    odd = 0\n","    countodd = 0\n","    for ipred in range(0,NpredperseqTOT):\n","      if odd == 0:\n","        odd = 1\n","        PredictionTFTmapping.append(' ')\n","        text = 'skip'\n","      else:\n","        text = 't+{}-Death'.format(countodd)\n","        PredictionTFTmapping.append(text)\n","        countodd +=1\n","        odd = 0\n","      line += text + ' '\n","  if All:\n","    ifuture = 0\n","    itarget = 0\n","    for ipred in range(0,NpredperseqTOT):\n","      text = 't+{}-Obs{}'.format(ifuture,itarget)\n","      PredictionTFTmapping.append(text)\n","      line += text + ' '\n","      itarget += 1\n","      if itarget >= TFTNumberTargets:\n","        itarget = 0\n","        ifuture += 1\n","  print(wraptotext(line))\n","  print('TFTNumberTargets ' + str(TFTNumberTargets) + ' FFFFWNPFNumberTargets ' + str(FFFFWNPFNumberTargets))\n","\n","\n","  TFTdfTotalSpecshape = TFTdfTotalSpec.shape\n","  TFTcolumn_definition = []\n","  for i in range(0,TFTdfTotalSpecshape[0]):\n","    TFTcolumn_definition.append((TFTdfTotalSpec.iloc[i,0],TFTdfTotalSpec.iloc[i,1],TFTdfTotalSpec.iloc[i,2]))\n","  print(TFTcolumn_definition)\n","  print(TFTdfTotalSpec.columns)\n","  print(TFTdfTotalSpec.index)\n","\n","  # checkdfNaN('TFTdfTotal',TFTdfTotalSpec, TFTdfTotal)\n","\n","  TFTuseMSE = True\n","\n","  if TFTuseMSE:\n","    TFTQuantiles =[1.0]\n","    TFTQuantilenames = ['MSE']\n","    TFTPrimaryQuantileIndex = 0\n","  else:\n","    TFTQuantiles = [0.1,0.5,0.9]\n","    TFTQuantilenames = ['p10','p50','p90']\n","    TFTPrimaryQuantileIndex = 1\n","  TFTlenquantiles = len(TFTQuantiles)  \n","\n","  TFTMultivariate = True"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["(39737, 25)\n","Index(['RawLabel', 'Location', 'Time from Start', '0 Cases Root 2',\n","       '1 Deaths Root 2', '2 Age Distribution', '3 Air Pollution',\n","       '4 Comorbidities', '5 Health Disparities', '6 Mobility',\n","       '7 Residential Density', '8 Disease Spread', '9 Social Distancing',\n","       '10 Testing', '11 Transmissible Cases', '12 VaccinationOneDose',\n","       '13 Vaccination', '14 LinearSpace', '15 Constant', '16 LinearTime',\n","       '17 P2-Time', '18 P3-Time', '19 P4-Time', '20 CosWeekly',\n","       '21 SinWeekly'],\n","      dtype='object')\n"]},{"output_type":"display_data","data":{"text/html":["\n","  <div id=\"df-91b2d080-4900-4368-9d5c-33b014c4bfe1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AttributeName</th>\n","      <th>DataTypes</th>\n","      <th>InputTypes</th>\n","    </tr>\n","    <tr>\n","      <th>AttributeName</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>RawLabel</th>\n","      <td>RawLabel</td>\n","      <td>0</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>Location</th>\n","      <td>Location</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Time from Start</th>\n","      <td>Time from Start</td>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>0 Cases Root 2</th>\n","      <td>0 Cases Root 2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1 Deaths Root 2</th>\n","      <td>1 Deaths Root 2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2 Age Distribution</th>\n","      <td>2 Age Distribution</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3 Air Pollution</th>\n","      <td>3 Air Pollution</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4 Comorbidities</th>\n","      <td>4 Comorbidities</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>5 Health Disparities</th>\n","      <td>5 Health Disparities</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>6 Mobility</th>\n","      <td>6 Mobility</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7 Residential Density</th>\n","      <td>7 Residential Density</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>8 Disease Spread</th>\n","      <td>8 Disease Spread</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9 Social Distancing</th>\n","      <td>9 Social Distancing</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10 Testing</th>\n","      <td>10 Testing</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11 Transmissible Cases</th>\n","      <td>11 Transmissible Cases</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12 VaccinationOneDose</th>\n","      <td>12 VaccinationOneDose</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13 Vaccination</th>\n","      <td>13 Vaccination</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14 LinearSpace</th>\n","      <td>14 LinearSpace</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>15 Constant</th>\n","      <td>15 Constant</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>16 LinearTime</th>\n","      <td>16 LinearTime</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>17 P2-Time</th>\n","      <td>17 P2-Time</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>18 P3-Time</th>\n","      <td>18 P3-Time</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>19 P4-Time</th>\n","      <td>19 P4-Time</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>20 CosWeekly</th>\n","      <td>20 CosWeekly</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>21 SinWeekly</th>\n","      <td>21 SinWeekly</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91b2d080-4900-4368-9d5c-33b014c4bfe1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-91b2d080-4900-4368-9d5c-33b014c4bfe1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-91b2d080-4900-4368-9d5c-33b014c4bfe1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                                 AttributeName  DataTypes  InputTypes\n","AttributeName                                                        \n","RawLabel                              RawLabel          0          -1\n","Location                              Location          3           4\n","Time from Start                Time from Start          0           5\n","0 Cases Root 2                  0 Cases Root 2          0           0\n","1 Deaths Root 2                1 Deaths Root 2          0           0\n","2 Age Distribution          2 Age Distribution          0           3\n","3 Air Pollution                3 Air Pollution          0           3\n","4 Comorbidities                4 Comorbidities          0           3\n","5 Health Disparities      5 Health Disparities          0           3\n","6 Mobility                          6 Mobility          0           3\n","7 Residential Density    7 Residential Density          0           3\n","8 Disease Spread              8 Disease Spread          0           1\n","9 Social Distancing        9 Social Distancing          0           1\n","10 Testing                          10 Testing          0           1\n","11 Transmissible Cases  11 Transmissible Cases          0           1\n","12 VaccinationOneDose    12 VaccinationOneDose          0           1\n","13 Vaccination                  13 Vaccination          0           1\n","14 LinearSpace                  14 LinearSpace          0           2\n","15 Constant                        15 Constant          0           2\n","16 LinearTime                    16 LinearTime          0           2\n","17 P2-Time                          17 P2-Time          0           2\n","18 P3-Time                          18 P3-Time          0           2\n","19 P4-Time                          19 P4-Time          0           2\n","20 CosWeekly                      20 CosWeekly          0           2\n","21 SinWeekly                      21 SinWeekly          0           2"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Prediction mappingt+0-Obs0 t+0-Obs1 t+1-Obs0 t+1-Obs1 t+2-Obs0 t+2-Obs1 t+3-Obs0 t+3-Obs1 t+4-Obs0 t+4-Obs1 t+5-Obs0\n","t+5-Obs1 t+6-Obs0 t+6-Obs1 t+7-Obs0 t+7-Obs1 t+8-Obs0 t+8-Obs1 t+9-Obs0 t+9-Obs1 t+10-Obs0 t+10-Obs1 t+11-Obs0 t+11-Obs1\n","t+12-Obs0 t+12-Obs1 t+13-Obs0 t+13-Obs1 t+14-Obs0 t+14-Obs1\n","TFTNumberTargets 2 FFFFWNPFNumberTargets 2\n","[('RawLabel', 0, -1), ('Location', 3, 4), ('Time from Start', 0, 5), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","Index(['AttributeName', 'DataTypes', 'InputTypes'], dtype='object')\n","Index(['RawLabel', 'Location', 'Time from Start', '0 Cases Root 2',\n","       '1 Deaths Root 2', '2 Age Distribution', '3 Air Pollution',\n","       '4 Comorbidities', '5 Health Disparities', '6 Mobility',\n","       '7 Residential Density', '8 Disease Spread', '9 Social Distancing',\n","       '10 Testing', '11 Transmissible Cases', '12 VaccinationOneDose',\n","       '13 Vaccination', '14 LinearSpace', '15 Constant', '16 LinearTime',\n","       '17 P2-Time', '18 P3-Time', '19 P4-Time', '20 CosWeekly',\n","       '21 SinWeekly'],\n","      dtype='object', name='AttributeName')\n"]}]},{"cell_type":"markdown","metadata":{"id":"fbNT-soy5zkY"},"source":["###TFT Setup"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"qVkN0Mn9526c","executionInfo":{"status":"ok","timestamp":1642448945484,"user_tz":300,"elapsed":5,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"0e02634f-ba69-4be7-f2e8-0c27b8357ead"},"source":["\n","\n","TFTLSTMEncoderInitialMLP = 0\n","TFTLSTMDecoderInitialMLP = 0\n","TFTdropout_rate = 0.2\n","TFThidden_layer_size = number_LSTMnodes\n","TFTTransformerbatch_size = 64\n","TFTTransformerepochs = 60\n","\n","\n","TFTLSTMEncoderactivationvalue = LSTMactivationvalue\n","TFTLSTMDecoderactivationvalue = LSTMactivationvalue\n","TFTEncodernumber_LSTMnodes = number_LSTMnodes\n","TFTDecodernumber_LSTMnodes = number_LSTMnodes\n","TFTLSTMEncoderrecurrent_dropout1 = LSTMrecurrent_dropout1\n","TFTLSTMDecoderrecurrent_dropout1 = LSTMrecurrent_dropout1\n","TFTLSTMEncoderdropout1 = LSTMdropout1\n","TFTLSTMDecoderdropout1 = LSTMdropout1\n","TFTLSTMEncoderrecurrent_activation = LSTMrecurrent_activation\n","TFTLSTMDecoderrecurrent_activation = LSTMrecurrent_activation\n","TFTLSTMEncoderSecondLayer = True\n","TFTLSTMDecoderSecondLayer = True\n","TFTLSTMEncoderThirdLayer = False\n","TFTLSTMDecoderThirdLayer = False\n","TFTLSTMEncoderFinalMLP = 0\n","TFTLSTMDecoderFinalMLP = 0\n","TFTLSTMFinalMLP = 128\n","TFTd_model = d_model\n","TFTnum_heads = 4\n","TFTnum_AttentionLayers = 1\n","\n","TFTFutures = 0\n","if ReadApril2021Covid or ReadDecember2021:\n","  TFTFutures = 1 + LengthFutures\n","if TFTFutures == 0:\n","  printexit('No TFT Futures defined')\n","\n","TFTfixed_params = {\n","        'total_time_steps': Tseq + TFTFutures,\n","        'num_encoder_steps': Tseq,\n","        'num_epochs': TFTTransformerepochs,\n","        'early_stopping_patience': 60,\n","        'multiprocessing_workers': 5\n","}\n","\n","TFTmodel_params = {\n","        'dropout_rate': TFTdropout_rate,\n","        'hidden_layer_size': TFTd_model,\n","        'learning_rate': 0.001,\n","        'minibatch_size': TFTTransformerbatch_size,\n","        'max_gradient_norm': 0.01,\n","        'num_heads': TFTnum_heads,\n","        'stack_size': TFTnum_AttentionLayers\n","}\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"RBMkPML6MXY7"},"source":["###Base Formatter"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"hWusLYsSMdX9","executionInfo":{"status":"ok","timestamp":1642448945852,"user_tz":300,"elapsed":372,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2b8bd53a-1acc-4be8-d331-d2378bb85112"},"source":["import abc\n","\n","class GenericDataFormatter(abc.ABC):\n","  \"\"\"Abstract base class for all data formatters.\n","\n","  User can implement the abstract methods below to perform dataset-specific\n","  manipulations.\n","\n","  \"\"\"\n","\n","  @abc.abstractmethod\n","  def set_scalers(self, df):\n","    \"\"\"Calibrates scalers using the data supplied.\"\"\"\n","    raise NotImplementedError()\n","\n","  @abc.abstractmethod\n","  def transform_inputs(self, df):\n","    \"\"\"Performs feature transformation.\"\"\"\n","    raise NotImplementedError()\n","\n","  @abc.abstractmethod\n","  def format_predictions(self, df):\n","    \"\"\"Reverts any normalisation to give predictions in original scale.\"\"\"\n","    raise NotImplementedError()\n","\n","  @abc.abstractmethod\n","  def split_data(self, df):\n","    \"\"\"Performs the default train, validation and test splits.\"\"\"\n","    raise NotImplementedError()\n","\n","  @property\n","  @abc.abstractmethod\n","  def _column_definition(self):\n","    \"\"\"Defines order, input type and data type of each column.\"\"\"\n","    raise NotImplementedError()\n","\n","  @abc.abstractmethod\n","  def get_fixed_params(self):\n","    \"\"\"Defines the fixed parameters used by the model for training.\n","\n","    Requires the following keys:\n","      'total_time_steps': Defines the total number of time steps used by TFT\n","      'num_encoder_steps': Determines length of LSTM encoder (i.e. history)\n","      'num_epochs': Maximum number of epochs for training\n","      'early_stopping_patience': Early stopping param for keras\n","      'multiprocessing_workers': # of cpus for data processing\n","\n","\n","    Returns:\n","      A dictionary of fixed parameters, e.g.:\n","\n","      fixed_params = {\n","          'total_time_steps': 252 + 5,\n","          'num_encoder_steps': 252,\n","          'num_epochs': 100,\n","          'early_stopping_patience': 5,\n","          'multiprocessing_workers': 5,\n","      }\n","    \"\"\"\n","    raise NotImplementedError\n","\n","  # Shared functions across data-formatters\n","  @property\n","  def num_classes_per_cat_input(self):\n","    \"\"\"Returns number of categories per relevant input.\n","\n","    This is seqeuently required for keras embedding layers.\n","    \"\"\"\n","    return self._num_classes_per_cat_input\n","\n","  def get_num_samples_for_calibration(self):\n","    \"\"\"Gets the default number of training and validation samples.\n","\n","    Use to sub-sample the data for network calibration and a value of -1 uses\n","    all available samples.\n","\n","    Returns:\n","      Tuple of (training samples, validation samples)\n","    \"\"\"\n","    return -1, -1\n","\n","  def get_column_definition(self):\n","    \"\"\"\"Returns formatted column definition in order expected by the TFT.\"\"\"\n","\n","    column_definition = self._column_definition\n","\n","    # Sanity checks first.\n","    # Ensure only one ID and time column exist\n","    def _check_single_column(input_type):\n","\n","      length = len([tup for tup in column_definition if tup[2] == input_type])\n","\n","      if length != 1:\n","        raise ValueError('Illegal number of inputs ({}) of type {}'.format(\n","            length, input_type))\n","\n","    _check_single_column(InputTypes.ID)\n","    _check_single_column(InputTypes.TIME)\n","\n","    identifier = [tup for tup in column_definition if tup[2] == InputTypes.ID]\n","    time = [tup for tup in column_definition if tup[2] == InputTypes.TIME]\n","    real_inputs = [\n","        tup for tup in column_definition if tup[1] == DataTypes.REAL_VALUED and\n","        tup[2] not in {InputTypes.ID, InputTypes.TIME}\n","    ]\n","    categorical_inputs = [\n","        tup for tup in column_definition if tup[1] == DataTypes.CATEGORICAL and\n","        tup[2] not in {InputTypes.ID, InputTypes.TIME}\n","    ]\n","\n","    return identifier + time + real_inputs + categorical_inputs\n","\n","  def _get_input_columns(self):\n","    \"\"\"Returns names of all input columns.\"\"\"\n","    return [\n","        tup[0]\n","        for tup in self.get_column_definition()\n","        if tup[2] not in {InputTypes.ID, InputTypes.TIME}\n","    ]\n","\n","  def _get_tft_input_indices(self):\n","    \"\"\"Returns the relevant indexes and input sizes required by TFT.\"\"\"\n","\n","    # Functions\n","    def _extract_tuples_from_data_type(data_type, defn):\n","      return [\n","          tup for tup in defn if tup[1] == data_type and\n","          tup[2] not in {InputTypes.ID, InputTypes.TIME}\n","      ]\n","\n","    def _get_locations(input_types, defn):\n","      return [i for i, tup in enumerate(defn) if tup[2] in input_types]\n","\n","    # Start extraction\n","    column_definition = [\n","        tup for tup in self.get_column_definition()\n","        if tup[2] not in {InputTypes.ID, InputTypes.TIME}\n","    ]\n","\n","    categorical_inputs = _extract_tuples_from_data_type(DataTypes.CATEGORICAL,\n","                                                        column_definition)\n","    real_inputs = _extract_tuples_from_data_type(DataTypes.REAL_VALUED,\n","                                                 column_definition)\n","\n","    locations = {\n","        'input_size':\n","            len(self._get_input_columns()),\n","        'output_size':\n","            len(_get_locations({InputTypes.TARGET}, column_definition)),\n","        'category_counts':\n","            self.num_classes_per_cat_input,\n","        'input_obs_loc':\n","            _get_locations({InputTypes.TARGET}, column_definition),\n","        'static_input_loc':\n","            _get_locations({InputTypes.STATIC_INPUT}, column_definition),\n","        'known_regular_inputs':\n","            _get_locations({InputTypes.STATIC_INPUT, InputTypes.KNOWN_INPUT},\n","                           real_inputs),\n","        'known_categorical_inputs':\n","            _get_locations({InputTypes.STATIC_INPUT, InputTypes.KNOWN_INPUT},\n","                           categorical_inputs),\n","    }\n","\n","    return locations\n","\n","  def get_experiment_params(self):\n","    \"\"\"Returns fixed model parameters for experiments.\"\"\"\n","\n","    required_keys = [\n","        'total_time_steps', 'num_encoder_steps', 'num_epochs',\n","        'early_stopping_patience', 'multiprocessing_workers'\n","    ]\n","\n","    fixed_params = self.get_fixed_params()\n","\n","    for k in required_keys:\n","      if k not in fixed_params:\n","        raise ValueError('Field {}'.format(k) +\n","                         ' missing from fixed parameter definitions!')\n","\n","    fixed_params['column_definition'] = self.get_column_definition()\n","\n","    fixed_params.update(self._get_tft_input_indices())\n","\n","    return fixed_params"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"X-k-se9TA9M2"},"source":["###TFT FFFFWNPF Formatter"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"rRZ5qaEdBKzm","executionInfo":{"status":"ok","timestamp":1642448945852,"user_tz":300,"elapsed":2,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2c83060e-7d8d-465f-b662-26f2896ebd8b"},"source":["# Custom formatting functions for FFFFWNPF datasets.\n","\n","#GenericDataFormatter = data_formatters.base.GenericDataFormatter\n","#DataTypes = data_formatters.base.DataTypes\n","#InputTypes = data_formatters.base.InputTypes\n","\n","\n","class FFFFWNPFFormatter(GenericDataFormatter):\n","  \"\"\"\n","  Defines and formats data for the Covid April 21 dataset.\n","  Attributes:\n","    column_definition: Defines input and data type of column used in the\n","      experiment.\n","    identifiers: Entity identifiers used in experiments.\n","  \"\"\"\n","\n","  _column_definition = TFTcolumn_definition\n","\n","  def __init__(self):\n","    \"\"\"Initialises formatter.\"\"\"\n","\n","    self.identifiers = None\n","    self._real_scalers = None\n","    self._cat_scalers = None\n","    self._target_scaler = None\n","    self._num_classes_per_cat_input = None\n","    self._time_steps = self.get_fixed_params()['total_time_steps']\n","\n","  def split_data(self, df, valid_boundary=-1, test_boundary=-1):\n","    \"\"\"Splits data frame into training-validation-test data frames.\n","\n","    This also calibrates scaling object, and transforms data for each split.\n","\n","    Args:\n","      df: Source data frame to split.\n","      valid_boundary: Starting time for validation data\n","      test_boundary: Starting time for test data\n","\n","    Returns:\n","      Tuple of transformed (train, valid, test) data.\n","    \"\"\"\n","\n","    print('Formatting train-valid-test splits.')\n","\n","    index = df['Time from Start']\n","    train = df[index<(Num_Time-0.5)]\n","    valid = df[index<(Num_Time-0.5)]\n","    test = df\n","    if valid_boundary > 0:\n","      train = df.loc[index < valid_boundary]\n","      if test_boundary > 0:\n","        valid = df.loc[(index >= valid_boundary - 7) & (index < test_boundary)]\n","      else:\n","        valid = df.loc[(index >= valid_boundary - 7)]\n","    if test_boundary > 0:\n","      test = df.loc[index >= test_boundary - 7]\n","\n","    self.set_scalers(train)\n","\n","    return (self.transform_inputs(data) for data in [train, valid, test])\n","\n","  def set_scalers(self, df):\n","    \"\"\"Calibrates scalers using the data supplied.\n","\n","    Args:\n","      df: Data to use to calibrate scalers.\n","    \"\"\"\n","    print('Setting scalers with training data...')\n","\n","    column_definitions = self.get_column_definition()\n","    print(column_definitions)\n","    print(InputTypes.TARGET)\n","    id_column = utils.get_single_col_by_input_type(InputTypes.ID,\n","                                                   column_definitions, TFTMultivariate)\n","    target_column = utils.get_single_col_by_input_type(InputTypes.TARGET,\n","                                                       column_definitions, TFTMultivariate)\n","\n","    # Format real scalers\n","    real_inputs = utils.extract_cols_from_data_type(\n","        DataTypes.REAL_VALUED, column_definitions,\n","        {InputTypes.ID, InputTypes.TIME})\n","\n","    # Initialise scaler caches\n","    self._real_scalers = {}\n","    self._target_scaler = {}\n","    identifiers = []\n","    for identifier, sliced in df.groupby(id_column):\n","\n","      data = sliced[real_inputs].values\n","      if TFTMultivariate == True:\n","        targets = sliced[target_column].values\n","      else:\n","        targets = sliced[target_column].values\n","#      self._real_scalers[identifier] = sklearn.preprocessing.StandardScaler().fit(data)\n","\n","#      self._target_scaler[identifier] = sklearn.preprocessing.StandardScaler().fit(targets)\n","      identifiers.append(identifier)\n","\n","    # Format categorical scalers\n","    categorical_inputs = utils.extract_cols_from_data_type(\n","        DataTypes.CATEGORICAL, column_definitions,\n","        {InputTypes.ID, InputTypes.TIME})\n","\n","    categorical_scalers = {}\n","    num_classes = []\n","\n","    # Set categorical scaler outputs\n","    self._cat_scalers = categorical_scalers\n","    self._num_classes_per_cat_input = num_classes\n","\n","    # Extract identifiers in case required\n","    self.identifiers = identifiers\n","\n","  def transform_inputs(self, df):\n","    \"\"\"Performs feature transformations.\n","\n","    This includes both feature engineering, preprocessing and normalisation.\n","\n","    Args:\n","      df: Data frame to transform.\n","\n","    Returns:\n","      Transformed data frame.\n","\n","    \"\"\"\n","\n","    return df\n","\n","  def format_predictions(self, predictions):\n","    \"\"\"Reverts any normalisation to give predictions in original scale.\n","\n","    Args:\n","      predictions: Dataframe of model predictions.\n","\n","    Returns:\n","      Data frame of unnormalised predictions.\n","    \"\"\"\n","\n","    return predictions\n","\n","  # Default params\n","  def get_fixed_params(self):\n","    \"\"\"Returns fixed model parameters for experiments.\"\"\"\n","\n","    fixed_params = TFTfixed_params\n","\n","    return fixed_params\n","\n","  def get_default_model_params(self):\n","    \"\"\"Returns default optimised model parameters.\"\"\"\n","\n","    model_params = TFTmodel_params\n","\n","    return model_params\n","\n","  def get_num_samples_for_calibration(self):\n","    \"\"\"Gets the default number of training and validation samples.\n","\n","    Use to sub-sample the data for network calibration and a value of -1 uses\n","    all available samples.\n","\n","    Returns:\n","      Tuple of (training samples, validation samples)\n","    \"\"\"\n","    numtrain = TFTdfTotalshape[0]\n","    numvalid = TFTdfTotalshape[0]\n","    return numtrain, numvalid"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"35crbOGqX_k-"},"source":["###Start Training"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":243},"id":"63E8isAwYHWt","executionInfo":{"status":"ok","timestamp":1642448951344,"user_tz":300,"elapsed":5287,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"4360887a-69f4-4061-b20b-619a4e516a4f"},"source":["import tensorflow as tf\n","tf.__version__\n","\n","%cd \"/content/drive/MyDrive/independent_study2/GPCE/TFToriginal/\"\n","%ls\n","%cd TFTCode/\n","\n","name = \"FFFFWNPF\"\n","output_folder = \"../TFTData\" # Please don't change this path\n","use_tensorflow_with_gpu = True\n","\n","import expt_settings.configs\n","ExperimentConfig = expt_settings.configs.ExperimentConfig\n","config = ExperimentConfig(name, output_folder)\n","if name == 'FFFFWNPF':\n","  formatter = FFFFWNPFFormatter()\n","else:\n","  formatter = config.make_data_formatter()\n","\n","import os\n","!pwd\n","!ls\n","TFTdfTotalSpec.to_csv('TFTdfTotalSpec.csv')\n","TFTdfTotal.to_csv('TFTdfTotal.csv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/independent_study2/GPCE/TFToriginal\n","\u001b[0m\u001b[01;34mTFTCode\u001b[0m/  \u001b[01;34mTFTCode_arch\u001b[0m/  \u001b[01;34mTFTData\u001b[0m/\n","/content/drive/MyDrive/independent_study2/GPCE/TFToriginal/TFTCode\n","/content/drive/MyDrive/independent_study2/GPCE/TFToriginal/TFTCode\n","'Copy of script_train_fixed_params.py'\t SCITFT-tf-gpu.yml\n"," data_formatters\t\t\t script_download_data.py\n"," expt_settings\t\t\t\t script_hyperparam_opt.py\n"," libs\t\t\t\t\t script_train_fixed_params.py\n"," __pycache__\t\t\t\t'TFTdfTotal (1).csv'\n"," README.md\t\t\t\t TFTdfTotal.csv\n"," requirements.txt\t\t\t TFTdfTotalSpec.csv\n"," run.sh\t\t\t\t\t Train-fixed-TFT.ipynb\n"," SCITFT_datasets.yml\n"]}]},{"cell_type":"markdown","metadata":{"id":"HBDBY1tnTH9c"},"source":["###Train TFT"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173},"id":"mfOLBPu0TLoc","executionInfo":{"status":"ok","timestamp":1642448952182,"user_tz":300,"elapsed":841,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"90e51600-a5d9-4145-e6bc-17411ce3dcb5"},"source":["import argparse\n","import datetime as dte\n","import os\n","import expt_settings.configs as TFTconfigs\n","import libs.hyperparam_opt as TFTHypercode\n","import libs.tft_modelDev as TFTmodelcode\n","import libs.utils as utils\n","import numpy as np\n","import pandas as pd\n","import tensorflow.compat.v1 as tf\n","\n","ExperimentConfig = TFTconfigs.ExperimentConfig\n","HyperparamOptManager = TFTHypercode.HyperparamOptManager\n","ModelClass = TFTmodelcode.TemporalFusionTransformer\n","%ls\n","\n","def train(expt_name,\n","         use_gpu,\n","         model_folder,\n","         data_csv_path,\n","         data_formatter,\n","         restore=False,\n","         use_testing_mode=False,\n","         num_reps=TFTMode):\n","  \"\"\"Trains tft based on defined model params.\n","\n","  Args:\n","    expt_name: Name of experiment\n","    use_gpu: Whether to run tensorflow with GPU operations\n","    model_folder: Folder path where models are serialized\n","    data_csv_path: Path to csv file containing data\n","    data_formatter: Dataset-specific data fromatter (see\n","      expt_settings.dataformatter.GenericDataFormatter)\n","    use_testing_mode: Uses a smaller models and data sizes for testing purposes\n","      only -- switch to False to use original default settings\n","  \"\"\"\n","\n","  current_time = timenow()\n","  runtype = ''\n","  reloadresults = False\n","  num_repeats = num_reps\n","  if num_repeats == 0:\n","    reloadresults = True\n","    runtype = 'Restarted'\n","  print(startbold + current_time + ' ' + startpurple +  'Start TFT ' + runtype + ' ' + RunName + ' ' + RunComment + resetfonts)\n","\n","  if not isinstance(data_formatter, GenericDataFormatter):\n","    raise ValueError(\n","        \"Data formatters should inherit from\" +\n","        \"AbstractDataFormatter! Type={}\".format(type(data_formatter)))\n","\n","  # Tensorflow setup\n","  default_keras_session = tf.keras.backend.get_session()\n","\n","  if use_gpu:\n","    tf_config = utils.get_default_tensorflow_config(tf_device=\"gpu\", gpu_id=0)\n","\n","  else:\n","    tf_config = utils.get_default_tensorflow_config(tf_device=\"cpu\")\n","\n","  print(\"*** Training from defined parameters for {} ***\".format(expt_name))\n","\n","  print(\"Loading & splitting data...\")\n","  if expt_name == 'FFFFWNPF':\n","    raw_data = data_csv_path\n","  else :  \n","    raw_data = pd.read_csv(data_csv_path, index_col=0)\n","  \n","  train, valid, test = data_formatter.split_data(raw_data)\n","  train_samples, valid_samples = data_formatter.get_num_samples_for_calibration(\n","  )\n","  #print(str(train.shape),str(valid.shape),str(test.shape))\n","  # checkdfNaN('Train',TFTdfTotalSpec,train)\n","  # checkdfNaN('Valid',TFTdfTotalSpec,valid)\n","  # checkdfNaN('Test',TFTdfTotalSpec,test)\n","\n","  # Sets up default params\n","  fixed_params = data_formatter.get_experiment_params()\n","  params = data_formatter.get_default_model_params()\n","  params[\"model_folder\"] = model_folder\n","  fixed_params[\"quantiles\"] = TFTQuantiles\n","  fixed_params[\"quantilenames\"] = TFTQuantilenames\n","  fixed_params[\"quantileindex\"] = TFTPrimaryQuantileIndex\n","  fixed_params[\"TFTLSTMFinalMLP\"] = TFTLSTMFinalMLP\n","  fixed_params[\"TFTOption1\"] = 1\n","  fixed_params['TFTMultivariate'] = TFTMultivariate\n","  TFTFinalGatingOption = 1\n","  fixed_params['TFTFinalGatingOption'] = TFTFinalGatingOption\n","  TFTSymbolicWindows = False\n","  fixed_params['TFTSymbolicWindows'] = TFTSymbolicWindows\n","\n","  # for k in fixed_params:\n","  #  print(\"{}: {}\".format(k, fixed_params[k]))\n","\n","  # Parameter overrides for testing only! Small sizes used to speed up script.\n","  if use_testing_mode:\n","    fixed_params[\"num_epochs\"] = 1\n","    params[\"hidden_layer_size\"] = 5\n","    train_samples, valid_samples = 100, 10\n","\n","  # Sets up hyperparam manager\n","  print(\"*** Loading hyperparm manager ***\")\n","  opt_manager = HyperparamOptManager({k: [params[k]] for k in params},\n","                                     fixed_params, model_folder)\n","  if reloadresults:\n","    success = opt_manager.load_results()\n","    print(' Load Previous Results ' + str(success))\n","    num_repeats = 0\n","\n","  # Training -- one iteration only\n","  print(\"*** Running calibration ***\")\n","  print(\"Params Selected:\")\n","  #for k in params:\n","  #  print(\"{}: {}\".format(k, params[k]))\n","\n","  best_loss = np.Inf\n","  for _ in range(num_repeats):\n","\n","    tf.reset_default_graph()\n","    with tf.Graph().as_default(), tf.Session(config=tf_config) as sess:\n","\n","      tf.keras.backend.set_session(sess)\n","\n","    #  params = opt_manager.get_next_parameters()\n","      for k in fixed_params:\n","        params[k] = fixed_params[k]\n","      model = ModelClass(params, use_cudnn=use_gpu)\n","      print('Train samples ' +str(train_samples) + ' Valid samples ' +str(valid_samples))\n","\n","      ram_gb = virtual_memory().total / 1e9\n","      print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","      if not model.training_data_cached():\n","        model.cache_batched_data(train, \"train\", num_samples=train_samples)\n","        ram_gb = virtual_memory().total / 1e9\n","        print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","        model.cache_batched_data(valid, \"valid\", num_samples=valid_samples)\n","        ram_gb = virtual_memory().total / 1e9\n","        print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","      sess.run(tf.global_variables_initializer())\n","      model.fit()\n","\n","      val_loss = model.evaluate()\n","\n","      if val_loss < best_loss:\n","        opt_manager.update_score(params, val_loss, model)\n","        best_loss = val_loss\n","\n","      tf.keras.backend.set_session(default_keras_session)\n","\n","  print(\"*** Running tests ***\")\n","  tf.reset_default_graph()\n","  with tf.Graph().as_default(), tf.Session(config=tf_config) as sess:\n","    tf.keras.backend.set_session(sess)\n","    best_params = opt_manager.get_best_params()\n","    model = ModelClass(best_params, use_cudnn=use_gpu)\n","#    model.printsummary()\n","\n","    model.load(opt_manager.hyperparam_folder)\n","\n","    print(\"Computing best validation loss\")\n","    val_loss = model.evaluate(valid)\n","\n","    print(\"Computing test loss\")\n","    if test is None:\n","      output_map = model.predict(train, return_targets=True)\n","    else:\n","      output_map = model.predict(test, return_targets=True)\n","    print(output_map.keys)\n","    print(output_map[TFTQuantilenames[TFTPrimaryQuantileIndex]].columns)\n","    targets = data_formatter.format_predictions(output_map[\"targets\"])\n","\n","    pXX_forecast = [None]*TFTlenquantiles\n","    for k,quantilename in enumerate(TFTQuantilenames):\n","      pXX_forecast[k] = data_formatter.format_predictions(output_map[quantilename])\n","\n","    def extract_numerical_data(data):\n","      \"\"\"Strips out forecast time and identifier columns.\"\"\"\n","      return data[[\n","          col for col in data.columns\n","          if col not in {\"forecast_time\", \"identifier\"}\n","      ]]\n","    if not TFTuseMSE:\n","      pXX_loss =  [None]*TFTlenquantiles\n","      for k in range(0,TFTlenquantiles):\n","        pXX_loss[k] = utils.numpy_normalised_quantile_loss(\n","            extract_numerical_data(targets), extract_numerical_data(pXX_forecast[k]), TFTQuantiles[k])\n","        print(\"Normalized Quantile Loss for Test Data: \" + TFTQuantilenames[k] + ' ' + str(pXX_loss[k]))\n","\n","    tf.keras.backend.set_session(default_keras_session)\n","\n","  print(\"Training completed @ {}\".format(dte.datetime.now()))\n","  print(\"Best validation loss = {}\".format(val_loss))\n","  print(\"Params:\")\n","\n","  for k in best_params:\n","    print(k, \" = \", best_params[k])\n","  ram_gb = virtual_memory().total / 1e9\n","  print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","  return output_map\n","  \n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["'Copy of script_train_fixed_params.py'   SCITFT-tf-gpu.yml\n"," \u001b[0m\u001b[01;34mdata_formatters\u001b[0m/                        script_download_data.py\n"," \u001b[01;34mexpt_settings\u001b[0m/                          script_hyperparam_opt.py\n"," \u001b[01;34mlibs\u001b[0m/                                   script_train_fixed_params.py\n"," \u001b[01;34m__pycache__\u001b[0m/                           'TFTdfTotal (1).csv'\n"," README.md                               TFTdfTotal.csv\n"," requirements.txt                        TFTdfTotalSpec.csv\n"," run.sh                                  Train-fixed-TFT.ipynb\n"," SCITFT_datasets.yml\n"]}]},{"cell_type":"code","source":["ExperimentConfig = TFTconfigs.ExperimentConfig\n","HyperparamOptManager = TFTHypercode.HyperparamOptManager\n","ModelClass = TFTmodelcode.TemporalFusionTransformer\n","%ls\n","\n","def loadT(expt_name,\n","         use_gpu,\n","         model_folder,\n","         data_csv_path,\n","         data_formatter,\n","         restore=False,\n","         use_testing_mode=False,\n","         num_reps=TFTMode):\n","  \"\"\"Trains tft based on defined model params.\n","\n","  Args:\n","    expt_name: Name of experiment\n","    use_gpu: Whether to run tensorflow with GPU operations\n","    model_folder: Folder path where models are serialized\n","    data_csv_path: Path to csv file containing data\n","    data_formatter: Dataset-specific data fromatter (see\n","      expt_settings.dataformatter.GenericDataFormatter)\n","    use_testing_mode: Uses a smaller models and data sizes for testing purposes\n","      only -- switch to False to use original default settings\n","  \"\"\"\n","\n","  counts = 0\n","  interpretability_weights = {k: None for k in ['decoder_self_attn',\n","                                              'static_flags', 'historical_flags', 'future_flags']}\n","\n","\n","  current_time = timenow()\n","  runtype = ''\n","  reloadresults = False\n","  num_repeats = num_reps\n","  if num_repeats == 0:\n","    reloadresults = True\n","    runtype = 'Restarted'\n","  print(startbold + current_time + ' ' + startpurple +  'Start TFT ' + runtype + ' ' + RunName + ' ' + RunComment + resetfonts)\n","\n","  if not isinstance(data_formatter, GenericDataFormatter):\n","    raise ValueError(\n","        \"Data formatters should inherit from\" +\n","        \"AbstractDataFormatter! Type={}\".format(type(data_formatter)))\n","\n","  # Tensorflow setup\n","  default_keras_session = tf.keras.backend.get_session()\n","\n","  if use_gpu:\n","    tf_config = utils.get_default_tensorflow_config(tf_device=\"gpu\", gpu_id=0)\n","\n","  else:\n","    tf_config = utils.get_default_tensorflow_config(tf_device=\"cpu\")\n","\n","  print(\"*** Training from defined parameters for {} ***\".format(expt_name))\n","\n","  print(\"Loading & splitting data...\")\n","  if expt_name == 'FFFFWNPF':\n","    raw_data = data_csv_path\n","  else :  \n","    raw_data = pd.read_csv(data_csv_path, index_col=0)\n","  \n","  train, valid, test = data_formatter.split_data(raw_data)\n","  train_samples, valid_samples = data_formatter.get_num_samples_for_calibration(\n","  )\n","  #print(str(train.shape),str(valid.shape),str(test.shape))\n","  # checkdfNaN('Train',TFTdfTotalSpec,train)\n","  # checkdfNaN('Valid',TFTdfTotalSpec,valid)\n","  # checkdfNaN('Test',TFTdfTotalSpec,test)\n","\n","  # Sets up default params\n","  fixed_params = data_formatter.get_experiment_params()\n","  params = data_formatter.get_default_model_params()\n","  params[\"model_folder\"] = model_folder\n","  fixed_params[\"quantiles\"] = TFTQuantiles\n","  fixed_params[\"quantilenames\"] = TFTQuantilenames\n","  fixed_params[\"quantileindex\"] = TFTPrimaryQuantileIndex\n","  fixed_params[\"TFTLSTMFinalMLP\"] = TFTLSTMFinalMLP\n","  fixed_params[\"TFTOption1\"] = 1\n","  fixed_params['TFTMultivariate'] = TFTMultivariate\n","  TFTFinalGatingOption = 1\n","  fixed_params['TFTFinalGatingOption'] = TFTFinalGatingOption\n","  TFTSymbolicWindows = False\n","  fixed_params['TFTSymbolicWindows'] = TFTSymbolicWindows\n","\n","  # for k in fixed_params:\n","  #  print(\"{}: {}\".format(k, fixed_params[k]))\n","\n","  # Parameter overrides for testing only! Small sizes used to speed up script.\n","  if use_testing_mode:\n","    fixed_params[\"num_epochs\"] = 1\n","    params[\"hidden_layer_size\"] = 5\n","    train_samples, valid_samples = 100, 10\n","\n","  # Sets up hyperparam manager\n","  print(\"*** Loading hyperparm manager ***\")\n","  opt_manager = HyperparamOptManager({k: [params[k]] for k in params},\n","                                     fixed_params, model_folder)\n","  if reloadresults:\n","    success = opt_manager.load_results()\n","    print(' Load Previous Results ' + str(success))\n","    num_repeats = 0\n","\n","  print(\"*** Running calibration ***\")\n","  print(\"Params Selected:\")\n","  best_loss = np.Inf\n","  \n","\n","  print(\"*** Running tests ***\")\n","  tf.reset_default_graph()\n","  with tf.Graph().as_default(), tf.Session(config=tf_config) as sess:\n","    tf.keras.backend.set_session(sess)\n","    best_params = opt_manager.get_best_params()\n","    model = ModelClass(best_params, use_cudnn=use_gpu)\n","#    model.printsummary()\n","\n","    model.load(opt_manager.hyperparam_folder)\n","    weights = model.get_attention(train)\n","\n","    \n","    # for k in interpretability_weights:\n","    #   w = weights[k]\n","    #   if k == 'decoder_self_attn':\n","    #     w = w.mean(axis=0)\n","    #     batch_size,_,_ = w.shape\n","    #     counts+=batch_size\n","    #   if interpretability_weights[k] is None:\n","    #     interpretability_weights[k] = w.sum(axis=0)\n","    #   else:\n","    #     interpretability_weights[k] += w.sum(axis=0)\n","\n","\n","  # interpretability_weight = {k: interpretability_weights[k]/counts for k in interpretability_weights}\n","\n","  print('Done.')\n","  return weights\n","\n","\n","\n"],"metadata":{"id":"sFp7X2FF_0eg","colab":{"base_uri":"https://localhost:8080/","height":173},"executionInfo":{"status":"ok","timestamp":1642448952403,"user_tz":300,"elapsed":225,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"e1f3c565-d19b-4185-84dc-1f410added74"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["'Copy of script_train_fixed_params.py'   SCITFT-tf-gpu.yml\n"," \u001b[0m\u001b[01;34mdata_formatters\u001b[0m/                        script_download_data.py\n"," \u001b[01;34mexpt_settings\u001b[0m/                          script_hyperparam_opt.py\n"," \u001b[01;34mlibs\u001b[0m/                                   script_train_fixed_params.py\n"," \u001b[01;34m__pycache__\u001b[0m/                           'TFTdfTotal (1).csv'\n"," README.md                               TFTdfTotal.csv\n"," requirements.txt                        TFTdfTotalSpec.csv\n"," run.sh                                  Train-fixed-TFT.ipynb\n"," SCITFT_datasets.yml\n"]}]},{"cell_type":"markdown","source":["## Extract Weights for Feature Importance"],"metadata":{"id":"XdFLCEQL12a3"}},{"cell_type":"code","source":["class AttentionWeights():\n","\n","  def __init__(self, flagMatrix, numLoc, totTimeSteps, columnDefinition,inpSize, predSize, quantiles):\n","\n","    self.input_size = inpSize\n","    self.prediction_size = predSize\n","    self.total_sequence_length = inpSize + predSize\n","    self.weights = flagMatrix\n","    self.locations = numLoc \n","    self.timesteps = totTimeSteps\n","\n","    self.quantiles = quantiles\n","\n","    self.full_length = totTimeSteps - 1 + inpSize + predSize\n","\n","    self.sequences = flagMatrix['static_flags'].shape[0]\n","    \n","    self.static_features = flagMatrix['static_flags'].shape[1]\n","\n","    self.decoder_attention = flagMatrix['decoder_self_attn']\n","\n","    self.column_definition = columnDefinition\n","\n","    self.identifiers = flagMatrix['identifiers']\n","    self.timeID = flagMatrix['time']\n","\n","    self.known = None\n","    self.observed = None\n","    self.historical = None\n","    self.static = None\n","    self.unknown = None\n","    self.target = None\n","  \n","    self.setKnown()\n","    self.setObserved()\n","    self.setStatic()\n","    self.setTarget()\n","\n","    self.setUnknown()\n","    self.setHistorical()\n","    #historical_inputs = unknown + known + observed ---> unknown features in TFT should be removed?\n","\n","  def setKnown(self):\n","\n","    KnownInputs = []\n","\n","    for Column in self.column_definition:\n","      if Column[2] == InputTypes.KNOWN_INPUT:\n","        KnownInputs.append(Column)\n","\n","    self.known = KnownInputs\n","\n","  def setObserved(self):\n","\n","    ObservedInputs = []\n","\n","    for Column in self.column_definition:\n","      if Column[2] == InputTypes.OBSERVED_INPUT:\n","        ObservedInputs.append(Column)\n","    self.observed = ObservedInputs\n","\n","  def setStatic(self):\n","\n","    StaticInputs = []\n","\n","    for Column in self.column_definition:\n","      if Column[2] == InputTypes.STATIC_INPUT:\n","        StaticInputs.append(Column)\n","\n","    self.static = StaticInputs\n","\n","  def setTarget(self):\n","\n","    Targets = []\n","    for Column in self.column_definition:\n","      if Column[2] == InputTypes.TARGET:\n","        Targets.append(Column)\n","    self.target = Targets\n","\n","\n","  # This function will declare the inputs that the TFT does not recognize\n","  def setUnknown(self):\n","    UnknownInputs = []\n","\n","    for Column in self.column_definition:\n","      if Column[2] not in [InputTypes.TARGET, InputTypes.KNOWN_INPUT, InputTypes.OBSERVED_INPUT,\n","                        InputTypes.STATIC_INPUT]:\n","        UnknownInputs.append(Column)\n","\n","    self.unknown = UnknownInputs\n","    \n","  def setHistorical(self):\n","    \n","    if self.unknown:\n","      Historical = self.unknown + self.known + self.observed\n","    else: \n","      Historical = self.known + self.observed\n","\n","    self.historical = Historical\n","    print(self.historical)\n","    \n","\n","\n","  def getStaticWeights(self):\n","\n","    staticMatrix = np.zeros((self.locations, self.static_features))\n","    LocationCounter=0\n","    \n","    for Sequence in range(self.sequences):\n","      if Sequence != 0 and Sequence % self.timesteps == 0:\n","        LocationCounter += 1\n","      staticMatrix[LocationCounter] = self.weights['static_flags'][Sequence]\n","\n","    SMatrix = np.zeros((self.locations, self.full_length, self.static_features))\n","\n","    for idx,i in enumerate(SMatrix):\n","      for jdx, j in enumerate(i):\n","        SMatrix[idx][jdx] = staticMatrix[idx]\n","\n","    return SMatrix\n","\n","  def getFutureWeights(self):\n","    seq, times, feat = self.weights['future_flags'].shape\n","    #Construct new matrix to store averages \n","    #   shape = (Location x TimeSteps x Features)\n","\n","    futureMatrix = np.zeros((self.locations, self.timesteps+times-1, feat))\n","    print(futureMatrix.shape)\n","\n","    locCounter=0\n","    TimeCounter=0\n","\n","    for Sequence in range(seq):#i goes from 0 to 29964 (length = 29965)\n","\n","      if Sequence != 0 and Sequence % self.timesteps == 0:\n","        locCounter += 1\n","        TimeCounter = 0\n","\n","      for TimeStep in range(times):  # TimeStep goes from 0 to 14 (length = 15)\n","        futureMatrix[locCounter,TimeCounter+TimeStep] += self.weights['future_flags'][Sequence, TimeStep]\n","\n","      TimeCounter += 1\n","\n","    # Divide Matrix ---> to incorporate this into the above code\n","    for idx,i in enumerate(futureMatrix):\n","      for jdx,j in enumerate(i):\n","        if jdx >= times-1 and jdx <= futureMatrix.shape[1] - times:\n","          futureMatrix[idx,jdx] = np.divide(futureMatrix[idx,jdx], times)\n","        else:\n","          divisor = min(abs(jdx+1), abs(futureMatrix.shape[1]-jdx))\n","          futureMatrix[idx,jdx] = np.divide(futureMatrix[idx,jdx], divisor)\n","\n","    FMatrix = np.zeros((self.locations, self.full_length,feat))\n","    FMatrix[:,self.input_size:,:] = futureMatrix\n","  \n","    return FMatrix\n","\n","  def getHistoricalWeights(self):\n","    \n","    seq, times, feat = self.weights['historical_flags'].shape\n","    #Construct new matrix to store averages \n","    #   shape = (Location x TimeSteps x Features)\n","\n","    historicalMatrix = np.zeros((self.locations, self.timesteps+times-1, feat))\n","    print(historicalMatrix.shape)\n","\n","    locCounter=0\n","    TimeCounter=0\n","\n","    for Sequence in range(seq):#i goes from 0 to 29964 (length = 29965)\n","\n","      if Sequence != 0 and Sequence % self.timesteps == 0:\n","        locCounter += 1\n","        TimeCounter = 0\n","\n","      for TimeStep in range(times):  # TimeStep goes from 0 to 14 (length = 15)\n","        historicalMatrix[locCounter,TimeCounter+TimeStep] += self.weights['historical_flags'][Sequence, TimeStep]\n","\n","      TimeCounter += 1\n","\n","    # Divide Matrix ---> to incorporate this into the above code\n","    for idx,i in enumerate(historicalMatrix):\n","      for jdx,j in enumerate(i):\n","        if jdx >= times-1 and jdx <= historicalMatrix.shape[1] - times:\n","          historicalMatrix[idx,jdx] = np.divide(historicalMatrix[idx,jdx], times)\n","        else:\n","          divisor = min(abs(jdx+1), abs(historicalMatrix.shape[1]-jdx))\n","          historicalMatrix[idx,jdx] = np.divide(historicalMatrix[idx,jdx], divisor)\n","\n","    HMatrix = np.zeros((self.locations, self.full_length, feat))\n","    HMatrix[:,:self.timesteps+times-1,:] = historicalMatrix\n","  \n","    return HMatrix\n","\n","  def getTemporalImportance(self,averageAcrossHeads=True):\n","      \n","    TempMatrix = self.decoder_attention\n","    if averageAcrossHeads:\n","      TempMatrix = TempMatrix.mean(axis=0).mean(axis=0)\n","    else:\n","      TempMatrix = TempMatrix.mean(axis=1)\n","\n","    return TempMatrix\n","\n","  def getTemporalQuantiles(self, averageAcrossHeads=True):\n","\n","    TempMatrix = self.decoder_attention\n","    if averageAcrossHeads:\n","      TempMatrix = TempMatrix.mean(axis=0).mean(axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"2hc6Qffl4Daq","executionInfo":{"status":"ok","timestamp":1642448952769,"user_tz":300,"elapsed":369,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"83a4590e-452d-4df5-b30e-92d2433a3967"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":2120},"id":"iDTqsOeioG3Q","executionInfo":{"status":"ok","timestamp":1642449062686,"user_tz":300,"elapsed":103494,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d68a42fd-3f7f-4a6c-9400-81a800bb174d"},"source":["output_map =train(expt_name=name,\n","     use_gpu=use_tensorflow_with_gpu,\n","     model_folder=os.path.join(config.model_folder, \"fixed\" + RunName),\n","     data_csv_path=TFTdfTotal,# actually dataset NOT file location\n","     data_formatter=formatter,\n","     use_testing_mode=False)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1m01/17/2022, 19:49:19 UTC \u001b[35mStart TFT Restarted CovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02  \n","              This is the TFT model fit for group number 2 in the rurality based stratification. The data is from beginning until July 2021.\n","              Feature importance is included in this modeling.\n","              \u001b[0m\n","Selecting GPU ID=0\n","*** Training from defined parameters for FFFFWNPF ***\n","Loading & splitting data...\n","Formatting train-valid-test splits.\n","Setting scalers with training data...\n","[('Location', 3, 4), ('Time from Start', 0, 5), ('RawLabel', 0, -1), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","InputTypes.TARGET\n","*** Loading hyperparm manager ***\n","Loading results from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02\n"," Load Previous Results True\n","*** Running calibration ***\n","Params Selected:\n","*** Running tests ***\n","Hello world\n","Resetting temp folder...\n","*** TemporalFusionTransformer params ***\n","# dropout_rate = 0.2\n","# hidden_layer_size = 64\n","# learning_rate = 0.001\n","# minibatch_size = 64\n","# max_gradient_norm = 0.01\n","# num_heads = 4\n","# stack_size = 1\n","# model_folder = ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02\n","# total_time_steps = 28\n","# num_encoder_steps = 13\n","# num_epochs = 60\n","# early_stopping_patience = 60\n","# multiprocessing_workers = 5\n","# column_definition = [('Location', 3, 4), ('Time from Start', 0, 5), ('RawLabel', 0, -1), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","# input_size = 23\n","# output_size = 2\n","# category_counts = []\n","# input_obs_loc = [1, 2]\n","# static_input_loc = [3, 4, 5, 6, 7, 8]\n","# known_regular_inputs = [3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22]\n","# known_categorical_inputs = []\n","# quantiles = [1.0]\n","# quantilenames = ['MSE']\n","# quantileindex = 0\n","# TFTLSTMFinalMLP = 128\n","# TFTOption1 = 1\n","# TFTMultivariate = True\n","# TFTFinalGatingOption = 1\n","# TFTSymbolicWindows = False\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:828 all_inputs shape=(None, 28, 23)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:578 regular_inputs shape=(None, 28, 23)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:579 obs_inputs shape=(None, 28, 64, 2)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:832 unknown_inputs shape=(None, 28, 64, 7)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:833 known_combined_layer shape=(None, 28, 64, 8)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:834 obs_inputs shape=(None, 28, 64, 2)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:835 static_inputs shape=(None, 6, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:898 static_inputs shape=(None, 6, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:900 static_encoder shape=(None, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:901 static_weights shape=(None, 6, 1)\n","WARNING:tensorflow:From /content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:982: The name tf.keras.layers.CuDNNLSTM is deprecated. Please use tf.compat.v1.keras.layers.CuDNNLSTM instead.\n","\n","self.FinalLoopSize   2\n","Transformer_layer  (None, 28, 64, 2)\n","outputs  (None, 15, 2)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Loading model from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02/TemporalFusionTransformer.ckpt\n","INFO:tensorflow:Restoring parameters from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02/TemporalFusionTransformer.ckpt\n","Done.\n","Computing best validation loss\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training_v1.py:2057: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n","  updates = self.state_updates\n"]},{"output_type":"stream","name":"stdout","text":["Computing test loss\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training_v1.py:2079: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n","  updates=self.state_updates,\n"]},{"output_type":"stream","name":"stdout","text":["Combined  (37604, 15, 2)\n","format outputs  (37604, 15, 2)\n","format outputs  (37604, 15, 2)\n","<built-in method keys of dict object at 0x7f44cfe86500>\n","Index(['forecast_time', 'identifier', 't+0-Obs0', 't+0-Obs1', 't+1-Obs0',\n","       't+1-Obs1', 't+2-Obs0', 't+2-Obs1', 't+3-Obs0', 't+3-Obs1', 't+4-Obs0',\n","       't+4-Obs1', 't+5-Obs0', 't+5-Obs1', 't+6-Obs0', 't+6-Obs1', 't+7-Obs0',\n","       't+7-Obs1', 't+8-Obs0', 't+8-Obs1', 't+9-Obs0', 't+9-Obs1', 't+10-Obs0',\n","       't+10-Obs1', 't+11-Obs0', 't+11-Obs1', 't+12-Obs0', 't+12-Obs1',\n","       't+13-Obs0', 't+13-Obs1', 't+14-Obs0', 't+14-Obs1'],\n","      dtype='object')\n","Training completed @ 2022-01-17 19:51:02.517845\n","Best validation loss = 0.0008778847479375224\n","Params:\n","dropout_rate  =  0.2\n","hidden_layer_size  =  64\n","learning_rate  =  0.001\n","minibatch_size  =  64\n","max_gradient_norm  =  0.01\n","num_heads  =  4\n","stack_size  =  1\n","model_folder  =  ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02\n","total_time_steps  =  28\n","num_encoder_steps  =  13\n","num_epochs  =  60\n","early_stopping_patience  =  60\n","multiprocessing_workers  =  5\n","column_definition  =  [('Location', 3, 4), ('Time from Start', 0, 5), ('RawLabel', 0, -1), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","input_size  =  23\n","output_size  =  2\n","category_counts  =  []\n","input_obs_loc  =  [1, 2]\n","static_input_loc  =  [3, 4, 5, 6, 7, 8]\n","known_regular_inputs  =  [3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22]\n","known_categorical_inputs  =  []\n","quantiles  =  [1.0]\n","quantilenames  =  ['MSE']\n","quantileindex  =  0\n","TFTLSTMFinalMLP  =  128\n","TFTOption1  =  1\n","TFTMultivariate  =  True\n","TFTFinalGatingOption  =  1\n","TFTSymbolicWindows  =  False\n","Your runtime has 27.3 gigabytes of available RAM\n","\n"]}]},{"cell_type":"code","source":["output_map"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":503},"id":"TwzDHLtLnsSu","executionInfo":{"status":"ok","timestamp":1642449522572,"user_tz":300,"elapsed":145,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"b4bd186a-346a-4cf9-b9da-8ba25c7977d9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["{'MSE':        forecast_time                    identifier  ...  t+14-Obs0  t+14-Obs1\n"," 0               12.0          Adams County Indiana  ...   0.004117   0.000290\n"," 1               13.0          Adams County Indiana  ...   0.006522  -0.000398\n"," 2               14.0          Adams County Indiana  ...   0.008766  -0.000190\n"," 3               15.0          Adams County Indiana  ...   0.007866   0.000313\n"," 4               16.0          Adams County Indiana  ...   0.005036   0.001499\n"," ...              ...                           ...  ...        ...        ...\n"," 37599          483.0  Wilkes County North Carolina  ...   0.003578   0.004243\n"," 37600          484.0  Wilkes County North Carolina  ...  -0.009617   0.003342\n"," 37601          485.0  Wilkes County North Carolina  ...   0.038677   0.004026\n"," 37602          486.0  Wilkes County North Carolina  ...   0.026452   0.002943\n"," 37603          487.0  Wilkes County North Carolina  ...   0.043424   0.004627\n"," \n"," [37604 rows x 32 columns],\n"," 'targets':        forecast_time                    identifier  ...  t+14-Obs0  t+14-Obs1\n"," 0               12.0          Adams County Indiana  ...        0.0        0.0\n"," 1               13.0          Adams County Indiana  ...        0.0        0.0\n"," 2               14.0          Adams County Indiana  ...        0.0        0.0\n"," 3               15.0          Adams County Indiana  ...        0.0        0.0\n"," 4               16.0          Adams County Indiana  ...        0.0        0.0\n"," ...              ...                           ...  ...        ...        ...\n"," 37599          483.0  Wilkes County North Carolina  ...        NaN        NaN\n"," 37600          484.0  Wilkes County North Carolina  ...        NaN        NaN\n"," 37601          485.0  Wilkes County North Carolina  ...        NaN        NaN\n"," 37602          486.0  Wilkes County North Carolina  ...        NaN        NaN\n"," 37603          487.0  Wilkes County North Carolina  ...        NaN        NaN\n"," \n"," [37604 rows x 32 columns]}"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["int_weights = loadT(expt_name=name,\n","     use_gpu=use_tensorflow_with_gpu,\n","     model_folder=os.path.join(config.model_folder, \"fixed\" + RunName),\n","     data_csv_path=TFTdfTotal,# actually dataset NOT file location\n","     data_formatter=formatter,\n","     use_testing_mode=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1217},"id":"KZR9mAD5PiqU","executionInfo":{"status":"ok","timestamp":1642450328661,"user_tz":300,"elapsed":80062,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"04bfbbd3-bf69-4d41-99a4-07628172f82f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\u001b[1m01/17/2022, 20:10:48 UTC \u001b[35mStart TFT Restarted CovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02  \n","              This is the TFT model fit for group number 2 in the rurality based stratification. The data is from beginning until July 2021.\n","              Feature importance is included in this modeling.\n","              \u001b[0m\n","Selecting GPU ID=0\n","*** Training from defined parameters for FFFFWNPF ***\n","Loading & splitting data...\n","Formatting train-valid-test splits.\n","Setting scalers with training data...\n","[('Location', 3, 4), ('Time from Start', 0, 5), ('RawLabel', 0, -1), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","InputTypes.TARGET\n","*** Loading hyperparm manager ***\n","Loading results from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02\n"," Load Previous Results True\n","*** Running calibration ***\n","Params Selected:\n","*** Running tests ***\n","Hello world\n","Resetting temp folder...\n","*** TemporalFusionTransformer params ***\n","# dropout_rate = 0.2\n","# hidden_layer_size = 64\n","# learning_rate = 0.001\n","# minibatch_size = 64\n","# max_gradient_norm = 0.01\n","# num_heads = 4\n","# stack_size = 1\n","# model_folder = ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02\n","# total_time_steps = 28\n","# num_encoder_steps = 13\n","# num_epochs = 60\n","# early_stopping_patience = 60\n","# multiprocessing_workers = 5\n","# column_definition = [('Location', 3, 4), ('Time from Start', 0, 5), ('RawLabel', 0, -1), ('0 Cases Root 2', 0, 0), ('1 Deaths Root 2', 0, 0), ('2 Age Distribution', 0, 3), ('3 Air Pollution', 0, 3), ('4 Comorbidities', 0, 3), ('5 Health Disparities', 0, 3), ('6 Mobility', 0, 3), ('7 Residential Density', 0, 3), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2)]\n","# input_size = 23\n","# output_size = 2\n","# category_counts = []\n","# input_obs_loc = [1, 2]\n","# static_input_loc = [3, 4, 5, 6, 7, 8]\n","# known_regular_inputs = [3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22]\n","# known_categorical_inputs = []\n","# quantiles = [1.0]\n","# quantilenames = ['MSE']\n","# quantileindex = 0\n","# TFTLSTMFinalMLP = 128\n","# TFTOption1 = 1\n","# TFTMultivariate = True\n","# TFTFinalGatingOption = 1\n","# TFTSymbolicWindows = False\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:828 all_inputs shape=(None, 28, 23)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:578 regular_inputs shape=(None, 28, 23)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:579 obs_inputs shape=(None, 28, 64, 2)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:832 unknown_inputs shape=(None, 28, 64, 7)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:833 known_combined_layer shape=(None, 28, 64, 8)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:834 obs_inputs shape=(None, 28, 64, 2)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:835 static_inputs shape=(None, 6, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:898 static_inputs shape=(None, 6, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:900 static_encoder shape=(None, 64)\n","/content/drive/My Drive/independent_study2/GPCE/TFToriginal/TFTCode/libs/tft_modelDev.py:901 static_weights shape=(None, 6, 1)\n","self.FinalLoopSize   2\n","Transformer_layer  (None, 28, 64, 2)\n","outputs  (None, 15, 2)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Loading model from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02/TemporalFusionTransformer.ckpt\n","INFO:tensorflow:Restoring parameters from ../TFTData/saved_models/FFFFWNPF/fixedCovidA21-TFT2Extended-JulyCutoff-TFTRuralityGrouping02/TemporalFusionTransformer.ckpt\n","Done.\n","Done.\n"]}]},{"cell_type":"code","source":["TFTAttentionWeights = AttentionWeights(flagMatrix=int_weights,\n","                                       numLoc=Nloc,\n","                                       totTimeSteps=Num_Seq - TFTFutures + 1 ,\n","                                       columnDefinition=TFTcolumn_definition,\n","                                       inpSize=Tseq,\n","                                       predSize=TFTFutures,\n","                                       quantiles=[.3,.5,.7]\n","                                       )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"NVv9N0fHPk7C","executionInfo":{"status":"ok","timestamp":1642450328661,"user_tz":300,"elapsed":3,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2b7f3d85-be9e-4e41-d59e-7b22d0f7c547"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[('RawLabel', 0, -1), ('Location', 3, 4), ('Time from Start', 0, 5), ('14 LinearSpace', 0, 2), ('15 Constant', 0, 2), ('16 LinearTime', 0, 2), ('17 P2-Time', 0, 2), ('18 P3-Time', 0, 2), ('19 P4-Time', 0, 2), ('20 CosWeekly', 0, 2), ('21 SinWeekly', 0, 2), ('8 Disease Spread', 0, 1), ('9 Social Distancing', 0, 1), ('10 Testing', 0, 1), ('11 Transmissible Cases', 0, 1), ('12 VaccinationOneDose', 0, 1), ('13 Vaccination', 0, 1)]\n"]}]},{"cell_type":"code","source":["TFTWeightShapes = {}\n","for i in int_weights:\n","  TFTWeightShapes[i] = int_weights[i].shape\n","TFTWeightShapes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"id":"HzxQDMl8Psc8","executionInfo":{"status":"ok","timestamp":1642344736860,"user_tz":300,"elapsed":460,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"8eb60118-3abc-4244-cb7a-ea0d9879614e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["{'decoder_self_attn': (4, 36419, 28, 28),\n"," 'future_flags': (36419, 15, 8),\n"," 'historical_flags': (36419, 13, 17),\n"," 'identifiers': (36419,),\n"," 'static_flags': (36419, 6),\n"," 'time': (36419, 28)}"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["test1 = np.array([[0,1,2,3],\n","                 [5,6,7,8]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"NIm1b0B3O3rR","executionInfo":{"status":"ok","timestamp":1642359147872,"user_tz":300,"elapsed":743,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"93e7fc6e-b73d-4fbe-cb1c-82fba0640f91"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["test1.mean(axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"nxDp3pcsO8mI","executionInfo":{"status":"ok","timestamp":1642359160083,"user_tz":300,"elapsed":410,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"31aa2db1-784a-473f-80a0-d69113647703"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["array([2.5, 3.5, 4.5, 5.5])"]},"metadata":{},"execution_count":210}]},{"cell_type":"code","source":["test1.sum(axis=0).sum(axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"-k5AapkBPAYW","executionInfo":{"status":"ok","timestamp":1642359434039,"user_tz":300,"elapsed":646,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"9c28de15-2c56-4a9f-bacd-2c2131b69242"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["32"]},"metadata":{},"execution_count":216}]},{"cell_type":"code","source":["int_weights['static_flags'].shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"VIpLtB6aiHnT","executionInfo":{"status":"ok","timestamp":1642364184322,"user_tz":300,"elapsed":748,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"61ef30b0-7ac5-45be-a1a3-9f70171d43db"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["(36419, 6)"]},"metadata":{},"execution_count":217}]},{"cell_type":"code","source":["TFTAttentionWeights.static"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"id":"kaePH6aJiLAa","executionInfo":{"status":"ok","timestamp":1642364202936,"user_tz":300,"elapsed":360,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"27424edf-9454-4155-c1b3-38e5ee2d8910"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["[('2 Age Distribution', 0, 3),\n"," ('3 Air Pollution', 0, 3),\n"," ('4 Comorbidities', 0, 3),\n"," ('5 Health Disparities', 0, 3),\n"," ('6 Mobility', 0, 3),\n"," ('7 Residential Density', 0, 3)]"]},"metadata":{},"execution_count":218}]},{"cell_type":"code","source":["!ls /content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"id":"wC0ucDjCiXK6","executionInfo":{"status":"ok","timestamp":1642364321031,"user_tz":300,"elapsed":352,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"34d1b9ad-9ede-47d1-8f62-57d052f5a368"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":[" 2020votes.csv\t\t   Population.csv\n","'Age Distribution.csv'\t  'Residential Density.csv'\n","'Air Pollution.csv'\t   RuralityCodes.csv\n"," Alaskavoting2016.csv\t   Rurality.csv\n"," archive\t\t   Rurality_Median_Mad.csv\n"," Co-morbidities.csv\t  'Social Distancing.csv'\n"," Comorbidities.csv\t   Testing.csv\n"," Demographics.csv\t  'Transmissible Cases.csv'\n","'Disease Spread.csv'\t   US_daily_cumulative_cases_Dec12.csv\n","'Health Disparities.csv'   US_daily_cumulative_deaths_Dec12.csv\n","'Hospital Beds.csv'\t   Vaccination.csv\n"," Mobility.csv\t\t   VaccinationOneDose.csv\n"]}]},{"cell_type":"code","source":["age_dist = pd.read_csv('/content/drive/MyDrive/independent_study2/COVIDJuly2020/CovidDecember12-2021/Age Distribution.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"W8VVPoXziQAq","executionInfo":{"status":"ok","timestamp":1642364350544,"user_tz":300,"elapsed":736,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d8607d9a-3d7b-4192-a5c4-8cfaf3e3e80e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","source":["### Equations for Attention Weights\n","\n","1a. \n","\n","Decoder Self Attention raw matrix $A_{h,s,d,d}$ , <br> where h is number of self attention heads, s is the total number of sequences created from timesteps and counties, and d is the day index in each sequence.\n","\n","Eqn 1a.\n","\n","$Q_u$ represents quantile $u$ of all sequences s for attention $\\alpha_{i,j}$ \n","\n","$\\;\\;\\;\\;\\;\\;$ $X_{q,d,d} = Q_u\\left({\\dfrac{\\sum\\limits_{h=1}^{n} \\alpha_{h,s,d,d}}{n}}\\right)$\n","\n","\n"],"metadata":{"id":"gTCOLAIB711x"}},{"cell_type":"markdown","metadata":{"id":"mofCjF-iNP0u"},"source":["###Save and Interpret TFT"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"budLvcXANYDw","executionInfo":{"status":"ok","timestamp":1642449589464,"user_tz":300,"elapsed":141,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"d795eff4-0149-48be-c662-f1c50d2aa802"},"source":["class TFTSaveandInterpret():\n","\n","  def __init__(self,output_map, ReshapedPredictionsTOT):\n","# output_map is a dictionary pointing to dataframes\n","# output_map[\"targets\"]) targets are called outputs on input\n","# output_map[\"p10\"] is   p10 quantile forecast\n","# output_map[\"p50\"] is   p10 quantile forecast\n","# output_map[\"p90\"] is   p10 quantile forecast\n","#  Labelled by last real time in sequence (t-1) which starts at time Tseq-1 going up to Num_Time-1\n","\n","# order of Dataframe columns is 'forecast_time', 'identifier', \n","#'t+0-Obs0', 't+0-Obs1', 't+1-Obs0', 't+1-Obs1', 't+2-Obs0', 't+2-Obs1', 't+3-Obs0', 't+3-Obs1', \n","#'t+4-Obs0', 't+4-Obs1', 't+5-Obs0', 't+5-Obs1', 't+6-Obs0', 't+6-Obs1', 't+7-Obs0', 't+7-Obs1', \n","#'t+8-Obs0', 't+8-Obs1', 't+9-Obs0', 't+9-Obs1', 't+10-Obs0', 't+10-Obs1', 't+11-Obs0', 't+11-Obs1', \n","#'t+12-Obs0', 't+12-Obs1', 't+13-Obs0', 't+13-Obs1', 't+14-Obs0', 't+14-Obs1''\n","\n","# First time is FFFFWNPF Sequence # + Tseq-1\n","# Rows of data frame are ilocation*(Num_Seq+1) + FFFFWNPF Sequence #\n","# ilocation runs from 0 ... Nloc-1 in same order in both TFT and FFFFWNPF\n","    Sizes = output_map[TFTQuantilenames[TFTPrimaryQuantileIndex]].shape\n","    self.Numx = Sizes[0]\n","    self.Numy = Sizes[1]\n","    self.Num_Seq1 = 1 + Num_Seq\n","    self.MaxTFTSeq = self.Num_Seq1-1\n","    expectednumx = self.Num_Seq1*Nloc\n","    if expectednumx != self.Numx:\n","      printexit(' Wrong sizes of TFT compared to FFFFWNPF ' + str(expectednumx) + ' ' + str(self.Numx))\n","    self.FFFFWNPFresults = np.zeros((self.Numx, NpredperseqTOT,3), dtype=np.float32)\n","\n","    mapFFFFtoTFT = np.empty(Nloc, dtype = np.int32)\n","    TFTLoc = output_map[TFTQuantilenames[TFTPrimaryQuantileIndex]]['identifier'].unique()\n","    FFFFWNPFLocLookup = {}\n","    for i,locname in enumerate(FFFFWNPFUniqueLabel):\n","      FFFFWNPFLocLookup[locname] = i\n","    TFTLocLookup = {}\n","    for i,locname in enumerate(TFTLoc):\n","      TFTLocLookup[locname] = i\n","      if FFFFWNPFLocLookup[locname] is None:\n","        printexit('Missing TFT Location '+locname)\n","    for i,locname in enumerate(FFFFWNPFUniqueLabel):\n","      j = TFTLocLookup[locname] \n","      if j is None:\n","        printexit('Missing FFFFWNPF Location '+ locname)\n","      mapFFFFtoTFT[i] = j\n","\n","\n","    indexposition = np.empty(NpredperseqTOT, dtype=int)\n","    output_mapcolumns = output_map[TFTQuantilenames[TFTPrimaryQuantileIndex]].columns\n","    numcols = len(output_mapcolumns)\n","    for ipred in range(0, NpredperseqTOT):\n","      label = PredictionTFTmapping[ipred]\n","      if label == ' ':\n","        indexposition[ipred]=ipred\n","      else:\n","        findpos = -1\n","        for i in range(0,numcols):\n","          if label == output_mapcolumns[i]:\n","            findpos = i\n","        if findpos < 0:\n","          printexit('Missing Output ' +str(ipred) + ' ' +label)    \n","        indexposition[ipred] = findpos\n","\n","    for iquantile in range(0,TFTlenquantiles):\n","      for ilocation in range(0,Nloc):\n","        for seqnumber in range(0,self.Num_Seq1):\n","          \n","          for ipred in range(0,NpredperseqTOT):\n","            label = PredictionTFTmapping[ipred]\n","            if label == ' ': # NOT calculated by TFT\n","              if seqnumber >= Num_Seq:\n","                value = 0.0\n","              else:\n","                value = ReshapedPredictionsTOT[ilocation, seqnumber, ipred]\n","\n","            else:\n","              ActualTFTSeq = seqnumber\n","              if ActualTFTSeq <= self.MaxTFTSeq:\n","                pos = indexposition[ipred]\n","                dfindex = self.Num_Seq1*mapFFFFtoTFT[ilocation] + ActualTFTSeq\n","                value = output_map[TFTQuantilenames[iquantile]].iloc[dfindex,pos] \n","              else:\n","                dfindex = self.Num_Seq1*mapFFFFtoTFT[ilocation] + self.MaxTFTSeq\n","                ifuture = int(ipred/FFFFWNPFNumberTargets)\n","                jfuture = ActualTFTSeq - self.MaxTFTSeq + ifuture\n","                if jfuture <= LengthFutures:\n","                    jpred = ipred + (jfuture-ifuture)*FFFFWNPFNumberTargets\n","                    value = output_map[TFTQuantilenames[iquantile]].iloc[dfindex,indexposition[jpred]]\n","                else:\n","                  value = 0.0\n","            \n","            FFFFdfindex = self.Num_Seq1*ilocation + seqnumber\n","            self.FFFFWNPFresults[FFFFdfindex,ipred,iquantile] = value           \n","\n","  # Default returns the median (50% quantile)\n","  def __call__(self, InputVector, Time= None, training = False, Quantile = None):\n","    lenvector = InputVector.shape[0]\n","    result = np.empty((lenvector,NpredperseqTOT), dtype=np.float32)\n","    if Quantile is None:\n","      Quantile = TFTPrimaryQuantileIndex\n","    for ivector in range(0,lenvector):\n","      dfindex = self.Num_Seq1*InputVector[ivector,0] + InputVector[ivector,1]\n","      result[ivector,:] = self.FFFFWNPFresults[dfindex, :, Quantile]\n","\n","    return result\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["tt = TFTSaveandInterpret(output_map, ReshapedPredictionsTOT)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"oC1SKF7Cn9id","executionInfo":{"status":"ok","timestamp":1642449708703,"user_tz":300,"elapsed":43643,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c41c171e-960c-4971-9a80-900e37905238"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["output_map['MSE']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":852},"id":"Z-lfUiGxoiP6","executionInfo":{"status":"ok","timestamp":1642449760561,"user_tz":300,"elapsed":157,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"aee4154c-f956-4693-ee05-074eeb6735c2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-ad14c495-7443-4975-b453-2db2667733d3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>forecast_time</th>\n","      <th>identifier</th>\n","      <th>t+0-Obs0</th>\n","      <th>t+0-Obs1</th>\n","      <th>t+1-Obs0</th>\n","      <th>t+1-Obs1</th>\n","      <th>t+2-Obs0</th>\n","      <th>t+2-Obs1</th>\n","      <th>t+3-Obs0</th>\n","      <th>t+3-Obs1</th>\n","      <th>t+4-Obs0</th>\n","      <th>t+4-Obs1</th>\n","      <th>t+5-Obs0</th>\n","      <th>t+5-Obs1</th>\n","      <th>t+6-Obs0</th>\n","      <th>t+6-Obs1</th>\n","      <th>t+7-Obs0</th>\n","      <th>t+7-Obs1</th>\n","      <th>t+8-Obs0</th>\n","      <th>t+8-Obs1</th>\n","      <th>t+9-Obs0</th>\n","      <th>t+9-Obs1</th>\n","      <th>t+10-Obs0</th>\n","      <th>t+10-Obs1</th>\n","      <th>t+11-Obs0</th>\n","      <th>t+11-Obs1</th>\n","      <th>t+12-Obs0</th>\n","      <th>t+12-Obs1</th>\n","      <th>t+13-Obs0</th>\n","      <th>t+13-Obs1</th>\n","      <th>t+14-Obs0</th>\n","      <th>t+14-Obs1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12.0</td>\n","      <td>Adams County Indiana</td>\n","      <td>-0.002495</td>\n","      <td>0.001313</td>\n","      <td>-0.000548</td>\n","      <td>0.001151</td>\n","      <td>0.001383</td>\n","      <td>0.000822</td>\n","      <td>-0.000118</td>\n","      <td>0.001261</td>\n","      <td>-0.002382</td>\n","      <td>0.001923</td>\n","      <td>-0.004818</td>\n","      <td>0.002628</td>\n","      <td>-0.001839</td>\n","      <td>0.002342</td>\n","      <td>0.000316</td>\n","      <td>0.002379</td>\n","      <td>0.003713</td>\n","      <td>0.002188</td>\n","      <td>0.005627</td>\n","      <td>0.001073</td>\n","      <td>0.002351</td>\n","      <td>0.001375</td>\n","      <td>-0.005383</td>\n","      <td>0.002143</td>\n","      <td>-0.001243</td>\n","      <td>0.002476</td>\n","      <td>-0.000805</td>\n","      <td>-0.000080</td>\n","      <td>0.004117</td>\n","      <td>0.000290</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13.0</td>\n","      <td>Adams County Indiana</td>\n","      <td>0.001076</td>\n","      <td>0.001055</td>\n","      <td>0.001237</td>\n","      <td>0.000784</td>\n","      <td>-0.000321</td>\n","      <td>0.001084</td>\n","      <td>-0.002732</td>\n","      <td>0.001778</td>\n","      <td>-0.004992</td>\n","      <td>0.002541</td>\n","      <td>-0.001957</td>\n","      <td>0.002297</td>\n","      <td>0.000298</td>\n","      <td>0.002348</td>\n","      <td>0.003755</td>\n","      <td>0.002074</td>\n","      <td>0.005712</td>\n","      <td>0.001077</td>\n","      <td>0.002440</td>\n","      <td>0.001391</td>\n","      <td>-0.005388</td>\n","      <td>0.002176</td>\n","      <td>-0.001272</td>\n","      <td>0.002486</td>\n","      <td>-0.000899</td>\n","      <td>-0.000106</td>\n","      <td>0.004005</td>\n","      <td>0.000277</td>\n","      <td>0.006522</td>\n","      <td>-0.000398</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>14.0</td>\n","      <td>Adams County Indiana</td>\n","      <td>-0.001080</td>\n","      <td>0.000603</td>\n","      <td>-0.000886</td>\n","      <td>0.001093</td>\n","      <td>-0.004105</td>\n","      <td>0.001751</td>\n","      <td>-0.006422</td>\n","      <td>0.002658</td>\n","      <td>-0.002994</td>\n","      <td>0.002335</td>\n","      <td>-0.000588</td>\n","      <td>0.002307</td>\n","      <td>0.003110</td>\n","      <td>0.002142</td>\n","      <td>0.005095</td>\n","      <td>0.001071</td>\n","      <td>0.002042</td>\n","      <td>0.001407</td>\n","      <td>-0.005930</td>\n","      <td>0.002219</td>\n","      <td>-0.001869</td>\n","      <td>0.002547</td>\n","      <td>-0.001378</td>\n","      <td>-0.000204</td>\n","      <td>0.003683</td>\n","      <td>0.000175</td>\n","      <td>0.006229</td>\n","      <td>-0.000513</td>\n","      <td>0.008766</td>\n","      <td>-0.000190</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15.0</td>\n","      <td>Adams County Indiana</td>\n","      <td>-0.001170</td>\n","      <td>0.000504</td>\n","      <td>-0.003883</td>\n","      <td>0.001438</td>\n","      <td>-0.005845</td>\n","      <td>0.002080</td>\n","      <td>-0.002637</td>\n","      <td>0.001785</td>\n","      <td>0.000085</td>\n","      <td>0.002141</td>\n","      <td>0.003712</td>\n","      <td>0.001970</td>\n","      <td>0.005615</td>\n","      <td>0.000866</td>\n","      <td>0.002635</td>\n","      <td>0.001220</td>\n","      <td>-0.005394</td>\n","      <td>0.002081</td>\n","      <td>-0.001206</td>\n","      <td>0.002410</td>\n","      <td>-0.000713</td>\n","      <td>-0.000381</td>\n","      <td>0.004437</td>\n","      <td>-0.000006</td>\n","      <td>0.006913</td>\n","      <td>-0.000601</td>\n","      <td>0.009376</td>\n","      <td>-0.000408</td>\n","      <td>0.007866</td>\n","      <td>0.000313</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>16.0</td>\n","      <td>Adams County Indiana</td>\n","      <td>-0.003200</td>\n","      <td>0.001751</td>\n","      <td>-0.005822</td>\n","      <td>0.001708</td>\n","      <td>-0.001808</td>\n","      <td>0.001066</td>\n","      <td>0.000638</td>\n","      <td>0.001985</td>\n","      <td>0.004364</td>\n","      <td>0.001830</td>\n","      <td>0.005963</td>\n","      <td>0.000623</td>\n","      <td>0.003012</td>\n","      <td>0.000918</td>\n","      <td>-0.004724</td>\n","      <td>0.001896</td>\n","      <td>-0.000382</td>\n","      <td>0.002296</td>\n","      <td>0.000145</td>\n","      <td>-0.000499</td>\n","      <td>0.005115</td>\n","      <td>-0.000158</td>\n","      <td>0.007471</td>\n","      <td>-0.000613</td>\n","      <td>0.009700</td>\n","      <td>-0.000570</td>\n","      <td>0.008197</td>\n","      <td>0.000022</td>\n","      <td>0.005036</td>\n","      <td>0.001499</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>37599</th>\n","      <td>483.0</td>\n","      <td>Wilkes County North Carolina</td>\n","      <td>0.003796</td>\n","      <td>0.001039</td>\n","      <td>-0.003364</td>\n","      <td>0.000225</td>\n","      <td>0.031809</td>\n","      <td>0.002916</td>\n","      <td>0.022587</td>\n","      <td>0.006006</td>\n","      <td>0.027509</td>\n","      <td>0.005953</td>\n","      <td>0.031853</td>\n","      <td>0.022229</td>\n","      <td>0.032809</td>\n","      <td>0.027824</td>\n","      <td>0.004136</td>\n","      <td>0.002092</td>\n","      <td>-0.004199</td>\n","      <td>0.000884</td>\n","      <td>0.033941</td>\n","      <td>0.002140</td>\n","      <td>0.025132</td>\n","      <td>0.005786</td>\n","      <td>0.032396</td>\n","      <td>0.006079</td>\n","      <td>0.035634</td>\n","      <td>0.019361</td>\n","      <td>0.033362</td>\n","      <td>0.018440</td>\n","      <td>0.003578</td>\n","      <td>0.004243</td>\n","    </tr>\n","    <tr>\n","      <th>37600</th>\n","      <td>484.0</td>\n","      <td>Wilkes County North Carolina</td>\n","      <td>-0.005739</td>\n","      <td>0.000402</td>\n","      <td>0.026068</td>\n","      <td>0.003311</td>\n","      <td>0.019411</td>\n","      <td>0.004456</td>\n","      <td>0.025703</td>\n","      <td>0.005092</td>\n","      <td>0.029398</td>\n","      <td>0.016844</td>\n","      <td>0.029934</td>\n","      <td>0.022726</td>\n","      <td>0.002413</td>\n","      <td>0.002429</td>\n","      <td>-0.004934</td>\n","      <td>0.001126</td>\n","      <td>0.033130</td>\n","      <td>0.002835</td>\n","      <td>0.023945</td>\n","      <td>0.005629</td>\n","      <td>0.032920</td>\n","      <td>0.006801</td>\n","      <td>0.035233</td>\n","      <td>0.018014</td>\n","      <td>0.032836</td>\n","      <td>0.017104</td>\n","      <td>0.002239</td>\n","      <td>0.004663</td>\n","      <td>-0.009617</td>\n","      <td>0.003342</td>\n","    </tr>\n","    <tr>\n","      <th>37601</th>\n","      <td>485.0</td>\n","      <td>Wilkes County North Carolina</td>\n","      <td>0.021875</td>\n","      <td>0.002608</td>\n","      <td>0.017606</td>\n","      <td>0.003700</td>\n","      <td>0.026136</td>\n","      <td>0.004801</td>\n","      <td>0.026066</td>\n","      <td>0.006865</td>\n","      <td>0.027931</td>\n","      <td>0.010714</td>\n","      <td>-0.000383</td>\n","      <td>0.002617</td>\n","      <td>-0.007670</td>\n","      <td>0.001169</td>\n","      <td>0.036909</td>\n","      <td>0.003876</td>\n","      <td>0.025685</td>\n","      <td>0.003525</td>\n","      <td>0.036041</td>\n","      <td>0.005039</td>\n","      <td>0.039206</td>\n","      <td>0.013310</td>\n","      <td>0.034023</td>\n","      <td>0.010483</td>\n","      <td>-0.001422</td>\n","      <td>0.004353</td>\n","      <td>-0.011139</td>\n","      <td>0.003463</td>\n","      <td>0.038677</td>\n","      <td>0.004026</td>\n","    </tr>\n","    <tr>\n","      <th>37602</th>\n","      <td>486.0</td>\n","      <td>Wilkes County North Carolina</td>\n","      <td>0.016760</td>\n","      <td>0.003551</td>\n","      <td>0.027970</td>\n","      <td>0.004842</td>\n","      <td>0.026241</td>\n","      <td>0.006069</td>\n","      <td>0.027810</td>\n","      <td>0.007976</td>\n","      <td>0.001639</td>\n","      <td>0.002506</td>\n","      <td>-0.005551</td>\n","      <td>0.000618</td>\n","      <td>0.040453</td>\n","      <td>0.004246</td>\n","      <td>0.027919</td>\n","      <td>0.003594</td>\n","      <td>0.040684</td>\n","      <td>0.004862</td>\n","      <td>0.042869</td>\n","      <td>0.011604</td>\n","      <td>0.036753</td>\n","      <td>0.010171</td>\n","      <td>0.000226</td>\n","      <td>0.005102</td>\n","      <td>-0.010154</td>\n","      <td>0.003744</td>\n","      <td>0.043098</td>\n","      <td>0.004766</td>\n","      <td>0.026452</td>\n","      <td>0.002943</td>\n","    </tr>\n","    <tr>\n","      <th>37603</th>\n","      <td>487.0</td>\n","      <td>Wilkes County North Carolina</td>\n","      <td>0.025871</td>\n","      <td>0.003816</td>\n","      <td>0.027156</td>\n","      <td>0.006865</td>\n","      <td>0.029651</td>\n","      <td>0.007533</td>\n","      <td>0.002389</td>\n","      <td>0.002224</td>\n","      <td>-0.004194</td>\n","      <td>0.000028</td>\n","      <td>0.043339</td>\n","      <td>0.004002</td>\n","      <td>0.031208</td>\n","      <td>0.003437</td>\n","      <td>0.043360</td>\n","      <td>0.004784</td>\n","      <td>0.045221</td>\n","      <td>0.010825</td>\n","      <td>0.039197</td>\n","      <td>0.009592</td>\n","      <td>0.001710</td>\n","      <td>0.005275</td>\n","      <td>-0.008881</td>\n","      <td>0.003836</td>\n","      <td>0.048585</td>\n","      <td>0.005065</td>\n","      <td>0.030668</td>\n","      <td>0.003729</td>\n","      <td>0.043424</td>\n","      <td>0.004627</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>37604 rows × 32 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad14c495-7443-4975-b453-2db2667733d3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ad14c495-7443-4975-b453-2db2667733d3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ad14c495-7443-4975-b453-2db2667733d3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       forecast_time                    identifier  ...  t+14-Obs0  t+14-Obs1\n","0               12.0          Adams County Indiana  ...   0.004117   0.000290\n","1               13.0          Adams County Indiana  ...   0.006522  -0.000398\n","2               14.0          Adams County Indiana  ...   0.008766  -0.000190\n","3               15.0          Adams County Indiana  ...   0.007866   0.000313\n","4               16.0          Adams County Indiana  ...   0.005036   0.001499\n","...              ...                           ...  ...        ...        ...\n","37599          483.0  Wilkes County North Carolina  ...   0.003578   0.004243\n","37600          484.0  Wilkes County North Carolina  ...  -0.009617   0.003342\n","37601          485.0  Wilkes County North Carolina  ...   0.038677   0.004026\n","37602          486.0  Wilkes County North Carolina  ...   0.026452   0.002943\n","37603          487.0  Wilkes County North Carolina  ...   0.043424   0.004627\n","\n","[37604 rows x 32 columns]"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["DL2 = False"],"metadata":{"id":"x2TUPZSXQh5D","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1642344739872,"user_tz":300,"elapsed":3,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2a942268-5afe-4560-d388-12531e686ee8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["def getGet(output_map, TFTWeights):\n","  MyFFFFWNPFLink = TFTSaveandInterpret(output_map, ReshapedPredictionsTOT)\n","  modelflag = 2\n","  FitPredictions = DLprediction(ReshapedSequencesTOT, RawInputPredictionsTOT, MyFFFFWNPFLink, modelflag, TFTWeights, LabelFit ='TFT')\n","  return FitPredictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"9zm2lPM2qPiB","executionInfo":{"status":"ok","timestamp":1642450227943,"user_tz":300,"elapsed":144,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"f0080f29-8fbc-45fb-b774-56a220aabea0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"code","source":["boom = getGet(output_map, TFTAttentionWeights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":20000,"referenced_widgets":["0fefd65637224b83ae31f4a25020d9b9","a55623b7b2ed4432bb8e64f32f0073e8","fd4d6d89c76b4ae5b53e2a84a8540df6","76089de79f784bcb8f31fed7ead393be","ae521a51829149f386d0b8e6492817f2","33a6f440ddd04eeb97e97f551e059c7e","27500e262ae943888d6eec960ba705e9","8abe47fa4cd647f5b8e18b1d553688c8","4c2b55daad0e4245bc45b8e76e269571","2a4b4fe25593420885d95be763b8c83b","bc5f196aefab4e0aa06438258730fa7d"],"output_embedded_package_id":"1VGIEHgAY_VOc1uXOY4exJFq19pflONaS"},"id":"LmDMuS3jqZdy","executionInfo":{"status":"ok","timestamp":1642450473199,"user_tz":300,"elapsed":130040,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"c268829c-1057-46a4-eee6-ad68c21d582b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"8i_tRpVRaQ4x","executionInfo":{"status":"ok","timestamp":1642344740347,"user_tz":300,"elapsed":3,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"2ec40765-9a6e-402b-ddb9-5d99fcf7eb88"},"source":["  def VisualizeTFT(output_map, TFTWeights):\n","    MyFFFFWNPFLink = TFTSaveandInterpret(output_map, ReshapedPredictionsTOT)\n","    modelflag = 2\n","    FitPredictions = DLprediction(ReshapedSequencesTOT, RawInputPredictionsTOT, MyFFFFWNPFLink, modelflag, TFTWeights, LabelFit ='TFT')\n","    if DL2:\n","      SensitivityAnalysis = DLprediction2F(ReshapedSequencesTOT, RawInputPredictionsTOT, MyFFFFWNPFLink, modelflag)\n","    # Input Predictions RawInputPredictionsTOT for DLPrediction are ordered Sequence #, Location but\n","    # Input Predictions ReshapedPredictionsTOT for TFTSaveandInterpret are ordered Location, Sequence#\n","    # Note TFT maximum Sequence # is one larger than FFFFWNPF"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","source":["# View TFT Results Here"],"metadata":{"id":"01t-W_fPM4PW"}},{"cell_type":"markdown","source":["<b> Formulae: </b>\n","\n"],"metadata":{"id":"eoq1flxOgBrB"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":20000,"referenced_widgets":["d6917dd6667b4c16961af7c649336954","4786adc5e0cb4bc5af1db61c58748d45","04da97cf24a14850aa9af1d66e1d9069","f3b5e57f79474be1a3879e46186b3b16","18fdc5f446a247189ad0104ca00fee81","86794ad5589c46699792cbfe418a1603","003b9198837b4dcbb0445e80ad36923c","4693e02c21d64f66a9235eaac9e4fdf7","5ed51a461429446a8182866d81261418","476a31016895495e95bf282eccd1342f","4aaa61af724540b68ddbb56368ecc015"],"output_embedded_package_id":"16XEfKf7XqcnReqvkCJK01iJkxECMbCyx"},"id":"gNqqi5jNn0xD","executionInfo":{"status":"error","timestamp":1642344838115,"user_tz":300,"elapsed":95774,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"}},"outputId":"574b2f6c-a0d0-48b3-ebb4-645a7d9c5bf1"},"source":["SkipDL2F = True\n","VisualizeTFT(output_map, TFTAttentionWeights)\n","sys.exit(0)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"LuARcncFTC39"},"source":["### More TFT Parameters"]},{"cell_type":"code","metadata":{"id":"ftN756zU9gLQ"},"source":["\n","TFTnum_static = TFTScaledStaticInputs.shape[1]\n","if TFTCategoryCountsStaticInputs.shape[0] != TFTnum_static:\n","  printexit('Inconsistent static Shape)')\n","TFTNumDynamicVariables = TFTScaledDynamicInputs.shape[2]\n","if TFTCategoryCountsDynamicInputs.shape[0] != TFTNumDynamicVariables:\n","  printexit('Inconsistent static Shape)')\n","TFTNumDynamicHistoryVariables = 0\n","TFTNumDynamicFutureVariables = 0\n","\n","\n","\n","TFTFutureInputLSTM = False\n","if TFTNumDynamicFutureVariables == 0:\n","  TFTFutureInputLSTM = False\n","else:\n","  TFTFutureInputLSTM = True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rMIeYApPybFA"},"source":["# Standalone LSTM Model"]},{"cell_type":"markdown","metadata":{"id":"23a1qMuO_yVT"},"source":["### LSTM Utilities"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"awPqzc4H_yVh","executionInfo":{"elapsed":300,"status":"ok","timestamp":1634006972483,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"7fefd857-9588-4cf7-9abc-129286473248"},"source":["\n","def get_model_summary(model):  \n","  stream = io.StringIO()\n","  model.summary(print_fn=lambda x: stream.write(x + '\\n'))\n","  summary_string = stream.getvalue()\n","  stream.close()\n","  return summary_string\n","\n","def setDLinput(Spacetime = True):\n","  # Initial data is Flatten([Num_Seq][Nloc]) [Tseq] with values [Nprop-Sel + Nforcing + Add(ExPosEnc-Selin)] starting with   RawInputSequencesTOT\n","  # Predictions are Flatten([Num_Seq] [Nloc]) [Predvals=Npred+ExPosEnc-Selout] [Predtimes = Forecast-time range] starting with RawInputPredictionsTOT\n","  # No assumptions as to type of variables here\n","  if SymbolicWindows:\n","    X_predict = SymbolicInputSequencesTOT.reshape(OuterBatchDimension,1,1)\n","  else:\n","    X_predict = RawInputSequencesTOT.reshape(OuterBatchDimension,Tseq,NpropperseqTOT)\n","  y_predict = RawInputPredictionsTOT.reshape(OuterBatchDimension,NpredperseqTOT)\n","  if Spacetime:\n","     SpacetimeforMask_predict =  SpacetimeforMask.reshape(OuterBatchDimension,1,1).copy()\n","     return X_predict, y_predict, SpacetimeforMask_predict\n","  return X_predict, y_predict\n","\n","def setSeparateDLinput(model, Spacetime = False):\n","  # Initial data is Flatten([Num_Seq][Nloc]) [Tseq] with values [Nprop-Sel + Nforcing + Add(ExPosEnc-Selin)] starting with   RawInputSequencesTOT\n","  # Predictions are Flatten([Num_Seq] [Nloc]) [Predvals=Npred+ExPosEnc-Selout] [Predtimes = Forecast-time range] starting with RawInputPredictionsTOT\n","  # No assumptions as to type of variables here\n","  # model = 0 LSTM =1 transformer\n","  if model == 0: \n","    Spacetime = False\n","  X_val = None\n","  y_val = None\n","  Spacetime_val = None\n","  Spacetime_train = None\n","  if SymbolicWindows:\n","    InputSequences = np.empty([Num_Seq, TrainingNloc], dtype = np.int32)\n","    for iloc in range(0,TrainingNloc):   \n","      InputSequences[:,iloc] = SymbolicInputSequencesTOT[:,ListofTrainingLocs[iloc]]\n","    if model == 0:\n","      X_train = InputSequences.reshape(Num_Seq*TrainingNloc,1,1)\n","    else:\n","      X_train = InputSequences\n","    if Spacetime:\n","      Spacetime_train = X_train.copy()\n","\n","    if LocationValidationFraction > 0.001:\n","      UsedValidationNloc = ValidationNloc\n","      if FullSetValidation:\n","        UsedValidationNloc = Nloc\n","      ValInputSequences = np.empty([Num_Seq, UsedValidationNloc], dtype = np.int32)\n","      if FullSetValidation:\n","        for iloc in range(0,Nloc):\n","          ValInputSequences[:,iloc] = SymbolicInputSequencesTOT[:,iloc]\n","      else:\n","        for iloc in range(0,ValidationNloc):\n","          ValInputSequences[:,iloc] = SymbolicInputSequencesTOT[:,ListofValidationLocs[iloc]]\n","      if model == 0:\n","        X_val = ValInputSequences.reshape(Num_Seq * UsedValidationNloc,1,1)\n","      else:\n","        X_val = ValInputSequences\n","      if Spacetime:\n","        Spacetime_val = X_val.copy()\n","\n","  else: # Symbolic Windows false Calculate Training\n","    InputSequences = np.empty([Num_Seq, TrainingNloc,Tseq,NpropperseqTOT], dtype = np.float32)\n","    for iloc in range(0,TrainingNloc): \n","      InputSequences[:,iloc,:,:] = RawInputSequencesTOT[:,ListofTrainingLocs[iloc],:,:]\n","    if model == 0:\n","      X_train = InputSequences.reshape(Num_Seq*TrainingNloc,Tseq,NpropperseqTOT)\n","    else:\n","      X_train = InputSequences\n","    if Spacetime:\n","      Spacetime_train = np.empty([Num_Seq, TrainingNloc], dtype = np.int32)\n","      for iloc in range(0,TrainingNloc):   \n","        Spacetime_train[:,iloc] = SpacetimeforMask[:,ListofTrainingLocs[iloc]]\n","\n","    if LocationValidationFraction > 0.001: # Symbolic Windows false Calculate Validation\n","      UsedValidationNloc = ValidationNloc\n","      if FullSetValidation:\n","        UsedValidationNloc = Nloc\n","      ValInputSequences = np.empty([Num_Seq, UsedValidationNloc,Tseq,NpropperseqTOT], dtype = np.float32)\n","      if FullSetValidation:\n","        for iloc in range(0,Nloc):\n","          ValInputSequences[:,iloc,:,:] = RawInputSequencesTOT[:,iloc,:,:]\n","      else:\n","        for iloc in range(0,ValidationNloc):\n","          ValInputSequences[:,iloc,:,:] = RawInputSequencesTOT[:,ListofValidationLocs[iloc],:,:]\n","      if model == 0:\n","        X_val = ValInputSequences.reshape(Num_Seq * UsedValidationNloc,Tseq,NpropperseqTOT)\n","      else:\n","        X_val = ValInputSequences\n","      if Spacetime:\n","        Spacetime_val = np.empty([Num_Seq, UsedValidationNloc], dtype = np.int32)\n","        if FullSetValidation:\n","          for iloc in range(0,Nloc):\n","            Spacetime_val[:,iloc] = SpacetimeforMask[:,iloc]\n","        else:\n","          for iloc in range(0,ValidationNloc):   \n","            Spacetime_val[:,iloc] = SpacetimeforMask[:,ListofValidationLocs[iloc]]\n","  \n","  # Calculate training predictions \n","  InputPredictions = np.empty([Num_Seq, TrainingNloc,NpredperseqTOT], dtype = np.float32)\n","  for iloc in range(0,TrainingNloc):\n","    InputPredictions[:,iloc,:] = RawInputPredictionsTOT[:,ListofTrainingLocs[iloc],:]\n","  if model == 0:\n","    y_train = InputPredictions.reshape(OuterBatchDimension,NpredperseqTOT)\n","  else:\n","    y_train = InputPredictions\n","\n","  # Calculate validation predictions \n","  if LocationValidationFraction > 0.001:\n","    ValInputPredictions = np.empty([Num_Seq, UsedValidationNloc,NpredperseqTOT], dtype = np.float32)\n","    if FullSetValidation:\n","      for iloc in range(0,Nloc):\n","        ValInputPredictions[:,iloc,:] = RawInputPredictionsTOT[:,iloc,:]\n","    else:\n","      for iloc in range(0,ValidationNloc):\n","        ValInputPredictions[:,iloc,:] = RawInputPredictionsTOT[:,ListofValidationLocs[iloc],:]\n","    if model == 0:\n","      y_val = ValInputPredictions.reshape(Num_Seq * ValidationNloc,NpredperseqTOT)\n","    else:\n","      y_val = ValInputPredictions\n","\n","  if Spacetime:\n","    return X_train, y_train, Spacetime_train, X_val, y_val, Spacetime_val\n","  else:    \n","    return X_train, y_train,X_val,y_val\n","\n","def InitializeDLforTimeSeries(message,processindex,y_predict):\n","  if( processindex == 0 ):\n","      current_time = timenow()\n","      line = (startbold + current_time + ' ' + message + resetfonts + \" Window Size \" + str(Tseq) + \n","            \" Number of samples over time that sequence starts at and location:\" +str(OuterBatchDimension) + \n","            \" Number input features per sequence:\" + str(NpropperseqTOT) +  \n","            \" Number of predicted outputs per sequence:\" + str(NpredperseqTOT) + \n","            \" Batch_size:\" + str(LSTMbatch_size) + \n","            \" n_nodes:\" + str(number_LSTMnodes) + \n","            \" epochs:\" + str(LSTMepochs))\n","      print(wraptotext(line))\n","      checkNaN(y_predict)"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"yc91CRXwDfzC"},"source":["##LSTM Models"]},{"cell_type":"markdown","metadata":{"id":"1n1lxglrD3GJ"},"source":["### LSTM Model and Layer Class"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"JtHEHa7S_yVq","executionInfo":{"elapsed":129,"status":"ok","timestamp":1634007124796,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"5eb8aea0-5c9a-498f-c138-6427faff9107"},"source":["class MyLSTMmodel(tf.keras.Model):\n","  def __init__(self, **kwargs):\n","    super(MyLSTMmodel, self).__init__(**kwargs)\n","    self.fullLSTM = MyLSTMlayer()\n","\n","  def call(self, inputs):  \n","    outputs = self.fullLSTM(inputs)\n","    return outputs\n","\n","  def build_graph(self, shapes):\n","    input = tf.keras.layers.Input(shape=shapes, name=\"Input\")\n","    return tf.keras.models.Model(inputs=[input], outputs=[self.call(input)])\n","    \n","class MyLSTMlayer(tf.keras.Model):\n","# Class for a simple multiple layer LSTM with FCN at start and end\n","# All parameters defined externally\n","# structured so MyLSTMlayer can be used standalone or in part of a transformer\n","\n","  def __init__(self, **kwargs):\n","    super(MyLSTMlayer, self).__init__(**kwargs)\n","    self.return_state = True\n","      #  if self.return_state:\n","    if (LSTMInitialMLP > 0) and (not LSTMSkipInitial):\n","      self.dense_1 = tf.keras.layers.Dense(LSTMInitialMLP, activation=LSTMactivationvalue)\n","    self.LSTM_1 =tf.keras.layers.LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout1, dropout = LSTMdropout1,\n","                  activation= LSTMactivationvalue , return_sequences=True, recurrent_activation= LSTMrecurrent_activation,\n","                  return_state=self.return_state, stateful=False,)\n","    self.LSTM_2 =tf.keras.layers.LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout1, dropout = LSTMdropout1,\n","        activation= LSTMactivationvalue , return_sequences=LSTMThirdLayer, recurrent_activation= LSTMrecurrent_activation)\n","    if(LSTMThirdLayer):\n","      self.LSTM_3 =tf.keras.layers.LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout1, dropout = LSTMdropout1,\n","                    activation= LSTMactivationvalue , return_sequences=False, recurrent_activation= LSTMrecurrent_activation)\n","    self.dense_2 = tf.keras.layers.Dense(LSTMFinalMLP, activation=LSTMactivationvalue)\n","    self.dense_f = tf.keras.layers.Dense(NpredperseqTOT)\n","\n","  def call(self, inputs, training=None):\n","    if (LSTMInitialMLP > 0) and (not LSTMSkipInitial):\n","      Runningdata = self.dense_1(inputs)\n","      if self.return_state:\n","        Runningdata, state_h, state_c = self.LSTM_1(Runningdata, training=training)\n","      else:\n","          Runningdata, state_h, state_c  = self.LSTM_1(Runningdata, training=training)\n","        # else:\n","        #   Runningdata = self.LSTM_1(Runningdata, training=training)\n","    else:\n","      Runningdata, state_h, state_c = self.LSTM_1(inputs, training=training)\n","    if self.return_state:  \n","      Runningdata = self.LSTM_2(Runningdata, training=training, initial_state=[state_h, state_c])\n","    else:\n","      Runningdata = self.LSTM_2(Runningdata, training=training)\n","    if(LSTMThirdLayer):\n","      Runningdata = self.LSTM_3(Runningdata, training=training)\n","    if(LSTMFinalMLP > 0):\n","      Runningdata = self.dense_2(Runningdata)\n","    Outputdata = self.dense_f(Runningdata)\n","    return Outputdata\n","\n","  def build_graph(self, shapes):\n","    input = tf.keras.layers.Input(shape=shapes, name=\"Input\")\n","    return tf.keras.models.Model(inputs=[input], outputs=[self.call(input)])"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"j-_CJ_TUEjE8"},"source":["###Run LSTM Class with Keras Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"4-CR9hst_yVx","executionInfo":{"elapsed":203,"status":"ok","timestamp":1634007128247,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"fa4b02e5-f9af-4811-ceb2-502bfa0551be"},"source":["def RunLSTMClassVersion():\n","  # Run the LSTM model defined by Model and Layer class\n","\n","\n","  X_predict, y_predict = setDLinput(Spacetime = False)\n","  InitializeDLforTimeSeries('Class Version ',processindex,y_predict)\n","\n","  X_train, y_train = shuffleDLinput(X_predict, y_predict)\n"," \n","  myLSTMmodel = MyLSTMmodel(name ='myLSTMmodel')\n","  if CustomLoss == 0:\n","      myLSTMmodel.compile(loss='mse', optimizer= LSTMoptimizer)\n","  if CustomLoss == 1:\n","      myLSTMmodel.compile(loss= custom_lossGCF1, optimizer= LSTMoptimizer)\n","  if CustomLoss == 4:    \n","      myLSTMmodel.compile(loss= custom_lossGCF4, optimizer= LSTMoptimizer)\n","\n","  the_callbacks = [TqdmCallback(),]\n","\n","  if UseClassweights:   \n","      cw = {}\n","      for i in range(0,NpredperseqTOT):\n","        cw[i] = Predictionwgt[i]     \n","      sw = np.empty_like(y_train, dtype=np.float32)\n","      for j in range(0,sw.shape[0]):\n","        for i in range(0,NpredperseqTOT):\n","          sw[j,i] = Predictionwgt[i]  \n","      modelresult = myLSTMmodel.fit(X_train, y_train,\n","            sample_weight = sw,\n","            epochs=LSTMepochs,\n","            batch_size=LSTMbatch_size,\n","#           class_weight = cw,\n","            verbose=LSTMverbose,\n","            validation_split=UsedLSTMvalidationfrac,\n","            callbacks=the_callbacks\n","            )\n","  else:\n","      modelresult = myLSTMmodel.fit(X_train, y_train,\n","            epochs=LSTMepochs,\n","            batch_size=LSTMbatch_size,\n","            verbose=LSTMverbose,\n","            validation_split=UsedLSTMvalidationfrac,\n","            callbacks=the_callbacks\n","            ) \n","  myLSTMmodel.summary()\n","\n","  recordtrainloss = modelresult.history['loss']\n","  recordvalloss = modelresult.history['val_loss']\n","  finalizeDL(myLSTMmodel,recordtrainloss, recordvalloss,UsedLSTMvalidationfrac,RawInputSequencesTOT, RawInputPredictionsTOT,0)\n","  return\n"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"42UqTW0xDoKr"},"source":["### LSTM + Transformer TF  Monitor"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"rIocfMfZBjfa","executionInfo":{"elapsed":1271,"status":"ok","timestamp":1634007132167,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"2f6c1abd-163a-46c3-a174-4202d80fce30"},"source":["class TFTrainingMonitor():\n","  def __init__(self):\n","\n","    # These OPERATIONAL variables control saving of best fits\n","    self.lastsavedepoch = -1 # Epoch number where last saved fit done\n","    self.BestLossValueSaved = NaN # Training Loss value of last saved fit\n","    self.BestValLossValueSaved = NaN # Validation Loss value of last saved fit\n","    self.Numsuccess = 0 # count little successes up to SuccessLimit\n","    self.Numfailed = 0\n","    self.LastLossValue = NaN # Loss on previous epoch\n","    self.MinLossValue = NaN # Saved minimum loss value\n","    self.LastValLossValue = NaN # Validation Loss on previous epoch\n","    self.MinValLossValue = NaN # validation loss value at last save\n","    self.BestLossSaved = False # Boolean to indicate that best Loss value saved\n","    self.saveMinLosspath = '' # Checkpoint path for saved network \n","    self.epochcount = 0\n","    self.NumberTimesSaved = 0 # Number of Checkpointing steps for Best Loss\n","    self.NumberTimesRestored = 0 # Number of Checkpointing Restores\n","    self.LittleJumpdifference = NaN\n","    self.LittleValJumpdifference = NaN\n","    self.AccumulateSuccesses = 0\n","    self.AccumulateFailures = np.zeros(5, dtype=np.int)\n","    self.RestoreReasons = np.zeros(8, dtype = np.int)\n","    self.NameofFailures = ['Success','Train Only Failed','Val Only Failed','Both Failed', 'NaN']\n","    self.NameofRestoreReasons = ['Both Big Jump', 'Both Little Jump','Train Big Jump', 'Train Little Jump','Val Big Jump','Val Little Jump',' Failure Limit', ' NaN']\n","# End OPERATIONAL Control set up for best fit checkpointing\n","\n","# These are parameters use can set\n","    self.UseBestAvailableLoss = True\n","    self.LittleJump = 2.0 # Multiplier for checking jump compared to recent changes\n","    self.ValLittleJump = 2.0 # Multiplier for checking jump compared to recent changes\n","    self.startepochs = -1 # Ignore this number of epochs to let system get started\n","    self.SuccessLimit = 20 # Don't keep saving. Wait for this number of (little) successes\n","    self.FailureLimit = 10 # Number of failures before restore\n","    self.BadJumpfraction = 0.2 # This fractional jump will trigger attempt to go back to saved value\n","    self.ValBadJumpfraction = 0.2 # This fractional jump will trigger attempt to go back to saved value\n","    self.ValidationFraction = 0.0 # Must be used validation fraction\n","    DownplayValidationIncrease = True\n","\n","# End parameters user can set\n","\n","    self.checkpoint = None\n","    self.CHECKPOINTDIR = ''\n","    self.RunName = ''\n","\n","    self.train_epoch = 0.0\n","    self.val_epoch = 0.0\n","    tfepochstep = None\n","    recordtrainloss =[]\n","    recordvalloss = []\n","\n","  def SetControlParms(self, UseBestAvailableLoss = None, LittleJump = None, startepochs = None, ValLittleJump = None,\n","       ValBadJumpfraction = None, SuccessLimit = None, FailureLimit = None, BadJumpfraction = None, DownplayValidationIncrease=True):\n","    if UseBestAvailableLoss is not None:\n","      self.UseBestAvailableLoss = UseBestAvailableLoss\n","    if LittleJump is not None:\n","      self.LittleJump = LittleJump\n","    if ValLittleJump is not None:\n","      self.ValLittleJump = ValLittleJump\n","    if startepochs is not None:\n","      self.startepochs = startepochs\n","    if SuccessLimit is not None:\n","      self.SuccessLimit = SuccessLimit\n","    if FailureLimit is not None:\n","      self.FailureLimit = FailureLimit\n","    if BadJumpfraction is not None:\n","      self.BadJumpfraction = BadJumpfraction\n","    if ValBadJumpfraction is not None:\n","      self.ValBadJumpfraction = ValBadJumpfraction\n","    if DownplayValidationIncrease:\n","      self.ValBadJumpfraction = 200.0\n","      self.ValLittleJump = 2000.0 \n","    elif ValLittleJump is None:\n","      self.ValLittleJump = 2.0\n","    elif ValBadJumpfraction is None:\n","      self.ValBadJumpfraction = 0.2\n","      \n","  def SetCheckpointParms(self,checkpointObject,CHECKPOINTDIR,RunName = '',Restoredcheckpoint= False, Restored_path = '',  \n","                         ValidationFraction = 0.0, SavedTrainLoss = NaN, SavedValLoss = NaN):\n","    self.ValidationFraction = ValidationFraction\n","    self.checkpoint = checkpointObject\n","    self.CHECKPOINTDIR = CHECKPOINTDIR\n","    self.RunName = RunName\n","    if Restoredcheckpoint:\n","      self.BestLossSaved = True\n","      self.saveMinLosspath = Restored_path # Checkpoint path for saved network \n","      self.LastLossValue = SavedTrainLoss\n","      self.LastValLossValue = SavedValLoss\n","      self.BestLossValueSaved = SavedTrainLoss\n","      self.BestValLossValueSaved = SavedValLoss\n","      self.lastsavedepoch =  self.epochcount\n","      self.MinLossValue = SavedTrainLoss\n","      self.MinValLossValue = SavedValLoss\n","\n","  def EpochEvaluate(self, epochcount,train_epoch, val_epoch, tfepochstep, recordtrainloss, recordvalloss):\n","    FalseReturn = 0\n","    TrueReturn = 1\n","    self.epochcount = epochcount\n","    self.train_epoch = train_epoch\n","    self.val_epoch = val_epoch\n","    self.tfepochstep = tfepochstep\n","    self.recordtrainloss = recordtrainloss\n","    self.recordvalloss = recordvalloss\n","\n","    Needtorestore = False \n","    Failreason = 5 # nonsense\n","    LossChange = 0.0\n","    ValLossChange = 0.0\n","    if np.math.isnan(self.train_epoch) or np.math.isnan(self.val_epoch):\n","      Restoreflag = 7\n","      self.RestoreReasons[Restoreflag] += 1\n","      Needtorestore = True\n","      Failreason = 4\n","      self.AccumulateFailures[Failreason] += 1\n","      print(str(self.epochcount) + ' NAN Seen Reason ' + str(Failreason) + ' #succ ' + str(self.Numsuccess) + ' #fail ' + str(self.Numfailed) + ' ' + str(round(self.train_epoch,6)) + ' ' + str(round(self.val_epoch,6)), flush=True)\n","      return TrueReturn, self.train_epoch, self.val_epoch\n","\n","    if self.epochcount  <= self.startepochs:\n","      return FalseReturn, self.train_epoch, self.val_epoch\n","\n","    if not np.math.isnan(self.LastLossValue):\n","      LossChange = self.train_epoch - self.LastLossValue\n","      if self.ValidationFraction > 0.001:\n","        ValLossChange = self.val_epoch - self.LastValLossValue\n","    if LossChange <= 0:\n","      if self.ValidationFraction > 0.001:\n","# Quick Fix\n","        self.Numsuccess +=1\n","        self.AccumulateSuccesses += 1\n","        if ValLossChange <= 0:\n","          Failreason = 0\n","        else:\n","          Failreason = 2\n","      else:\n","        self.Numsuccess +=1\n","        self.AccumulateSuccesses += 1\n","        Failreason = 0\n","    else:\n","      Failreason = 1\n","      if self.ValidationFraction > 0.001:\n","        if ValLossChange > 0:\n","          Failreason = 3          \n","    if Failreason > 0:\n","        self.Numfailed += 1\n","    self.AccumulateFailures[Failreason] += 1\n","\n","    if (not np.math.isnan(self.LastLossValue)) and (Failreason > 0):\n","      print(str(self.epochcount) + ' Reason ' + str(Failreason) + ' #succ ' + str(self.Numsuccess) + ' #fail ' + str(self.Numfailed) + ' ' + str(round(self.train_epoch,6)) \n","        + ' ' + str(round(self.LastLossValue,6)) + ' '+ str(round(self.val_epoch,6))+ ' ' + str(round(self.LastValLossValue,6)), flush=True)\n","    self.LastLossValue = self.train_epoch\n","    self.LastValLossValue = self.val_epoch\n","    \n","    StoreMinLoss = False\n","    if not np.math.isnan(self.MinLossValue):\n","#      if (self.train_epoch < self.MinLossValue) and (self.val_epoch <= self.MinValLossValue):\n","      if (self.train_epoch < self.MinLossValue):\n","        if self.Numsuccess >= self.SuccessLimit:\n","          StoreMinLoss = True\n","    else:\n","      StoreMinLoss = True\n","    if StoreMinLoss:\n","      self.Numsuccess = 0\n","      extrastuff = ''\n","      extrastuff_val = ' '\n","      if not np.math.isnan(self.MinLossValue):\n","        extrastuff = ' Previous ' + str(round(self.MinLossValue,7))\n","        self.LittleJumpdifference  = self.MinLossValue - self.train_epoch\n","        if self.ValidationFraction > 0.001:\n","          if not np.math.isnan(self.MinValLossValue):\n","            extrastuff_val = ' Previous ' + str(round(self.MinValLossValue,7))\n","            LittleValJumpdifference = max(self.MinValLossValue - self.val_epoch, self.LittleJumpdifference)    \n","      self.saveMinLosspath = self.checkpoint.save(file_prefix=self.CHECKPOINTDIR + self.RunName +'MinLoss')\n","      if not self.BestLossSaved:\n","        print('\\nInitial Checkpoint at ' + self.saveMinLosspath + ' from ' + self.CHECKPOINTDIR)\n","      self.MinLossValue = self.train_epoch\n","      self.MinValLossValue = self.val_epoch\n","      if self.ValidationFraction > 0.001:\n","        extrastuff_val = ' Val Loss ' + str(round(self.val_epoch,7)) + extrastuff_val\n","      print(' Epoch ' + str(self.epochcount) + ' Loss ' + str(round(self.train_epoch,7)) + extrastuff + extrastuff_val+ ' Failed ' + str(self.Numfailed), flush = True)\n","      self.Numfailed = 0\n","      self.BestLossSaved = True\n","      self.BestLossValueSaved = self.train_epoch\n","      self.BestValLossValueSaved = self.val_epoch\n","      self.lastsavedepoch = self.epochcount\n","      self.NumberTimesSaved += 1\n","      return FalseReturn, self.train_epoch, self.val_epoch\n","  \n","    RestoreTrainflag = -1\n","    Trainrestore = False\n","    if LossChange > 0.0:\n","      if LossChange > self.BadJumpfraction * self.train_epoch:\n","        Trainrestore = True\n","        RestoreTrainflag = 0\n","      if not np.math.isnan(self.LittleJumpdifference):\n","        if LossChange > self.LittleJumpdifference * self.LittleJump:\n","          Trainrestore = True\n","          if RestoreTrainflag < 0:\n","            RestoreTrainflag = 1\n","      if self.BestLossSaved:  \n","        if self.train_epoch < self.MinLossValue:\n","          Trainrestore = False\n","          RestoreTrainflag = -1\n","    \n","    RestoreValflag = -1\n","    Valrestore = False\n","    if ValLossChange > 0.0:\n","      if ValLossChange > self.ValBadJumpfraction * self.val_epoch:\n","        Valrestore = True\n","        RestoreValflag = 0\n","      if not np.math.isnan(self.LittleValJumpdifference):\n","        if ValLossChange > self.LittleValJumpdifference * self.ValLittleJump:\n","          Valrestore = True\n","          if RestoreValflag < 0:\n","            RestoreValflag = 1\n","      if self.BestLossSaved:  \n","        if self.val_epoch < self.MinValLossValue:\n","          Valrestore = False\n","          RestoreValflag = -1\n","    Restoreflag = -1\n","    if Trainrestore and Valrestore:\n","      Needtorestore = True\n","      if RestoreTrainflag == 0:\n","        Restoreflag = 0\n","      else:\n","        Restoreflag = 1\n","    elif Trainrestore:\n","      Needtorestore = True\n","      Restoreflag = RestoreTrainflag + 2\n","    elif Valrestore:\n","      Needtorestore = True\n","      Restoreflag = RestoreValflag + 4\n","    if (self.Numfailed >= self.FailureLimit) and (Restoreflag == -1):\n","      Restoreflag = 6\n","      Needtorestore = True\n","    if Restoreflag >= 0:\n","      self.RestoreReasons[Restoreflag] += 1\n","    if Needtorestore and (not self.BestLossSaved):\n","      print('bad Jump ' + str(round(LossChange,7)) + ' Epoch ' + str(self.epochcount) + ' But nothing saved')\n","      return FalseReturn, self.train_epoch, self.val_epoch\n","    if Needtorestore:\n","      return TrueReturn, self.train_epoch, self.val_epoch\n","    else:\n","      return FalseReturn, self.train_epoch, self.val_epoch\n","\n","  def RestoreBestFit(self):\n","    if self.BestLossSaved:\n","      self.checkpoint.tfrecordvalloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","      self.checkpoint.tfrecordtrainloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","      self.checkpoint.restore(save_path=self.saveMinLosspath).expect_partial()\n","      self.tfepochstep  = self.checkpoint.tfepochstep \n","      self.recordvalloss = self.checkpoint.tfrecordvalloss.numpy().tolist()\n","      self.recordtrainloss = self.checkpoint.tfrecordtrainloss.numpy().tolist()\n","      trainlen = len(self.recordtrainloss)\n","      self.Numsuccess = 0\n","      extrastuff = ''\n","      if self.ValidationFraction > 0.001:\n","        vallen =len(self.recordvalloss)\n","        if vallen > 0:\n","          extrastuff = ' Replaced Val Loss ' + str(round(self.recordvalloss[vallen-1],7))+ ' bad val ' + str(round(self.val_epoch,7))\n","        else:\n","          extrastuff = ' No previous Validation Loss'\n","      print(str(self.epochcount) + ' Failed ' + str(self.Numfailed) + ' Restored Epoch ' + str(trainlen-1) + ' Replaced Loss ' + str(round(self.recordtrainloss[trainlen-1],7))\n","        + ' bad ' + str(round(self.train_epoch,7)) + extrastuff + ' Checkpoint at ' + self.saveMinLosspath)\n","      self.train_epoch = self.recordtrainloss[trainlen-1]\n","      self.Numfailed = 0\n","      self.LastLossValue = self.train_epoch\n","      self.NumberTimesRestored += 1\n","      if self.ValidationFraction > 0.001:\n","        vallen = len(self.recordvalloss)\n","        if vallen > 0:\n","          self.val_epoch = self.recordvalloss[vallen-1]\n","        else:\n","          self.val_epoch =  0.0\n","      return self.tfepochstep, self.recordtrainloss, self.recordvalloss, self.train_epoch, self.val_epoch\n","\n","  def PrintEndofFit(self, Numberofepochs):\n","      print(startbold + 'Number of Saves ' +  str(self.NumberTimesSaved) + ' Number of Restores ' + str(self.NumberTimesRestored))\n","      print('Epochs Requested ' + str(Numberofepochs) + ' Actually Stored ' + str(len(self.recordtrainloss)) + ' ' + str(self.tfepochstep.numpy()) \n","      + ' Successes ' +str(self.AccumulateSuccesses) + resetfonts)\n","      trainlen = len(self.recordtrainloss)\n","      train_epoch1 = self.recordtrainloss[trainlen-1]\n","      lineforval = ''\n","      if self.ValidationFraction > 0.001:\n","        lineforval = ' Last val '+ str(round(self.val_epoch,7))\n","      print(startbold + 'Last loss '+ str(round(self.train_epoch,7)) + ' Last loss in History ' + str(round(train_epoch1,7))+ ' Best Saved Loss '\n","      + str(round(self.BestLossValueSaved,7)) + lineforval + resetfonts)\n","      print(startbold + startred +\"\\nFailure Reasons\" + resetfonts)\n","      for ireason in range(0,len(self.AccumulateFailures)):\n","        print('Optimization Failure ' + str(ireason) + ' ' + self.NameofFailures[ireason] + ' ' + str(self.AccumulateFailures[ireason]))\n","      print(startbold + startred +\"\\nRestore Reasons\" + resetfonts)\n","      for ireason in range(0,len(self.RestoreReasons)):\n","        print('Backup to earlier fit ' + str(ireason) + ' ' + self.NameofRestoreReasons[ireason] + ' ' + str(self.RestoreReasons[ireason]))\n","\n","  def BestPossibleFit(self): # Use Best Saved if appropriate\n","    if self.UseBestAvailableLoss:\n","      if self.BestLossSaved:\n","        if self.BestLossValueSaved < self.train_epoch:\n","          self.checkpoint.tfrecordvalloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","          self.checkpoint.tfrecordtrainloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","          self.checkpoint.restore(save_path=self.saveMinLosspath).expect_partial()\n","          self.tfepochstep  = self.checkpoint.tfepochstep \n","          self.recordvalloss = self.checkpoint.tfrecordvalloss.numpy().tolist()\n","          self.recordtrainloss = self.checkpoint.tfrecordtrainloss.numpy().tolist()\n","          trainlen = len(self.recordtrainloss)\n","          Oldtraining = self.train_epoch\n","          self.train_epoch = self.recordtrainloss[trainlen-1]\n","          extrainfo = ''\n","          if self.ValidationFraction > 0.001:\n","            vallen = len(self.recordvalloss)\n","            if vallen > 0:\n","              extrainfo = '\\nVal Loss ' + str(round(self.recordvalloss[vallen-1],7)) + ' old Val ' + str(round(self.val_epoch,7))\n","              self.val_epoch = self.recordvalloss[vallen-1] \n","            else:\n","              self.val_epoch = 0.0\n","              extrainfo = '\\n no previous validation loss'\n","          print(startpurple+ startbold + 'Switch to Best Saved Value. Restored Epoch ' + str(trainlen-1)\n","          + '\\nNew Loss ' + str(round(self.recordtrainloss[trainlen-1],7)) + ' old ' + str(round(Oldtraining,7))\n","          + extrainfo + '\\nCheckpoint at ' + self.saveMinLosspath + resetfonts)\n","\n","        else:\n","          print(startpurple+ startbold + '\\nFinal fit is best: train ' + str(round(self.train_epoch,7)) + ' Val Loss ' + str(round(self.val_epoch,7)) + resetfonts)\n","    return self.tfepochstep, self.recordtrainloss, self.recordvalloss, self.train_epoch, self.val_epoch   "],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"0d4IgddaMoZX"},"source":["### LSTM Class + Custom Training"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"IAe2I1U8cujh","executionInfo":{"elapsed":1260,"status":"ok","timestamp":1634007134578,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"9ca5caae-15ab-4133-d418-ebd84e7368ff"},"source":["class MyLSTMcustommodel(tf.keras.Model):\n","  def __init__(self, **kwargs):\n","    super(MyLSTMcustommodel, self).__init__(**kwargs)\n","    self.fullLSTM = MyLSTMlayer()\n","\n","  def compile(self, optimizer,  loss):\n","      super(MyLSTMcustommodel, self).compile()\n","      self.optimizer = tf.keras.optimizers.get(optimizer)\n","      self.loss_object = loss\n","      self.loss_tracker = tf.keras.metrics.Mean(name=\"loss\")\n","      self.loss_tracker.reset_states()\n","      self.val_tracker = tf.keras.metrics.Mean(name=\"val\")\n","      self.val_tracker.reset_states()\n","      return\n","\n","  def resetmetrics(self):\n","      self.loss_tracker.reset_states()\n","      self.val_tracker.reset_states()\n","      return\n","\n","  def build_graph(self, shapes):\n","    input = tf.keras.layers.Input(shape=shapes, name=\"Input\")\n","    return tf.keras.models.Model(inputs=[input], outputs=[self.call(input)])\n","\n","  @tf.function\n","  def train_step(self, data, Time=None):\n","    if len(data) == 3:\n","      X_train, y_train, sw_train = data\n","    else:\n","      X_train, y_train = data\n","      sw_train = []\n","\n","    with tf.GradientTape() as tape:\n","      predictions = self(X_train, training=True)\n","      loss = self.loss_object(y_train, predictions, sw_train)\n","\n","    gradients = tape.gradient(loss, self.trainable_variables)\n","    self.optimizer.apply_gradients(zip(gradients, self.trainable_variables))\n","    self.loss_tracker.update_state(loss)\n","    return {\"loss\": self.loss_tracker.result()}\n","\n","  @tf.function\n","  def test_step(self, data, Time=None):\n","    if len(data) == 3:\n","      X_val, y_val, sw_val = data\n","    else:\n","      X_val, y_val = data\n","      sw_val = []\n","\n","    predictions = self(X_val, training=False)\n","    loss = self.loss_object(y_val, predictions, sw_val)\n","\n","    self.val_tracker.update_state(loss)\n","    return {\"val_loss\": self.val_tracker.result()}\n","\n","  def call(self, inputs, training=None, Time=None):  \n","    outputs = self.fullLSTM(inputs, training=training)\n","    return outputs\n","\n","        \n","def RunLSTMCustomVersion():\n","  # Run the LSTM model defined by Model and Layer class with custom training\n","  # Use Tensorflow datasets\n","\n","  garbagecollectcall = 0\n","  global LSTMvalidationfrac\n","  global UsedLSTMvalidationfrac\n","\n","  if LocationBasedValidation:\n","    UsedLSTMvalidationfrac = LocationValidationFraction\n","    X_predict, y_predict, X_val, y_val = setSeparateDLinput(0)\n","    InitializeDLforTimeSeries('Class custom  Version with location-based validation ',processindex,y_predict)\n","    epochsize = X_predict.shape[0]\n","    if UsedLSTMvalidationfrac > 0.001:\n","      epochsize = X_predict.shape[0] + X_val.shape[0]\n","    if UseClassweights:     \n","      sw = np.empty_like(y_predict, dtype=np.float32)\n","      for j in range(0,sw.shape[0]):\n","        for i in range(0,NpredperseqTOT):\n","          sw[j,i] = Predictionwgt[i] \n","      X_train, y_train, sw_train = shuffleDLinput(X_predict, y_predict, sw)\n","      train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train, sw_train))\n","    else:\n","      X_train, y_train = shuffleDLinput(X_predict, y_predict)\n","      train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train))\n","      sw_train =[]\n","    \n","    if UsedLSTMvalidationfrac > 0.001:\n","      if UseClassweights:     \n","        sw_val = np.empty_like(y_val, dtype=np.float32)\n","        for j in range(0,sw_val.shape[0]):\n","          for i in range(0,NpredperseqTOT):\n","            sw_val[j,i] = Predictionwgt[i] \n","        val_dataset = tf.data.Dataset.from_tensor_slices((X_val, y_val, sw_val))\n","      else:\n","        val_dataset = tf.data.Dataset.from_tensor_slices((X_val, y_val))\n","        sw_val =[]\n","\n","# Dimensions are X_predict: OuterBatchDimension,Tseq,NpropperseqTOT\n","# OR if SymbolicWindows OuterBatchDimension,1,1\n","# y_predict OuterBatchDimension,NpredperseqTOT\n","  else:\n","    X_predict, y_predict = setDLinput(Spacetime = False)\n","    InitializeDLforTimeSeries('Class custom  Version ',processindex,y_predict)\n","    epochsize = X_predict.shape[0]\n","\n","    if UseClassweights:     \n","      sw = np.empty_like(y_predict, dtype=np.float32)\n","      for j in range(0,sw.shape[0]):\n","        for i in range(0,NpredperseqTOT):\n","          sw[j,i] = Predictionwgt[i] \n","      X_train, y_train, sw_train = shuffleDLinput(X_predict, y_predict, sw)\n","      train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train, sw_train))\n","    else:\n","      X_train, y_train = shuffleDLinput(X_predict, y_predict)\n","      train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train))\n","      sw_train =[]\n","\n","    val_dataset =[]\n","    if UsedLSTMvalidationfrac > 0.001:\n","      total = X_train.shape[0]\n","      totval = int(UsedLSTMvalidationfrac*total)\n","      print(\" Validation samples \", totval, \" Training samples \", total-totval)\n","      if totval > 0:\n","        val_dataset = train_dataset.take(totval)\n","        train_dataset = train_dataset.skip(totval)\n","      else:\n","        UsedLSTMvalidationfrac = 0.0\n","\n","  train_dataset = train_dataset.shuffle(buffer_size = OuterBatchDimension, reshuffle_each_iteration=True)\n","  train_dataset = train_dataset.batch(LSTMbatch_size)\n","  if UsedLSTMvalidationfrac > 0.001:\n","    val_dataset = val_dataset.batch(LSTMbatch_size)\n","\n","\n","  myLSTMcustommodel = MyLSTMcustommodel(name ='myLSTMcustommodel')\n","\n","  myLSTMcustommodel.compile(loss= weightedcustom_lossGCF1, optimizer= LSTMoptimizer)\n","\n","  recordtrainloss = []\n","  recordvalloss = []\n","  tfrecordtrainloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","  tfrecordvalloss = tf.Variable([],  shape =tf.TensorShape(None), trainable = False)\n","  tfepochstep = tf.Variable(0, trainable = False)\n","\n","  usecustomfit = True\n","  if usecustomfit and UseClassweights:\n","\n","# Set up checkpoints to read or write\n","    mycheckpoint = tf.train.Checkpoint(optimizer=myLSTMcustommodel.optimizer, \n","                                     model=myLSTMcustommodel, tfepochstep=tf.Variable(0),\n","                                     tfrecordtrainloss=tfrecordtrainloss,tfrecordvalloss=tfrecordvalloss)\n","    \n","# This restores back up\n","    if Restorefromcheckpoint:\n","      save_path = inputCHECKPOINTDIR + inputRunName + inputCheckpointpostfix\n","      mycheckpoint.restore(save_path=save_path).expect_partial()\n","      tfepochstep  = mycheckpoint.tfepochstep \n","      recordvalloss = mycheckpoint.tfrecordvalloss.numpy().tolist()\n","      recordtrainloss = mycheckpoint.tfrecordtrainloss.numpy().tolist()\n","      trainlen = len(recordtrainloss)\n","      extrainfo = ''\n","      vallen = len(recordvalloss)\n","      SavedTrainLoss = recordtrainloss[trainlen-1]\n","      SavedValLoss = 0.0\n","      if vallen > 0:\n","        extrainfo = ' Val Loss ' + str(round(recordvalloss[vallen-1],7))\n","        SavedValLoss = recordvalloss[vallen-1]\n","      print(startbold + 'Network restored from ' + save_path + '\\nLoss ' + str(round(recordtrainloss[trainlen-1],7)) \n","       + extrainfo + ' Epochs ' + str(tfepochstep.numpy()) + resetfonts )\n","      LSTMTFMonitor.SetCheckpointParms(mycheckpoint,CHECKPOINTDIR,RunName = RunName,Restoredcheckpoint= True, \n","              Restored_path = save_path,  ValidationFraction = UsedLSTMvalidationfrac, SavedTrainLoss = SavedTrainLoss, \n","              SavedValLoss =SavedValLoss)\n","    else:\n","      LSTMTFMonitor.SetCheckpointParms(mycheckpoint,CHECKPOINTDIR,RunName = RunName,Restoredcheckpoint= False, \n","                                       ValidationFraction = UsedLSTMvalidationfrac)\n","\n","# This just does analysis      \n","    if AnalysisOnly:\n","      if OutputNetworkPictures:\n","        outputpicture1 = APPLDIR +'/Outputs/Model_' +RunName + '1.png'\n","        outputpicture2 = APPLDIR +'/Outputs/Model_' +RunName + '2.png'\n","        tf.keras.utils.plot_model(myLSTMcustommodel.build_graph([Tseq,NpropperseqTOT]), \n","                            show_shapes=True, to_file = outputpicture1,\n","                            show_dtype=True, \n","                            expand_nested=True)\n","        tf.keras.utils.plot_model(myLSTMcustommodel.fullLSTM.build_graph([Tseq,NpropperseqTOT]), \n","                            show_shapes=True, to_file = outputpicture2,\n","                            show_dtype=True, \n","                            expand_nested=True)\n","      if SymbolicWindows:\n","        finalizeDL(myLSTMcustommodel,recordtrainloss, recordvalloss,UsedLSTMvalidationfrac,\n","              ReshapedSequencesTOT, RawInputPredictionsTOT,0,LabelFit = 'Non-sampled LSTM Fit')\n","      else:\n","        finalizeDL(myLSTMcustommodel,recordtrainloss, recordvalloss,UsedLSTMvalidationfrac,\n","              RawInputSequencesTOT, RawInputPredictionsTOT,0,LabelFit = 'Non-sampled LSTM Fit')\n","      return\n","\n","# Initialize progress bars\n","    pbar = notebook.trange(LSTMepochs, desc='Training loop', unit ='epoch')\n","    bbar = notebook.trange(epochsize,  desc='Batch    loop', unit  = 'sample')\n","\n","    train_epoch = 0.0 # Training Loss this epoch\n","    val_epoch = 0.0 # Validation Loss this epoch\n","\n","    Ctime1 = 0.0\n","    Ctime2 = 0.0\n","    Ctime3 = 0.0\n","    GarbageCollect = True\n","\n","    for e in pbar:\n","      myLSTMcustommodel.resetmetrics()\n","      train_lossoverbatch=[]\n","      val_lossoverbatch=[]\n","      \n","      if batchperepoch:\n","        qbar = notebook.trange(epochsize, desc='Batch loop epoch ' +str(e))\n","\n","      for batch, (X_train, y_train, sw_train) in enumerate(train_dataset.take(-1)):\n","        Numinbatch = X_train.shape[0]\n","        # SymbolicWindows X_train is indexed by Batch index, 1(replace by Window), 1 (replace by properties)\n","        if SymbolicWindows:\n","          StopWatch.start('label1')\n","          X_train = X_train.numpy()          \n","          X_train = np.reshape(X_train,Numinbatch)\n","          iseqarray = np.right_shift(X_train,16)\n","          ilocarray = np.bitwise_and(X_train, 0b1111111111111111)\n","          StopWatch.stop('label1')\n","          Ctime1 += StopWatch.get('label1', digits=4)\n","          StopWatch.start('label3')\n","          X_train_withSeq = list()\n","          for iloc in range(0,Numinbatch):\n","            X_train_withSeq.append(ReshapedSequencesTOT[ilocarray[iloc],iseqarray[iloc]:iseqarray[iloc]+Tseq])\n","#         X_train_withSeq=[ReshapedSequencesTOT[ilocarray[iloc],iseqarray[iloc]:iseqarray[iloc]+Tseq] for iloc in range(0,Numinbatch)]\n","          StopWatch.stop('label3')\n","          Ctime3 += StopWatch.get('label3', digits=5)\n","          StopWatch.start('label2')\n","          loss = myLSTMcustommodel.train_step((np.array(X_train_withSeq), y_train, sw_train))\n","          StopWatch.stop('label2')\n","          Ctime2 += StopWatch.get('label2', digits=4)\n","\n","        else:\n","          loss = myLSTMcustommodel.train_step((X_train, y_train, sw_train))\n","\n","        if GarbageCollect:\n","          if SymbolicWindows:\n","            X_train_withSeq = None\n","          X_train = None\n","          y_train = None\n","          sw_train = None\n","          if garbagecollectcall > GarbageCollectionLimit:\n","            garbagecollectcall = 0\n","            gc.collect()\n","          garbagecollectcall += 1\n","\n","        localloss = loss[\"loss\"].numpy()\n","        train_lossoverbatch.append(localloss)\n","\n","        if batchperepoch:\n","          qbar.update(LSTMbatch_size)\n","          qbar.set_postfix(Loss = localloss, Epoch = e)\n","        bbar.update(Numinbatch)\n","        bbar.set_postfix(Loss = localloss, Epoch = e)\n","# End Training step for one batch\n","\n","# Start Validation \n","      if UsedLSTMvalidationfrac > 0.001:\n","        for batch, (X_val, y_val, sw_val) in enumerate(val_dataset.take(-1)):\n","          Numinbatch = X_val.shape[0]\n","          # SymbolicWindows X_val is indexed by Batch index, 1(replace by Window), 1 (replace by properties)\n","          if SymbolicWindows:\n","            StopWatch.start('label1')\n","            X_val = X_val.numpy()          \n","            X_val = np.reshape(X_val,Numinbatch)\n","            iseqarray = np.right_shift(X_val,16)\n","            ilocarray = np.bitwise_and(X_val, 0b1111111111111111)\n","            StopWatch.stop('label1')\n","            Ctime1 += StopWatch.get('label1', digits=4)\n","            StopWatch.start('label3')\n","            X_valFull = list()\n","            for iloc in range(0,Numinbatch):\n","              X_valFull.append(ReshapedSequencesTOT[ilocarray[iloc],iseqarray[iloc]:iseqarray[iloc]+Tseq])\n","            StopWatch.stop('label3')\n","            Ctime3 += StopWatch.get('label3', digits=5)\n","            StopWatch.start('label2')\n","            loss = myLSTMcustommodel.test_step((np.array(X_valFull), y_val, sw_val))\n","            StopWatch.stop('label2')\n","            Ctime2 += StopWatch.get('label2', digits=4)\n","\n","          else:\n","            loss = myLSTMcustommodel.test_step((X_val, y_val, sw_val))\n","\n","          localval = loss[\"val_loss\"].numpy()\n","          val_lossoverbatch.append(localval)\n","          \n","          bbar.update(X_val.shape[0])\n","          bbar.set_postfix(Val_loss = localval, Epoch = e)\n","# End Batch\n","\n","      train_epoch = train_lossoverbatch[-1]\n","      recordtrainloss.append(train_epoch)\n","      mycheckpoint.tfrecordtrainloss = tf.Variable(recordtrainloss)\n","\n","      val_epoch = 0.0\n","      if UsedLSTMvalidationfrac > 0.001:\n","        val_epoch = val_lossoverbatch[-1]\n","        recordvalloss.append(val_epoch)\n","        mycheckpoint.tfrecordvalloss = tf.Variable(recordvalloss)\n","\n","      pbar.set_postfix(Loss = train_epoch, Val = val_epoch)\n","      bbar.reset()\n","      tfepochstep = tfepochstep + 1\n","      mycheckpoint.tfepochstep.assign(tfepochstep)\n","\n","# Decide on best fit\n","      MonitorResult, train_epoch, val_epoch = LSTMTFMonitor.EpochEvaluate(e,train_epoch, val_epoch, \n","          tfepochstep, recordtrainloss, recordvalloss)\n","      if MonitorResult==1:\n","        tfepochstep, recordtrainloss, recordvalloss, train_epoch, val_epoch = LSTMTFMonitor.RestoreBestFit() # Restore Best Fit\n","      else:\n","        continue\n","# *********************** End of Epoch Loop\n","\n","# Print Fit details\n","    print(startbold + 'Times ' + str(round(Ctime1,5))  + ' ' + str(round(Ctime3,5)) + ' TF ' + str(round(Ctime2,5)) + resetfonts)\n","    LSTMTFMonitor.PrintEndofFit(LSTMepochs)\n","\n","# Set Best Possible Fit\n","    tfepochstep, recordtrainloss, recordvalloss, train_epoch, val_epoch = LSTMTFMonitor.BestPossibleFit()\n","\n","    if Checkpointfinalstate:\n","      savepath = mycheckpoint.save(file_prefix=CHECKPOINTDIR + RunName)\n","      print('Checkpoint at ' + savepath + ' from ' + CHECKPOINTDIR)\n","    trainlen = len(recordtrainloss)\n","    extrainfo = ''\n","    if UsedLSTMvalidationfrac > 0.001:\n","      vallen = len(recordvalloss)\n","      extrainfo = ' Val Epoch ' + str(vallen-1) + ' Val Loss ' + str(round(recordvalloss[vallen-1],7))\n","    print('Train Epoch ' + str(trainlen-1) + ' Train Loss ' + str(round(recordtrainloss[trainlen-1],7)) + extrainfo)\n","\n","\n","  else:\n","    the_callbacks = [TqdmCallback()]\n","    modelresult = myLSTMcustommodel.fit(train_dataset,\n","          validation_data = val_dataset,\n","          epochs=LSTMepochs,\n","          batch_size=None,\n","          verbose = LSTMverbose,\n","          callbacks=the_callbacks\n","          )\n","    recordtrainloss = modelresult.history['loss']\n","    recordvalloss = modelresult.history['val_loss']\n","\n","  myLSTMcustommodel.fullLSTM.summary()\n","  myLSTMcustommodel.summary()\n","  if OutputNetworkPictures:\n","    outputpicture1 = APPLDIR +'/Outputs/Model_' +RunName + '1.png'\n","    outputpicture2 = APPLDIR +'/Outputs/Model_' +RunName + '2.png'\n","    tf.keras.utils.plot_model(myLSTMcustommodel.build_graph([Tseq,NpropperseqTOT]), \n","                        show_shapes=True, to_file = outputpicture1,\n","                        show_dtype=True, \n","                        expand_nested=True)\n","    tf.keras.utils.plot_model(myLSTMcustommodel.fullLSTM.build_graph([Tseq,NpropperseqTOT]), \n","                        show_shapes=True, to_file = outputpicture2,\n","                        show_dtype=True, \n","                        expand_nested=True)\n","  if SymbolicWindows:\n","    finalizeDL(myLSTMcustommodel,recordtrainloss,recordvalloss,UsedLSTMvalidationfrac,ReshapedSequencesTOT, RawInputPredictionsTOT,0)\n","  else:\n","    finalizeDL(myLSTMcustommodel,recordtrainloss,recordvalloss,UsedLSTMvalidationfrac,RawInputSequencesTOT, RawInputPredictionsTOT,0)\n","  return"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"lmfF4S7Y8kam"},"source":["### Standalone LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"oXl4e02h8sUs","executionInfo":{"elapsed":60,"status":"ok","timestamp":1634007135544,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"13dcc8dd-2ed3-46c7-cbac-861af6f70748"},"source":["def StandaloneLSTM():\n","# run pure LSTM with no attention (transformer) with simple Keras sequential model\n","\n","  X_predict, y_predict = setDLinput(Spacetime = False)\n","  X_train, y_train = shuffleDLinput(X_predict, y_predict)\n","\n","  # n_timesteps=n_steps_in=Tseq, \n","  # n_features= NpropperseqTOT,  \n","  # n_outputs = NpredperseqTOT       \n","  InitializeDLforTimeSeries('Keras Sequential Version ',processindex,y_predict)\n","\n","  # define model\n","  StandaloneLSTMmodel = Sequential()\n","  \n","  if(LSTMInitialMLP > 0):\n","      StandaloneLSTMmodel.add(Dense(LSTMInitialMLP, activation=LSTMactivationvalue, input_shape=(Tseq,NpropperseqTOT)))\n","      nextround = LSTMInitialMLP\n","  else:\n","      nextround = NpropperseqTOT\n","\n","  StandaloneLSTMmodel.add(LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout1, dropout = LSTMdropout1,\n","                  activation= LSTMactivationvalue , return_sequences=True, recurrent_activation= LSTMrecurrent_activation,\n","                  input_shape=(Tseq, nextround)))\n","\n","  if(LSTMThirdLayer):\n","      StandaloneLSTMmodel.add(LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout2, dropout = LSTMdropout2,\n","                  activation= LSTMactivationvalue , return_sequences=True, recurrent_activation= LSTMrecurrent_activation,\n","                  input_shape=(Tseq, number_LSTMnodes)))\n","      StandaloneLSTMmodel.add(LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout2, dropout = LSTMdropout2,\n","                      activation= LSTMactivationvalue , recurrent_activation=LSTMrecurrent_activation,\n","                      input_shape=(Tseq, number_LSTMnodes)))\n","  else:\n","      StandaloneLSTMmodel.add(LSTM(number_LSTMnodes, recurrent_dropout= LSTMrecurrent_dropout2, dropout = LSTMdropout2,\n","              activation= LSTMactivationvalue, recurrent_activation=LSTMrecurrent_activation,\n","              input_shape=(Tseq, number_LSTMnodes)))\n","      \n","  if(LSTMFinalMLP > 0):\n","      StandaloneLSTMmodel.add(Dense(LSTMFinalMLP, activation=LSTMactivationvalue))\n","  StandaloneLSTMmodel.add(Dense(NpredperseqTOT))\n","  \n","  if CustomLoss == 0:\n","      StandaloneLSTMmodel.compile(loss='mse', optimizer= LSTMoptimizer)\n","  if CustomLoss == 1:\n","      StandaloneLSTMmodel.compile(loss= custom_lossGCF1, optimizer= LSTMoptimizer)\n","  if CustomLoss == 4:    \n","      StandaloneLSTMmodel.compile(loss= custom_lossGCF4, optimizer= LSTMoptimizer)\n","\n","  modelsummarystring = get_model_summary(StandaloneLSTMmodel)\n","  if( processindex == 0 ):\n","      print(modelsummarystring)\n","\n","  the_callbacks = [TqdmCallback(),]\n","  if UseClassweights:   \n","      cw = {}\n","      for i in range(0,NpredperseqTOT):\n","        cw[i] = Predictionwgt[i]     \n","      modelresult = StandaloneLSTMmodel.fit(X_train, y_train,\n","            epochs=LSTMepochs,\n","            batch_size=LSTMbatch_size,\n","            class_weight = cw,\n","            verbose=LSTMverbose,\n","            validation_split=UsedLSTMvalidationfrac,\n","            callbacks=the_callbacks\n","            )\n","  else:\n","      modelresult = StandaloneLSTMmodel.fit(X_train, y_train,\n","            epochs=LSTMepochs,\n","            batch_size=LSTMbatch_size,\n","            verbose=LSTMverbose,\n","            validation_split=UsedLSTMvalidationfrac,\n","            callbacks=the_callbacks\n","            )  \n","  \n","  recordtrainloss = modelresult.history['loss']\n","  recordvalloss = modelresult.history['val_loss']\n","  finalizeDL(StandaloneLSTMmodel, recordtrainloss, recordvalloss, UsedLSTMvalidationfrac,\n","             RawInputSequencesTOT, RawInputPredictionsTOT,0, LabelFit = 'Best LSTM Fit')\n","  return\n"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"V0ug_91p0yTF"},"source":["### Prepare LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"dD_cDFla_yV2","executionInfo":{"elapsed":159,"status":"ok","timestamp":1634007137562,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"dd722111-ff2e-43ab-cf24-87b0c0ab0ac5"},"source":["# Run LSTM Only\n","AnalysisOnly = True\n","Dumpoutkeyplotsaspics = True\n","Restorefromcheckpoint = False\n","Checkpointfinalstate = True\n","if AnalysisOnly:\n","  Restorefromcheckpoint = True\n","  Checkpointfinalstate = False\n","if Restorefromcheckpoint:\n","  inputRunName = RunName\n","  inputCHECKPOINTDIR = CHECKPOINTDIR\n","  inputRunName = 'CovidA21-LSTM4CleanedRMSE'\n","  inputCheckpointpostfix = '-45'\n","  inputCHECKPOINTDIR = APPLDIR + \"/checkpoints/\" + inputRunName + \"dir/\"\n","\n","batchperepoch = False # if True output a batch bar for each epoch\n","GlobalSpacetime = False\n","IncreaseNloc_sample = 1\n","DecreaseNloc_sample = 1\n","SkipDL2F = True\n","\n","# Run Pure LSTM\n","LSTMepochs = 150\n","number_LSTMnodes= 48\n","LSTMFinalMLP = 128\n","LSTMInitialMLP = 128\n","LSTMThirdLayer = False\n","processindex = 0\n","standaloneLSTMrun = False\n","ClassLSTMrun = True\n","CustomTraining = True\n","\n","if ClassLSTMrun and CustomTraining:\n","  FullSetValidation = False\n","  LSTMTFMonitor = TFTrainingMonitor()\n","  if Hydrology:\n","    LSTMTFMonitor.SetControlParms(SuccessLimit = 1,FailureLimit = 2)\n","  if Earthquake:\n","    LSTMTFMonitor.SetControlParms(SuccessLimit = 1,FailureLimit = 2)\n","  if ReadJan2021Covid or ReadApril2021Covid:\n","    LSTMTFMonitor.SetControlParms(SuccessLimit = 3,FailureLimit = 2)\n"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"ckwZHK12xwCY"},"source":["##LSTM Run & Output"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"DZIby3dM_yV5","executionInfo":{"elapsed":215,"status":"ok","timestamp":1634007140404,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"5a3531ac-d9a0-46d4-a7ac-b0235e50c692"},"source":["def PrintLSTMandBasicStuff(model):\n","  if SymbolicWindows:\n","    print(startbold  + startred + 'Symbolic Windows used to save space'+resetfonts)\n","  else:\n","    print(startbold  + startred + 'Symbolic Windows NOT used'+resetfonts)\n","  print('Training Locations ' + str(TrainingNloc) + ' Validation Locations ' + str(ValidationNloc) +\n","        ' Sequences ' + str(Num_Seq))\n","  if LocationBasedValidation:\n","    print(startbold  + startred + \" Location Based Validation with fraction \" + str(LocationValidationFraction)+resetfonts)\n","    if RestartLocationBasedValidation:\n","      print(startbold  + startred + \" Using Validation set saved in \" + RestartRunName+resetfonts)\n","  print('\\nAre futures predicted ' + str(UseFutures) + ' Custom Loss Pointer ' + str(CustomLoss) + ' Class weights used ' + str(UseClassweights))\n","  \n","  print('\\nProperties per sequence ' + str(NpropperseqTOT))\n","  print('\\n' + startbold +startpurple + 'Properties ' + resetfonts)\n","  labelline = 'Name   '\n","  for propval in range (0,7):\n","    labelline += QuantityStatisticsNames[propval] + '    '\n","  print('\\n' + startbold + labelline + resetfonts)\n","  for iprop in range(0,NpropperseqTOT):\n","    line = startbold + startpurple + str(iprop) + ' ' + InputPropertyNames[PropertyNameIndex[iprop]] + resetfonts  \n","    jprop = PropertyAverageValuesPointer[iprop]\n","    line += ' Root ' + str(QuantityTakeroot[jprop])\n","    for proppredval in range (0,7):\n","      line += ' ' + str(round(QuantityStatistics[jprop,proppredval],3))\n","    print(line)\n","\n","  print('\\nPredictions per sequence ' + str(NpredperseqTOT))\n","  print('\\n' + startbold +startpurple + 'Predictions ' + resetfonts)\n","  print('\\n' + startbold + labelline + resetfonts)\n","  for ipred in range(0,NpredperseqTOT):\n","    line = startbold + startpurple + str(ipred) + ' ' + Predictionname[ipred] + ' wgt ' + str(round(Predictionwgt[ipred],3)) + resetfonts + ' '\n","    jpred = PredictionAverageValuesPointer[ipred]\n","    line += ' Root ' + str(QuantityTakeroot[jpred])\n","    for proppredval in range (0,7):\n","      line += ' ' + str(round(QuantityStatistics[jpred,proppredval],3))\n","    print(line)\n","  print('\\n')\n","\n","  if model == 0:\n","    print('Number of LSTMworkers ' + str(number_of_LSTMworkers))\n","    print('Number of epochs for each LSTMworker ' + str(LSTMepochs))\n","    print('LSTM Validation Fraction ' +str(LSTMvalidationfrac) + ' Method to chose best solution '+ str(bestmethod))\n","    print('Batch size for LSTM ' + str(LSTMbatch_size))\n","    print('LSTM Optimizer ' + str(LSTMoptimizer))\n","  else:\n","    print('Number of epochs for Transformer ' + str(Transformerepochs))\n","  \n","  print('LSTM Activation Method ' + str(LSTMactivationvalue))\n","  print('LSTM recurrent Activation method ' + str(LSTMrecurrent_activation)) \n","  print('LSTM Dropout Layer 1 ' +str(LSTMdropout1) + 'LSTM Recurrent Dropout Layer 1 ' +str(LSTMrecurrent_dropout1) + ' LSTM Dropout Layer >= 2 ' +str(LSTMdropout2) + 'LSTM Recurrent Dropout Layer >=2 ' +str(LSTMrecurrent_dropout2))\n","  print('Number of hidden LSTM nodes ' + str(number_LSTMnodes) + ' Is there a third LSTM layer? ' + str(LSTMThirdLayer))\n","  print('LSTM Initial Embedding layer ' + str(LSTMInitialMLP) + ' Final LSTM Layer ' + str(LSTMFinalMLP))\n","  print('LSTM Verbose Option ' + str(LSTMverbose))\n"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":793},"id":"GeEXX-lSuuhq","executionInfo":{"elapsed":225,"status":"error","timestamp":1634007141687,"user":{"displayName":"Andrej Erkelens","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjahc31jh5I4_oFmshQy2BDAFJoGkT9WG1qvIHCpKc=s64","userId":"06778272674306901716"},"user_tz":240},"outputId":"3a33c9e3-6f63-4f4e-c17a-c05a825a8381"},"source":["current_time = timenow()\n","runtype = ''\n","if Restorefromcheckpoint:\n","  runtype = 'Restarted '\n","if standaloneLSTMrun or ClassLSTMrun:\n","  print(wraptotext(startbold + startred +  current_time + ' '  + runtype + RunName + ' ' + RunComment + resetfonts))\n","  PrintLSTMandBasicStuff(0)\n","if standaloneLSTMrun:\n","  StandaloneLSTM()\n","if ClassLSTMrun:\n","  if SymbolicWindows:\n","    CustomTraining = True\n","  if CustomTraining:\n","    RunLSTMCustomVersion()\n","  else:\n","    RunLSTMClassVersion()\n","if standaloneLSTMrun or ClassLSTMrun:\n","  print(startbold + startpurple +  'LSTM run completed ' + runtype + RunName + ' ' + RunComment + resetfonts)\n","  sys.exit(0)\n","print(startbold + startpurple +  current_time + ' UTC Start Hybrid Transformer run ' + RunName + ' ' + RunComment + resetfonts)"],"execution_count":null,"outputs":[{"data":{"application/javascript":["google.colab.output.setIframeHeight(0, true, {maxHeight: 20000})"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\u001b[1m\u001b[31m10/12/2021, 02:52:21 UTC Restarted CovidA21-TFT2-TFTTestC  TFT Dev on Covid\u001b[0m\n","\u001b[1m\u001b[31mSymbolic Windows NOT used\u001b[0m\n","Training Locations 500 Validation Locations 0 Sequences 396\n","\n","Are futures predicted True Custom Loss Pointer 1 Class weights used True\n","\n","Properties per sequence 23\n","\n","\u001b[1m\u001b[35mProperties \u001b[0m\n","\n","\u001b[1mName   Min    Max    Norm    Mean    Std    Normed Mean    Normed Std    \u001b[0m\n","\u001b[1m\u001b[35m0 Cases\u001b[0m Root 2 0.0 149.897 0.007 7.738 7.374 0.052 0.049\n","\u001b[1m\u001b[35m1 Deaths\u001b[0m Root 2 0.0 17.833 0.056 0.784 1.173 0.044 0.066\n","\u001b[1m\u001b[35m2 Age Distribution\u001b[0m Root 1 0.248 1.0 1.33 0.507 0.091 0.345 0.121\n","\u001b[1m\u001b[35m3 Air Pollution\u001b[0m Root 1 0.0 1.0 1.0 0.413 0.115 0.413 0.115\n","\u001b[1m\u001b[35m4 Co-morbidities\u001b[0m Root 1 0.029 0.581 1.813 0.285 0.099 0.463 0.179\n","\u001b[1m\u001b[35m5 Demographics\u001b[0m Root 1 0.189 1.0 1.233 0.503 0.112 0.388 0.139\n","\u001b[1m\u001b[35m6 Disease Spread\u001b[0m Root 1 0.0 1.0 1.0 0.234 0.243 0.234 0.243\n","\u001b[1m\u001b[35m7 Health Disparities\u001b[0m Root 1 0.004 0.848 1.184 0.264 0.158 0.308 0.187\n","\u001b[1m\u001b[35m8 Hospital Beds\u001b[0m Root 1 0.0 1.0 1.0 0.456 0.086 0.456 0.086\n","\u001b[1m\u001b[35m9 Mobility\u001b[0m Root 1 0.499 1.0 1.996 0.683 0.07 0.367 0.14\n","\u001b[1m\u001b[35m10 Residential Density\u001b[0m Root 1 0.016 0.994 1.023 0.577 0.264 0.574 0.27\n","\u001b[1m\u001b[35m11 Social Distancing\u001b[0m Root 1 0.0 1.0 1.0 0.904 0.166 0.904 0.166\n","\u001b[1m\u001b[35m12 Testing\u001b[0m Root 1 0.0 1.0 1.0 0.569 0.228 0.569 0.228\n","\u001b[1m\u001b[35m13 Transmissible Cases\u001b[0m Root 1 0.0 1.0 1.0 0.527 0.166 0.527 0.166\n","\u001b[1m\u001b[35m14 voting\u001b[0m Root 1 0.144 0.945 1.249 0.514 0.148 0.462 0.185\n"]},{"ename":"IndexError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-52-d53ebacfed10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mstandaloneLSTMrun\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mClassLSTMrun\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwraptotext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstartbold\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstartred\u001b[0m \u001b[0;34m+\u001b[0m  \u001b[0mcurrent_time\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' '\u001b[0m  \u001b[0;34m+\u001b[0m \u001b[0mruntype\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mRunName\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mRunComment\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mresetfonts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mPrintLSTMandBasicStuff\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mstandaloneLSTMrun\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0mStandaloneLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-51-408c490aaec4>\u001b[0m in \u001b[0;36mPrintLSTMandBasicStuff\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m     19\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstartbold\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlabelline\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mresetfonts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0miprop\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mNpropperseqTOT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstartbold\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstartpurple\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miprop\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mInputPropertyNames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mPropertyNameIndex\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0miprop\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mresetfonts\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m     \u001b[0mjprop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPropertyAverageValuesPointer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0miprop\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0mline\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m' Root '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mQuantityTakeroot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mjprop\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 15 is out of bounds for axis 0 with size 15"]}]},{"cell_type":"code","metadata":{"id":"WIvBjgteaksn"},"source":[""],"execution_count":null,"outputs":[]}]}